// Code generated by girgen. DO NOT EDIT.

package gstplay

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/go-gst/go-gst/pkg/gst"
)

// #include <stdlib.h>
// #include <gst/play/play.h>
import "C"

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectBuffering
func _gotk4_gstplay1_PlaySignalAdapter_ConnectBuffering(arg0 C.gpointer, arg1 C.gint, arg2 C.guintptr) {
	var f func(object int)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object int))
	}

	var _object int // out

	_object = int(arg1)

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectDurationChanged
func _gotk4_gstplay1_PlaySignalAdapter_ConnectDurationChanged(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) {
	var f func(object uint64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object uint64))
	}

	var _object uint64 // out

	_object = uint64(arg1)

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectEndOfStream
func _gotk4_gstplay1_PlaySignalAdapter_ConnectEndOfStream(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectError
func _gotk4_gstplay1_PlaySignalAdapter_ConnectError(arg0 C.gpointer, arg1 *C.GError, arg2 *C.GstStructure, arg3 C.guintptr) {
	var f func(err error, details *gst.Structure)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(err error, details *gst.Structure))
	}

	var _err error              // out
	var _details *gst.Structure // out

	_err = gerror.Take(unsafe.Pointer(arg1))
	if arg2 != nil {
		_details = (*gst.Structure)(gextras.NewStructNative(unsafe.Pointer(arg2)))
		C.gst_mini_object_ref((*C.GstMiniObject)(unsafe.Pointer(arg2)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_details)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gst_mini_object_unref((*C.GstMiniObject)(intern.C))
			})
	}

	f(_err, _details)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectMediaInfoUpdated
func _gotk4_gstplay1_PlaySignalAdapter_ConnectMediaInfoUpdated(arg0 C.gpointer, arg1 *C.GstPlayMediaInfo, arg2 C.guintptr) {
	var f func(object *PlayMediaInfo)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object *PlayMediaInfo))
	}

	var _object *PlayMediaInfo // out

	_object = wrapPlayMediaInfo(coreglib.Take(unsafe.Pointer(arg1)))

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectMuteChanged
func _gotk4_gstplay1_PlaySignalAdapter_ConnectMuteChanged(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) {
	var f func(object bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object bool))
	}

	var _object bool // out

	if arg1 != 0 {
		_object = true
	}

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectPositionUpdated
func _gotk4_gstplay1_PlaySignalAdapter_ConnectPositionUpdated(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) {
	var f func(object uint64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object uint64))
	}

	var _object uint64 // out

	_object = uint64(arg1)

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectSeekDone
func _gotk4_gstplay1_PlaySignalAdapter_ConnectSeekDone(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) {
	var f func(object uint64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object uint64))
	}

	var _object uint64 // out

	_object = uint64(arg1)

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectStateChanged
func _gotk4_gstplay1_PlaySignalAdapter_ConnectStateChanged(arg0 C.gpointer, arg1 C.GstPlayState, arg2 C.guintptr) {
	var f func(object PlayState)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object PlayState))
	}

	var _object PlayState // out

	_object = PlayState(arg1)

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectURILoaded
func _gotk4_gstplay1_PlaySignalAdapter_ConnectURILoaded(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(object string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object string))
	}

	var _object string // out

	_object = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectVideoDimensionsChanged
func _gotk4_gstplay1_PlaySignalAdapter_ConnectVideoDimensionsChanged(arg0 C.gpointer, arg1 C.guint, arg2 C.guint, arg3 C.guintptr) {
	var f func(object, p0 uint)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object, p0 uint))
	}

	var _object uint // out
	var _p0 uint     // out

	_object = uint(arg1)
	_p0 = uint(arg2)

	f(_object, _p0)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectVolumeChanged
func _gotk4_gstplay1_PlaySignalAdapter_ConnectVolumeChanged(arg0 C.gpointer, arg1 C.gdouble, arg2 C.guintptr) {
	var f func(object float64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object float64))
	}

	var _object float64 // out

	_object = float64(arg1)

	f(_object)
}

//export _gotk4_gstplay1_PlaySignalAdapter_ConnectWarning
func _gotk4_gstplay1_PlaySignalAdapter_ConnectWarning(arg0 C.gpointer, arg1 *C.GError, arg2 *C.GstStructure, arg3 C.guintptr) {
	var f func(err error, details *gst.Structure)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(err error, details *gst.Structure))
	}

	var _err error              // out
	var _details *gst.Structure // out

	_err = gerror.Take(unsafe.Pointer(arg1))
	if arg2 != nil {
		_details = (*gst.Structure)(gextras.NewStructNative(unsafe.Pointer(arg2)))
		C.gst_mini_object_ref((*C.GstMiniObject)(unsafe.Pointer(arg2)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_details)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gst_mini_object_unref((*C.GstMiniObject)(intern.C))
			})
	}

	f(_err, _details)
}
