// Code generated by girgen. DO NOT EDIT.

package gstplayer

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/player/player.h>
import "C"

//export _gotk4_gstplayer1_Player_ConnectBuffering
func _gotk4_gstplayer1_Player_ConnectBuffering(arg0 C.gpointer, arg1 C.gint, arg2 C.guintptr) {
	var f func(object int)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object int))
	}

	var _object int // out

	_object = int(arg1)

	f(_object)
}

//export _gotk4_gstplayer1_Player_ConnectDurationChanged
func _gotk4_gstplayer1_Player_ConnectDurationChanged(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) {
	var f func(object uint64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object uint64))
	}

	var _object uint64 // out

	_object = uint64(arg1)

	f(_object)
}

//export _gotk4_gstplayer1_Player_ConnectEndOfStream
func _gotk4_gstplayer1_Player_ConnectEndOfStream(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gstplayer1_Player_ConnectError
func _gotk4_gstplayer1_Player_ConnectError(arg0 C.gpointer, arg1 *C.GError, arg2 C.guintptr) {
	var f func(object error)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object error))
	}

	var _object error // out

	_object = gerror.Take(unsafe.Pointer(arg1))

	f(_object)
}

//export _gotk4_gstplayer1_Player_ConnectMediaInfoUpdated
func _gotk4_gstplayer1_Player_ConnectMediaInfoUpdated(arg0 C.gpointer, arg1 *C.GstPlayerMediaInfo, arg2 C.guintptr) {
	var f func(object *PlayerMediaInfo)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object *PlayerMediaInfo))
	}

	var _object *PlayerMediaInfo // out

	_object = wrapPlayerMediaInfo(coreglib.Take(unsafe.Pointer(arg1)))

	f(_object)
}

//export _gotk4_gstplayer1_Player_ConnectMuteChanged
func _gotk4_gstplayer1_Player_ConnectMuteChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gstplayer1_Player_ConnectPositionUpdated
func _gotk4_gstplayer1_Player_ConnectPositionUpdated(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) {
	var f func(object uint64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object uint64))
	}

	var _object uint64 // out

	_object = uint64(arg1)

	f(_object)
}

//export _gotk4_gstplayer1_Player_ConnectSeekDone
func _gotk4_gstplayer1_Player_ConnectSeekDone(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) {
	var f func(object uint64)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object uint64))
	}

	var _object uint64 // out

	_object = uint64(arg1)

	f(_object)
}

//export _gotk4_gstplayer1_Player_ConnectStateChanged
func _gotk4_gstplayer1_Player_ConnectStateChanged(arg0 C.gpointer, arg1 C.GstPlayerState, arg2 C.guintptr) {
	var f func(object PlayerState)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object PlayerState))
	}

	var _object PlayerState // out

	_object = PlayerState(arg1)

	f(_object)
}

//export _gotk4_gstplayer1_Player_ConnectURILoaded
func _gotk4_gstplayer1_Player_ConnectURILoaded(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) {
	var f func(object string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object string))
	}

	var _object string // out

	_object = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	f(_object)
}

//export _gotk4_gstplayer1_Player_ConnectVideoDimensionsChanged
func _gotk4_gstplayer1_Player_ConnectVideoDimensionsChanged(arg0 C.gpointer, arg1 C.gint, arg2 C.gint, arg3 C.guintptr) {
	var f func(object, p0 int)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object, p0 int))
	}

	var _object int // out
	var _p0 int     // out

	_object = int(arg1)
	_p0 = int(arg2)

	f(_object, _p0)
}

//export _gotk4_gstplayer1_Player_ConnectVolumeChanged
func _gotk4_gstplayer1_Player_ConnectVolumeChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gstplayer1_Player_ConnectWarning
func _gotk4_gstplayer1_Player_ConnectWarning(arg0 C.gpointer, arg1 *C.GError, arg2 C.guintptr) {
	var f func(object error)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(object error))
	}

	var _object error // out

	_object = gerror.Take(unsafe.Pointer(arg1))

	f(_object)
}
