// Code generated by girgen. DO NOT EDIT.

package gstmpegts

import (
	"fmt"
	"runtime"
	_ "runtime/cgo"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
	"github.com/go-gst/go-gst/pkg/gst"
)

// #cgo pkg-config: gstreamer-mpegts-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/mpegts/mpegts.h>
import "C"

// GType values.
var (
	GTypeAtscEIT                             = coreglib.Type(C.gst_mpegts_atsc_eit_get_type())
	GTypeAtscEITEvent                        = coreglib.Type(C.gst_mpegts_atsc_eit_event_get_type())
	GTypeAtscETT                             = coreglib.Type(C.gst_mpegts_atsc_ett_get_type())
	GTypeAtscMGT                             = coreglib.Type(C.gst_mpegts_atsc_mgt_get_type())
	GTypeAtscMGTTable                        = coreglib.Type(C.gst_mpegts_atsc_mgt_table_get_type())
	GTypeAtscMultString                      = coreglib.Type(C.gst_mpegts_atsc_mult_string_get_type())
	GTypeAtscRRT                             = coreglib.Type(C.gst_mpegts_atsc_rrt_get_type())
	GTypeAtscRRTDimension                    = coreglib.Type(C.gst_mpegts_atsc_rrt_dimension_get_type())
	GTypeAtscRRTDimensionValue               = coreglib.Type(C.gst_mpegts_atsc_rrt_dimension_value_get_type())
	GTypeAtscSTT                             = coreglib.Type(C.gst_mpegts_atsc_stt_get_type())
	GTypeAtscStringSegment                   = coreglib.Type(C.gst_mpegts_atsc_string_segment_get_type())
	GTypeAtscVCT                             = coreglib.Type(C.gst_mpegts_atsc_vct_get_type())
	GTypeAtscVCTSource                       = coreglib.Type(C.gst_mpegts_atsc_vct_source_get_type())
	GTypeBAT                                 = coreglib.Type(C.gst_mpegts_bat_get_type())
	GTypeBATStream                           = coreglib.Type(C.gst_mpegts_bat_stream_get_type())
	GTypeCableDeliverySystemDescriptor       = coreglib.Type(C.gst_mpegts_dvb_cable_delivery_system_descriptor_get_type())
	GTypeComponentDescriptor                 = coreglib.Type(C.gst_mpegts_component_descriptor_get_type())
	GTypeContent                             = coreglib.Type(C.gst_mpegts_content_get_type())
	GTypeDVBLinkageDescriptor                = coreglib.Type(C.gst_mpegts_dvb_linkage_descriptor_get_type())
	GTypeDVBLinkageEvent                     = coreglib.Type(C.gst_mpegts_dvb_linkage_event_get_type())
	GTypeDVBLinkageExtendedEvent             = coreglib.Type(C.gst_mpegts_dvb_linkage_extended_event_get_type())
	GTypeDVBLinkageMobileHandOver            = coreglib.Type(C.gst_mpegts_dvb_linkage_mobile_hand_over_get_type())
	GTypeDVBParentalRatingItem               = coreglib.Type(C.gst_mpegts_dvb_parental_rating_item_get_type())
	GTypeDVBServiceListItem                  = coreglib.Type(C.gst_mpegts_dvb_service_list_item_get_type())
	GTypeDataBroadcastDescriptor             = coreglib.Type(C.gst_mpegts_dvb_data_broadcast_descriptor_get_type())
	GTypeDescriptor                          = coreglib.Type(C.gst_mpegts_descriptor_get_type())
	GTypeDvbMultilingualBouquetNameItem      = coreglib.Type(C.gst_mpegts_dvb_multilingual_bouquet_name_item_get_type())
	GTypeDvbMultilingualComponentItem        = coreglib.Type(C.gst_mpegts_dvb_multilingual_component_item_get_type())
	GTypeDvbMultilingualNetworkNameItem      = coreglib.Type(C.gst_mpegts_dvb_multilingual_network_name_item_get_type())
	GTypeDvbMultilingualServiceNameItem      = coreglib.Type(C.gst_mpegts_dvb_multilingual_service_name_item_get_type())
	GTypeEIT                                 = coreglib.Type(C.gst_mpegts_eit_get_type())
	GTypeEITEvent                            = coreglib.Type(C.gst_mpegts_eit_event_get_type())
	GTypeExtendedEventDescriptor             = coreglib.Type(C.gst_mpegts_extended_event_descriptor_get_type())
	GTypeExtendedEventItem                   = coreglib.Type(C.gst_mpegts_extended_event_item_get_type())
	GTypeISO639LanguageDescriptor            = coreglib.Type(C.gst_mpegts_iso_639_language_get_type())
	GTypeLogicalChannel                      = coreglib.Type(C.gst_mpegts_logical_channel_get_type())
	GTypeLogicalChannelDescriptor            = coreglib.Type(C.gst_mpegts_logical_channel_descriptor_get_type())
	GTypeMetadataDescriptor                  = coreglib.Type(C.gst_mpegts_metadata_descriptor_get_type())
	GTypeNIT                                 = coreglib.Type(C.gst_mpegts_nit_get_type())
	GTypeNITStream                           = coreglib.Type(C.gst_mpegts_nit_stream_get_type())
	GTypePMT                                 = coreglib.Type(C.gst_mpegts_pmt_get_type())
	GTypePMTStream                           = coreglib.Type(C.gst_mpegts_pmt_stream_get_type())
	GTypePatProgram                          = coreglib.Type(C.gst_mpegts_pat_program_get_type())
	GTypeSCTESIT                             = coreglib.Type(C.gst_mpegts_scte_sit_get_type())
	GTypeSCTESpliceComponent                 = coreglib.Type(C.gst_mpegts_scte_splice_component_get_type())
	GTypeSCTESpliceEvent                     = coreglib.Type(C.gst_mpegts_scte_splice_event_get_type())
	GTypeSDT                                 = coreglib.Type(C.gst_mpegts_sdt_get_type())
	GTypeSDTService                          = coreglib.Type(C.gst_mpegts_sdt_service_get_type())
	GTypeSIT                                 = coreglib.Type(C.gst_mpegts_sit_get_type())
	GTypeSITService                          = coreglib.Type(C.gst_mpegts_sit_service_get_type())
	GTypeSatelliteDeliverySystemDescriptor   = coreglib.Type(C.gst_mpegts_satellite_delivery_system_descriptor_get_type())
	GTypeSection                             = coreglib.Type(C.gst_mpegts_section_get_type())
	GTypeT2DeliverySystemCell                = coreglib.Type(C.gst_mpegts_t2_delivery_system_cell_get_type())
	GTypeT2DeliverySystemCellExtension       = coreglib.Type(C.gst_mpegts_t2_delivery_system_cell_extension_get_type())
	GTypeT2DeliverySystemDescriptor          = coreglib.Type(C.gst_mpegts_t2_delivery_system_descriptor_get_type())
	GTypeTOT                                 = coreglib.Type(C.gst_mpegts_tot_get_type())
	GTypeTerrestrialDeliverySystemDescriptor = coreglib.Type(C.gst_mpegts_terrestrial_delivery_system_descriptor_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAtscEIT, F: marshalAtscEIT},
		coreglib.TypeMarshaler{T: GTypeAtscEITEvent, F: marshalAtscEITEvent},
		coreglib.TypeMarshaler{T: GTypeAtscETT, F: marshalAtscETT},
		coreglib.TypeMarshaler{T: GTypeAtscMGT, F: marshalAtscMGT},
		coreglib.TypeMarshaler{T: GTypeAtscMGTTable, F: marshalAtscMGTTable},
		coreglib.TypeMarshaler{T: GTypeAtscMultString, F: marshalAtscMultString},
		coreglib.TypeMarshaler{T: GTypeAtscRRT, F: marshalAtscRRT},
		coreglib.TypeMarshaler{T: GTypeAtscRRTDimension, F: marshalAtscRRTDimension},
		coreglib.TypeMarshaler{T: GTypeAtscRRTDimensionValue, F: marshalAtscRRTDimensionValue},
		coreglib.TypeMarshaler{T: GTypeAtscSTT, F: marshalAtscSTT},
		coreglib.TypeMarshaler{T: GTypeAtscStringSegment, F: marshalAtscStringSegment},
		coreglib.TypeMarshaler{T: GTypeAtscVCT, F: marshalAtscVCT},
		coreglib.TypeMarshaler{T: GTypeAtscVCTSource, F: marshalAtscVCTSource},
		coreglib.TypeMarshaler{T: GTypeBAT, F: marshalBAT},
		coreglib.TypeMarshaler{T: GTypeBATStream, F: marshalBATStream},
		coreglib.TypeMarshaler{T: GTypeCableDeliverySystemDescriptor, F: marshalCableDeliverySystemDescriptor},
		coreglib.TypeMarshaler{T: GTypeComponentDescriptor, F: marshalComponentDescriptor},
		coreglib.TypeMarshaler{T: GTypeContent, F: marshalContent},
		coreglib.TypeMarshaler{T: GTypeDVBLinkageDescriptor, F: marshalDVBLinkageDescriptor},
		coreglib.TypeMarshaler{T: GTypeDVBLinkageEvent, F: marshalDVBLinkageEvent},
		coreglib.TypeMarshaler{T: GTypeDVBLinkageExtendedEvent, F: marshalDVBLinkageExtendedEvent},
		coreglib.TypeMarshaler{T: GTypeDVBLinkageMobileHandOver, F: marshalDVBLinkageMobileHandOver},
		coreglib.TypeMarshaler{T: GTypeDVBParentalRatingItem, F: marshalDVBParentalRatingItem},
		coreglib.TypeMarshaler{T: GTypeDVBServiceListItem, F: marshalDVBServiceListItem},
		coreglib.TypeMarshaler{T: GTypeDataBroadcastDescriptor, F: marshalDataBroadcastDescriptor},
		coreglib.TypeMarshaler{T: GTypeDescriptor, F: marshalDescriptor},
		coreglib.TypeMarshaler{T: GTypeDvbMultilingualBouquetNameItem, F: marshalDvbMultilingualBouquetNameItem},
		coreglib.TypeMarshaler{T: GTypeDvbMultilingualComponentItem, F: marshalDvbMultilingualComponentItem},
		coreglib.TypeMarshaler{T: GTypeDvbMultilingualNetworkNameItem, F: marshalDvbMultilingualNetworkNameItem},
		coreglib.TypeMarshaler{T: GTypeDvbMultilingualServiceNameItem, F: marshalDvbMultilingualServiceNameItem},
		coreglib.TypeMarshaler{T: GTypeEIT, F: marshalEIT},
		coreglib.TypeMarshaler{T: GTypeEITEvent, F: marshalEITEvent},
		coreglib.TypeMarshaler{T: GTypeExtendedEventDescriptor, F: marshalExtendedEventDescriptor},
		coreglib.TypeMarshaler{T: GTypeExtendedEventItem, F: marshalExtendedEventItem},
		coreglib.TypeMarshaler{T: GTypeISO639LanguageDescriptor, F: marshalISO639LanguageDescriptor},
		coreglib.TypeMarshaler{T: GTypeLogicalChannel, F: marshalLogicalChannel},
		coreglib.TypeMarshaler{T: GTypeLogicalChannelDescriptor, F: marshalLogicalChannelDescriptor},
		coreglib.TypeMarshaler{T: GTypeMetadataDescriptor, F: marshalMetadataDescriptor},
		coreglib.TypeMarshaler{T: GTypeNIT, F: marshalNIT},
		coreglib.TypeMarshaler{T: GTypeNITStream, F: marshalNITStream},
		coreglib.TypeMarshaler{T: GTypePMT, F: marshalPMT},
		coreglib.TypeMarshaler{T: GTypePMTStream, F: marshalPMTStream},
		coreglib.TypeMarshaler{T: GTypePatProgram, F: marshalPatProgram},
		coreglib.TypeMarshaler{T: GTypeSCTESIT, F: marshalSCTESIT},
		coreglib.TypeMarshaler{T: GTypeSCTESpliceComponent, F: marshalSCTESpliceComponent},
		coreglib.TypeMarshaler{T: GTypeSCTESpliceEvent, F: marshalSCTESpliceEvent},
		coreglib.TypeMarshaler{T: GTypeSDT, F: marshalSDT},
		coreglib.TypeMarshaler{T: GTypeSDTService, F: marshalSDTService},
		coreglib.TypeMarshaler{T: GTypeSIT, F: marshalSIT},
		coreglib.TypeMarshaler{T: GTypeSITService, F: marshalSITService},
		coreglib.TypeMarshaler{T: GTypeSatelliteDeliverySystemDescriptor, F: marshalSatelliteDeliverySystemDescriptor},
		coreglib.TypeMarshaler{T: GTypeSection, F: marshalSection},
		coreglib.TypeMarshaler{T: GTypeT2DeliverySystemCell, F: marshalT2DeliverySystemCell},
		coreglib.TypeMarshaler{T: GTypeT2DeliverySystemCellExtension, F: marshalT2DeliverySystemCellExtension},
		coreglib.TypeMarshaler{T: GTypeT2DeliverySystemDescriptor, F: marshalT2DeliverySystemDescriptor},
		coreglib.TypeMarshaler{T: GTypeTOT, F: marshalTOT},
		coreglib.TypeMarshaler{T: GTypeTerrestrialDeliverySystemDescriptor, F: marshalTerrestrialDeliverySystemDescriptor},
	})
}

// ATSCDescriptorType: these values correspond to the registered descriptor type
// from the various ATSC specifications.
//
// Consult the relevant specifications for more details.
type ATSCDescriptorType C.gint

const (
	MtsDescAtscStuffing                   ATSCDescriptorType = 128
	MtsDescAtscAc3                        ATSCDescriptorType = 129
	MtsDescAtscCaptionService             ATSCDescriptorType = 134
	MtsDescAtscContentAdvisory            ATSCDescriptorType = 135
	MtsDescAtscExtendedChannelName        ATSCDescriptorType = 160
	MtsDescAtscServiceLocation            ATSCDescriptorType = 161
	MtsDescAtscTimeShiftedService         ATSCDescriptorType = 162
	MtsDescAtscComponentName              ATSCDescriptorType = 163
	MtsDescAtscDccDepartingRequest        ATSCDescriptorType = 168
	MtsDescAtscDccArrivingRequest         ATSCDescriptorType = 169
	MtsDescAtscRedistributionControl      ATSCDescriptorType = 170
	MtsDescAtscGenre                      ATSCDescriptorType = 171
	MtsDescAtscPrivateInformation         ATSCDescriptorType = 173
	MtsDescAtscEac3                       ATSCDescriptorType = 204
	MtsDescAtscEnhancedSignaling          ATSCDescriptorType = 178
	MtsDescAtscDataService                ATSCDescriptorType = 164
	MtsDescAtscPidCount                   ATSCDescriptorType = 165
	MtsDescAtscDownloadDescriptor         ATSCDescriptorType = 166
	MtsDescAtscMultiprotocolEncapsulation ATSCDescriptorType = 167
	MtsDescAtscModuleLink                 ATSCDescriptorType = 180
	MtsDescAtscCrc32                      ATSCDescriptorType = 181
	MtsDescAtscGroupLink                  ATSCDescriptorType = 184
)

// String returns the name in string for ATSCDescriptorType.
func (a ATSCDescriptorType) String() string {
	switch a {
	case MtsDescAtscStuffing:
		return "Stuffing"
	case MtsDescAtscAc3:
		return "Ac3"
	case MtsDescAtscCaptionService:
		return "CaptionService"
	case MtsDescAtscContentAdvisory:
		return "ContentAdvisory"
	case MtsDescAtscExtendedChannelName:
		return "ExtendedChannelName"
	case MtsDescAtscServiceLocation:
		return "ServiceLocation"
	case MtsDescAtscTimeShiftedService:
		return "TimeShiftedService"
	case MtsDescAtscComponentName:
		return "ComponentName"
	case MtsDescAtscDccDepartingRequest:
		return "DccDepartingRequest"
	case MtsDescAtscDccArrivingRequest:
		return "DccArrivingRequest"
	case MtsDescAtscRedistributionControl:
		return "RedistributionControl"
	case MtsDescAtscGenre:
		return "Genre"
	case MtsDescAtscPrivateInformation:
		return "PrivateInformation"
	case MtsDescAtscEac3:
		return "Eac3"
	case MtsDescAtscEnhancedSignaling:
		return "EnhancedSignaling"
	case MtsDescAtscDataService:
		return "DataService"
	case MtsDescAtscPidCount:
		return "PidCount"
	case MtsDescAtscDownloadDescriptor:
		return "DownloadDescriptor"
	case MtsDescAtscMultiprotocolEncapsulation:
		return "MultiprotocolEncapsulation"
	case MtsDescAtscModuleLink:
		return "ModuleLink"
	case MtsDescAtscCrc32:
		return "Crc32"
	case MtsDescAtscGroupLink:
		return "GroupLink"
	default:
		return fmt.Sprintf("ATSCDescriptorType(%d)", a)
	}
}

// ATSCStreamType: type of mpeg-ts streams for ATSC, as defined by the
// ATSC Code Points Registry. For convenience, some stream types from
// GstMpegtsScteStreamType are also included.
type ATSCStreamType C.gint

const (
	// MpegtsStreamTypeAtscDciiVideo: digiCipher II video | Identical to ITU-T
	// Rec. H.262 | ISO/IEC 13818-2 Video.
	MpegtsStreamTypeAtscDciiVideo ATSCStreamType = 128
	// MpegtsStreamTypeAtscAudioAc3: ATSC A/53 Audio | AC-3.
	MpegtsStreamTypeAtscAudioAc3 ATSCStreamType = 129
	// MpegtsStreamTypeAtscSubtitling: SCTE-27 Subtitling.
	MpegtsStreamTypeAtscSubtitling ATSCStreamType = 130
	// MpegtsStreamTypeAtscIsochData: SCTE-19 Isochronous data | Reserved.
	MpegtsStreamTypeAtscIsochData ATSCStreamType = 131
	// MpegtsStreamTypeAtscSit: SCTE-35 Splice Information Table.
	MpegtsStreamTypeAtscSit ATSCStreamType = 134
	// MpegtsStreamTypeAtscAudioEac3: e-AC-3 A/52:2018.
	MpegtsStreamTypeAtscAudioEac3 ATSCStreamType = 135
	// MpegtsStreamTypeAtscAudioDtsHd: e-AC-3 A/107 (ATSC 2.0).
	MpegtsStreamTypeAtscAudioDtsHd ATSCStreamType = 136
)

// String returns the name in string for ATSCStreamType.
func (a ATSCStreamType) String() string {
	switch a {
	case MpegtsStreamTypeAtscDciiVideo:
		return "DciiVideo"
	case MpegtsStreamTypeAtscAudioAc3:
		return "AudioAc3"
	case MpegtsStreamTypeAtscSubtitling:
		return "Subtitling"
	case MpegtsStreamTypeAtscIsochData:
		return "IsochData"
	case MpegtsStreamTypeAtscSit:
		return "Sit"
	case MpegtsStreamTypeAtscAudioEac3:
		return "AudioEac3"
	case MpegtsStreamTypeAtscAudioDtsHd:
		return "AudioDtsHd"
	default:
		return fmt.Sprintf("ATSCStreamType(%d)", a)
	}
}

type AtscMGTTableType C.gint

const (
	MpegtsAtscMgtTableTypeEit0   AtscMGTTableType = 256
	MpegtsAtscMgtTableTypeEit127 AtscMGTTableType = 383
	MpegtsAtscMgtTableTypeEtt0   AtscMGTTableType = 512
	MpegtsAtscMgtTableTypeEtt127 AtscMGTTableType = 639
)

// String returns the name in string for AtscMGTTableType.
func (a AtscMGTTableType) String() string {
	switch a {
	case MpegtsAtscMgtTableTypeEit0:
		return "Eit0"
	case MpegtsAtscMgtTableTypeEit127:
		return "Eit127"
	case MpegtsAtscMgtTableTypeEtt0:
		return "Ett0"
	case MpegtsAtscMgtTableTypeEtt127:
		return "Ett127"
	default:
		return fmt.Sprintf("AtscMGTTableType(%d)", a)
	}
}

type CableOuterFECScheme C.gint

const (
	MpegtsCableOuterFecUndefined CableOuterFECScheme = iota
	MpegtsCableOuterFecNone
	MpegtsCableOuterFecRs204188
)

// String returns the name in string for CableOuterFECScheme.
func (c CableOuterFECScheme) String() string {
	switch c {
	case MpegtsCableOuterFecUndefined:
		return "Undefined"
	case MpegtsCableOuterFecNone:
		return "None"
	case MpegtsCableOuterFecRs204188:
		return "Rs204188"
	default:
		return fmt.Sprintf("CableOuterFECScheme(%d)", c)
	}
}

type ComponentStreamContent C.gint

const (
	MpegtsStreamContentMpeg2Video         ComponentStreamContent = 1
	MpegtsStreamContentMpeg1Layer2Audio   ComponentStreamContent = 2
	MpegtsStreamContentTeletextOrSubtitle ComponentStreamContent = 3
	MpegtsStreamContentAc3                ComponentStreamContent = 4
	MpegtsStreamContentAvc                ComponentStreamContent = 5
	MpegtsStreamContentAac                ComponentStreamContent = 6
	MpegtsStreamContentDts                ComponentStreamContent = 7
	MpegtsStreamContentSrmCpcm            ComponentStreamContent = 8
)

// String returns the name in string for ComponentStreamContent.
func (c ComponentStreamContent) String() string {
	switch c {
	case MpegtsStreamContentMpeg2Video:
		return "Mpeg2Video"
	case MpegtsStreamContentMpeg1Layer2Audio:
		return "Mpeg1Layer2Audio"
	case MpegtsStreamContentTeletextOrSubtitle:
		return "TeletextOrSubtitle"
	case MpegtsStreamContentAc3:
		return "Ac3"
	case MpegtsStreamContentAvc:
		return "Avc"
	case MpegtsStreamContentAac:
		return "Aac"
	case MpegtsStreamContentDts:
		return "Dts"
	case MpegtsStreamContentSrmCpcm:
		return "SrmCpcm"
	default:
		return fmt.Sprintf("ComponentStreamContent(%d)", c)
	}
}

type ContentNibbleHi C.gint

const (
	MpegtsContentMovieDrama               ContentNibbleHi = 1
	MpegtsContentNewsCurrentAffairs       ContentNibbleHi = 2
	MpegtsContentShowGameShow             ContentNibbleHi = 3
	MpegtsContentSports                   ContentNibbleHi = 4
	MpegtsContentChildrenYouthProgram     ContentNibbleHi = 5
	MpegtsContentMusicBalletDance         ContentNibbleHi = 6
	MpegtsContentArtsCulture              ContentNibbleHi = 7
	MpegtsContentSocialPoliticalEconomics ContentNibbleHi = 8
	MpegtsContentEducationScienceFactual  ContentNibbleHi = 9
	MpegtsContentLeisureHobbies           ContentNibbleHi = 10
	MpegtsContentSpecialCharacteristics   ContentNibbleHi = 11
)

// String returns the name in string for ContentNibbleHi.
func (c ContentNibbleHi) String() string {
	switch c {
	case MpegtsContentMovieDrama:
		return "MovieDrama"
	case MpegtsContentNewsCurrentAffairs:
		return "NewsCurrentAffairs"
	case MpegtsContentShowGameShow:
		return "ShowGameShow"
	case MpegtsContentSports:
		return "Sports"
	case MpegtsContentChildrenYouthProgram:
		return "ChildrenYouthProgram"
	case MpegtsContentMusicBalletDance:
		return "MusicBalletDance"
	case MpegtsContentArtsCulture:
		return "ArtsCulture"
	case MpegtsContentSocialPoliticalEconomics:
		return "SocialPoliticalEconomics"
	case MpegtsContentEducationScienceFactual:
		return "EducationScienceFactual"
	case MpegtsContentLeisureHobbies:
		return "LeisureHobbies"
	case MpegtsContentSpecialCharacteristics:
		return "SpecialCharacteristics"
	default:
		return fmt.Sprintf("ContentNibbleHi(%d)", c)
	}
}

type DVBCodeRate C.gint

const (
	MpegtsFecNone DVBCodeRate = iota
	MpegtsFec12
	MpegtsFec23
	MpegtsFec34
	MpegtsFec45
	MpegtsFec56
	MpegtsFec67
	MpegtsFec78
	MpegtsFec89
	MpegtsFecAuto
	MpegtsFec35
	MpegtsFec910
	MpegtsFec25
)

// String returns the name in string for DVBCodeRate.
func (d DVBCodeRate) String() string {
	switch d {
	case MpegtsFecNone:
		return "None"
	case MpegtsFec12:
		return "12"
	case MpegtsFec23:
		return "23"
	case MpegtsFec34:
		return "34"
	case MpegtsFec45:
		return "45"
	case MpegtsFec56:
		return "56"
	case MpegtsFec67:
		return "67"
	case MpegtsFec78:
		return "78"
	case MpegtsFec89:
		return "89"
	case MpegtsFecAuto:
		return "Auto"
	case MpegtsFec35:
		return "35"
	case MpegtsFec910:
		return "910"
	case MpegtsFec25:
		return "25"
	default:
		return fmt.Sprintf("DVBCodeRate(%d)", d)
	}
}

// DVBDescriptorType: type of MpegtsDescriptor
//
// These values correspond to the registered descriptor type from the various
// DVB specifications.
//
// Consult the relevant specifications for more details.
type DVBDescriptorType C.gint

const (
	MtsDescDvbNetworkName               DVBDescriptorType = 64
	MtsDescDvbServiceList               DVBDescriptorType = 65
	MtsDescDvbStuffing                  DVBDescriptorType = 66
	MtsDescDvbSatelliteDeliverySystem   DVBDescriptorType = 67
	MtsDescDvbCableDeliverySystem       DVBDescriptorType = 68
	MtsDescDvbVbiData                   DVBDescriptorType = 69
	MtsDescDvbVbiTeletext               DVBDescriptorType = 70
	MtsDescDvbBouquetName               DVBDescriptorType = 71
	MtsDescDvbService                   DVBDescriptorType = 72
	MtsDescDvbCountryAvailability       DVBDescriptorType = 73
	MtsDescDvbLinkage                   DVBDescriptorType = 74
	MtsDescDvbNvodReference             DVBDescriptorType = 75
	MtsDescDvbTimeShiftedService        DVBDescriptorType = 76
	MtsDescDvbShortEvent                DVBDescriptorType = 77
	MtsDescDvbExtendedEvent             DVBDescriptorType = 78
	MtsDescDvbTimeShiftedEvent          DVBDescriptorType = 79
	MtsDescDvbComponent                 DVBDescriptorType = 80
	MtsDescDvbMosaic                    DVBDescriptorType = 81
	MtsDescDvbStreamIdentifier          DVBDescriptorType = 82
	MtsDescDvbCaIdentifier              DVBDescriptorType = 83
	MtsDescDvbContent                   DVBDescriptorType = 84
	MtsDescDvbParentalRating            DVBDescriptorType = 85
	MtsDescDvbTeletext                  DVBDescriptorType = 86
	MtsDescDvbTelephone                 DVBDescriptorType = 87
	MtsDescDvbLocalTimeOffset           DVBDescriptorType = 88
	MtsDescDvbSubtitling                DVBDescriptorType = 89
	MtsDescDvbTerrestrialDeliverySystem DVBDescriptorType = 90
	MtsDescDvbMultilingualNetworkName   DVBDescriptorType = 91
	MtsDescDvbMultilingualBouquetName   DVBDescriptorType = 92
	MtsDescDvbMultilingualServiceName   DVBDescriptorType = 93
	MtsDescDvbMultilingualComponent     DVBDescriptorType = 94
	MtsDescDvbPrivateDataSpecifier      DVBDescriptorType = 95
	MtsDescDvbServiceMove               DVBDescriptorType = 96
	MtsDescDvbShortSmoothingBuffer      DVBDescriptorType = 97
	MtsDescDvbFrequencyList             DVBDescriptorType = 98
	// MtsDescDvbPartialTransportStream: partial Transport Stream descriptor.
	// Only present in SIT Sections.
	//
	// See also: GST_MPEGTS_SECTION_SIT, GstMpegtsSIT.
	MtsDescDvbPartialTransportStream    DVBDescriptorType = 99
	MtsDescDvbDataBroadcast             DVBDescriptorType = 100
	MtsDescDvbScrambling                DVBDescriptorType = 101
	MtsDescDvbDataBroadcastID           DVBDescriptorType = 102
	MtsDescDvbTransportStream           DVBDescriptorType = 103
	MtsDescDvbDsng                      DVBDescriptorType = 104
	MtsDescDvbPdc                       DVBDescriptorType = 105
	MtsDescDvbAc3                       DVBDescriptorType = 106
	MtsDescDvbAncillaryData             DVBDescriptorType = 107
	MtsDescDvbCellList                  DVBDescriptorType = 108
	MtsDescDvbCellFrequencyLink         DVBDescriptorType = 109
	MtsDescDvbAnnouncementSupport       DVBDescriptorType = 110
	MtsDescDvbApplicationSignalling     DVBDescriptorType = 111
	MtsDescDvbAdaptationFieldData       DVBDescriptorType = 112
	MtsDescDvbServiceIdentifier         DVBDescriptorType = 113
	MtsDescDvbServiceAvailability       DVBDescriptorType = 114
	MtsDescDvbDefaultAuthority          DVBDescriptorType = 115
	MtsDescDvbRelatedContent            DVBDescriptorType = 116
	MtsDescDvbTvaID                     DVBDescriptorType = 117
	MtsDescDvbContentIdentifier         DVBDescriptorType = 118
	MtsDescDvbTimesliceFecIdentifier    DVBDescriptorType = 119
	MtsDescDvbEcmRepetitionRate         DVBDescriptorType = 120
	MtsDescDvbS2SatelliteDeliverySystem DVBDescriptorType = 121
	MtsDescDvbEnhancedAc3               DVBDescriptorType = 122
	MtsDescDvbDts                       DVBDescriptorType = 123
	MtsDescDvbAac                       DVBDescriptorType = 124
	MtsDescDvbXaitLocation              DVBDescriptorType = 125
	MtsDescDvbFtaContentManagement      DVBDescriptorType = 126
	MtsDescDvbExtension                 DVBDescriptorType = 127
)

// String returns the name in string for DVBDescriptorType.
func (d DVBDescriptorType) String() string {
	switch d {
	case MtsDescDvbNetworkName:
		return "NetworkName"
	case MtsDescDvbServiceList:
		return "ServiceList"
	case MtsDescDvbStuffing:
		return "Stuffing"
	case MtsDescDvbSatelliteDeliverySystem:
		return "SatelliteDeliverySystem"
	case MtsDescDvbCableDeliverySystem:
		return "CableDeliverySystem"
	case MtsDescDvbVbiData:
		return "VbiData"
	case MtsDescDvbVbiTeletext:
		return "VbiTeletext"
	case MtsDescDvbBouquetName:
		return "BouquetName"
	case MtsDescDvbService:
		return "Service"
	case MtsDescDvbCountryAvailability:
		return "CountryAvailability"
	case MtsDescDvbLinkage:
		return "Linkage"
	case MtsDescDvbNvodReference:
		return "NvodReference"
	case MtsDescDvbTimeShiftedService:
		return "TimeShiftedService"
	case MtsDescDvbShortEvent:
		return "ShortEvent"
	case MtsDescDvbExtendedEvent:
		return "ExtendedEvent"
	case MtsDescDvbTimeShiftedEvent:
		return "TimeShiftedEvent"
	case MtsDescDvbComponent:
		return "Component"
	case MtsDescDvbMosaic:
		return "Mosaic"
	case MtsDescDvbStreamIdentifier:
		return "StreamIdentifier"
	case MtsDescDvbCaIdentifier:
		return "CaIdentifier"
	case MtsDescDvbContent:
		return "Content"
	case MtsDescDvbParentalRating:
		return "ParentalRating"
	case MtsDescDvbTeletext:
		return "Teletext"
	case MtsDescDvbTelephone:
		return "Telephone"
	case MtsDescDvbLocalTimeOffset:
		return "LocalTimeOffset"
	case MtsDescDvbSubtitling:
		return "Subtitling"
	case MtsDescDvbTerrestrialDeliverySystem:
		return "TerrestrialDeliverySystem"
	case MtsDescDvbMultilingualNetworkName:
		return "MultilingualNetworkName"
	case MtsDescDvbMultilingualBouquetName:
		return "MultilingualBouquetName"
	case MtsDescDvbMultilingualServiceName:
		return "MultilingualServiceName"
	case MtsDescDvbMultilingualComponent:
		return "MultilingualComponent"
	case MtsDescDvbPrivateDataSpecifier:
		return "PrivateDataSpecifier"
	case MtsDescDvbServiceMove:
		return "ServiceMove"
	case MtsDescDvbShortSmoothingBuffer:
		return "ShortSmoothingBuffer"
	case MtsDescDvbFrequencyList:
		return "FrequencyList"
	case MtsDescDvbPartialTransportStream:
		return "PartialTransportStream"
	case MtsDescDvbDataBroadcast:
		return "DataBroadcast"
	case MtsDescDvbScrambling:
		return "Scrambling"
	case MtsDescDvbDataBroadcastID:
		return "DataBroadcastID"
	case MtsDescDvbTransportStream:
		return "TransportStream"
	case MtsDescDvbDsng:
		return "Dsng"
	case MtsDescDvbPdc:
		return "Pdc"
	case MtsDescDvbAc3:
		return "Ac3"
	case MtsDescDvbAncillaryData:
		return "AncillaryData"
	case MtsDescDvbCellList:
		return "CellList"
	case MtsDescDvbCellFrequencyLink:
		return "CellFrequencyLink"
	case MtsDescDvbAnnouncementSupport:
		return "AnnouncementSupport"
	case MtsDescDvbApplicationSignalling:
		return "ApplicationSignalling"
	case MtsDescDvbAdaptationFieldData:
		return "AdaptationFieldData"
	case MtsDescDvbServiceIdentifier:
		return "ServiceIdentifier"
	case MtsDescDvbServiceAvailability:
		return "ServiceAvailability"
	case MtsDescDvbDefaultAuthority:
		return "DefaultAuthority"
	case MtsDescDvbRelatedContent:
		return "RelatedContent"
	case MtsDescDvbTvaID:
		return "TvaID"
	case MtsDescDvbContentIdentifier:
		return "ContentIdentifier"
	case MtsDescDvbTimesliceFecIdentifier:
		return "TimesliceFecIdentifier"
	case MtsDescDvbEcmRepetitionRate:
		return "EcmRepetitionRate"
	case MtsDescDvbS2SatelliteDeliverySystem:
		return "S2SatelliteDeliverySystem"
	case MtsDescDvbEnhancedAc3:
		return "EnhancedAc3"
	case MtsDescDvbDts:
		return "Dts"
	case MtsDescDvbAac:
		return "Aac"
	case MtsDescDvbXaitLocation:
		return "XaitLocation"
	case MtsDescDvbFtaContentManagement:
		return "FtaContentManagement"
	case MtsDescDvbExtension:
		return "Extension"
	default:
		return fmt.Sprintf("DVBDescriptorType(%d)", d)
	}
}

// DVBExtendedDescriptorType: type of MpegtsDescriptor
//
// These values correspond to the registered extended descriptor type from the
// various DVB specifications.
//
// Consult the relevant specifications for more details.
type DVBExtendedDescriptorType C.gint

const (
	MtsDescExtDvbImageIcon              DVBExtendedDescriptorType = 0
	MtsDescExtDvbCpcmDeliverySignalling DVBExtendedDescriptorType = 1
	MtsDescExtDvbCp                     DVBExtendedDescriptorType = 2
	MtsDescExtDvbCpIdentifier           DVBExtendedDescriptorType = 3
	MtsDescExtDvbT2DeliverySystem       DVBExtendedDescriptorType = 4
	MtsDescExtDvbShDeliverySystem       DVBExtendedDescriptorType = 5
	MtsDescExtDvbSupplementaryAudio     DVBExtendedDescriptorType = 6
	MtsDescExtDvbNetworkChangeNotify    DVBExtendedDescriptorType = 7
	MtsDescExtDvbMessage                DVBExtendedDescriptorType = 8
	MtsDescExtDvbTargetRegion           DVBExtendedDescriptorType = 9
	MtsDescExtDvbTargetRegionName       DVBExtendedDescriptorType = 10
	MtsDescExtDvbServiceRelocated       DVBExtendedDescriptorType = 11
	MtsDescExtDvbXaitPid                DVBExtendedDescriptorType = 12
	MtsDescExtDvbC2DeliverySystem       DVBExtendedDescriptorType = 13
	MtsDescExtDvbDtsHdAudioStream       DVBExtendedDescriptorType = 14
	MtsDescExtDvbDtsNeutral             DVBExtendedDescriptorType = 15
	MtsDescExtDvbVideoDepthRange        DVBExtendedDescriptorType = 16
	MtsDescExtDvbT2Mi                   DVBExtendedDescriptorType = 17
	MtsDescExtDvbURILinkage             DVBExtendedDescriptorType = 19
	MtsDescExtDvbAc4                    DVBExtendedDescriptorType = 21
	// MtsDescExtDvbAudioPreselection: provide all avaliable audio programme for
	// user selection.
	MtsDescExtDvbAudioPreselection DVBExtendedDescriptorType = 25
)

// String returns the name in string for DVBExtendedDescriptorType.
func (d DVBExtendedDescriptorType) String() string {
	switch d {
	case MtsDescExtDvbImageIcon:
		return "ImageIcon"
	case MtsDescExtDvbCpcmDeliverySignalling:
		return "CpcmDeliverySignalling"
	case MtsDescExtDvbCp:
		return "Cp"
	case MtsDescExtDvbCpIdentifier:
		return "CpIdentifier"
	case MtsDescExtDvbT2DeliverySystem:
		return "T2DeliverySystem"
	case MtsDescExtDvbShDeliverySystem:
		return "ShDeliverySystem"
	case MtsDescExtDvbSupplementaryAudio:
		return "SupplementaryAudio"
	case MtsDescExtDvbNetworkChangeNotify:
		return "NetworkChangeNotify"
	case MtsDescExtDvbMessage:
		return "Message"
	case MtsDescExtDvbTargetRegion:
		return "TargetRegion"
	case MtsDescExtDvbTargetRegionName:
		return "TargetRegionName"
	case MtsDescExtDvbServiceRelocated:
		return "ServiceRelocated"
	case MtsDescExtDvbXaitPid:
		return "XaitPid"
	case MtsDescExtDvbC2DeliverySystem:
		return "C2DeliverySystem"
	case MtsDescExtDvbDtsHdAudioStream:
		return "DtsHdAudioStream"
	case MtsDescExtDvbDtsNeutral:
		return "DtsNeutral"
	case MtsDescExtDvbVideoDepthRange:
		return "VideoDepthRange"
	case MtsDescExtDvbT2Mi:
		return "T2Mi"
	case MtsDescExtDvbURILinkage:
		return "URILinkage"
	case MtsDescExtDvbAc4:
		return "Ac4"
	case MtsDescExtDvbAudioPreselection:
		return "AudioPreselection"
	default:
		return fmt.Sprintf("DVBExtendedDescriptorType(%d)", d)
	}
}

type DVBLinkageHandOverType C.gint

const (
	MpegtsDvbLinkageHandOverReserved DVBLinkageHandOverType = iota
	MpegtsDvbLinkageHandOverIdentical
	MpegtsDvbLinkageHandOverLocalVariation
	MpegtsDvbLinkageHandOverAssociated
)

// String returns the name in string for DVBLinkageHandOverType.
func (d DVBLinkageHandOverType) String() string {
	switch d {
	case MpegtsDvbLinkageHandOverReserved:
		return "Reserved"
	case MpegtsDvbLinkageHandOverIdentical:
		return "Identical"
	case MpegtsDvbLinkageHandOverLocalVariation:
		return "LocalVariation"
	case MpegtsDvbLinkageHandOverAssociated:
		return "Associated"
	default:
		return fmt.Sprintf("DVBLinkageHandOverType(%d)", d)
	}
}

// DVBLinkageType: linkage Type (EN 300 468 v.1.13.1).
type DVBLinkageType C.gint

const (
	MpegtsDvbLinkageReserved00 DVBLinkageType = iota
	MpegtsDvbLinkageInformation
	MpegtsDvbLinkageEpg
	MpegtsDvbLinkageCaReplacement
	MpegtsDvbLinkageTsContainingCompleteSi
	MpegtsDvbLinkageServiceReplacement
	MpegtsDvbLinkageDataBroadcast
	MpegtsDvbLinkageRcsMap
	MpegtsDvbLinkageMobileHandOver
	MpegtsDvbLinkageSystemSoftwareUpdate
	MpegtsDvbLinkageTsContainingSsu
	MpegtsDvbLinkageIPMacNotification
	MpegtsDvbLinkageTsContainingInt
	MpegtsDvbLinkageEvent
	MpegtsDvbLinkageExtendedEvent
)

// String returns the name in string for DVBLinkageType.
func (d DVBLinkageType) String() string {
	switch d {
	case MpegtsDvbLinkageReserved00:
		return "Reserved00"
	case MpegtsDvbLinkageInformation:
		return "Information"
	case MpegtsDvbLinkageEpg:
		return "Epg"
	case MpegtsDvbLinkageCaReplacement:
		return "CaReplacement"
	case MpegtsDvbLinkageTsContainingCompleteSi:
		return "TsContainingCompleteSi"
	case MpegtsDvbLinkageServiceReplacement:
		return "ServiceReplacement"
	case MpegtsDvbLinkageDataBroadcast:
		return "DataBroadcast"
	case MpegtsDvbLinkageRcsMap:
		return "RcsMap"
	case MpegtsDvbLinkageMobileHandOver:
		return "MobileHandOver"
	case MpegtsDvbLinkageSystemSoftwareUpdate:
		return "SystemSoftwareUpdate"
	case MpegtsDvbLinkageTsContainingSsu:
		return "TsContainingSsu"
	case MpegtsDvbLinkageIPMacNotification:
		return "IPMacNotification"
	case MpegtsDvbLinkageTsContainingInt:
		return "TsContainingInt"
	case MpegtsDvbLinkageEvent:
		return "Event"
	case MpegtsDvbLinkageExtendedEvent:
		return "ExtendedEvent"
	default:
		return fmt.Sprintf("DVBLinkageType(%d)", d)
	}
}

type DVBScramblingModeType C.gint

const (
	MpegtsDvbScramblingModeReserved            DVBScramblingModeType = 0
	MpegtsDvbScramblingModeCsa1                DVBScramblingModeType = 1
	MpegtsDvbScramblingModeCsa2                DVBScramblingModeType = 2
	MpegtsDvbScramblingModeCsa3Standard        DVBScramblingModeType = 3
	MpegtsDvbScramblingModeCsa3MinimalEnhanced DVBScramblingModeType = 4
	MpegtsDvbScramblingModeCsa3FullEnhanced    DVBScramblingModeType = 5
	MpegtsDvbScramblingModeCissa               DVBScramblingModeType = 16
	MpegtsDvbScramblingModeAtis0               DVBScramblingModeType = 112
	MpegtsDvbScramblingModeAtisF               DVBScramblingModeType = 127
)

// String returns the name in string for DVBScramblingModeType.
func (d DVBScramblingModeType) String() string {
	switch d {
	case MpegtsDvbScramblingModeReserved:
		return "Reserved"
	case MpegtsDvbScramblingModeCsa1:
		return "Csa1"
	case MpegtsDvbScramblingModeCsa2:
		return "Csa2"
	case MpegtsDvbScramblingModeCsa3Standard:
		return "Csa3Standard"
	case MpegtsDvbScramblingModeCsa3MinimalEnhanced:
		return "Csa3MinimalEnhanced"
	case MpegtsDvbScramblingModeCsa3FullEnhanced:
		return "Csa3FullEnhanced"
	case MpegtsDvbScramblingModeCissa:
		return "Cissa"
	case MpegtsDvbScramblingModeAtis0:
		return "Atis0"
	case MpegtsDvbScramblingModeAtisF:
		return "AtisF"
	default:
		return fmt.Sprintf("DVBScramblingModeType(%d)", d)
	}
}

// DVBServiceType: type of service of a channel.
//
// As specified in Table 87 of ETSI EN 300 468 v1.13.1.
type DVBServiceType C.gint

const (
	DvbServiceReserved00                             DVBServiceType = 0
	DvbServiceDigitalTelevision                      DVBServiceType = 1
	DvbServiceDigitalRadioSound                      DVBServiceType = 2
	DvbServiceTeletext                               DVBServiceType = 3
	DvbServiceNvodReference                          DVBServiceType = 4
	DvbServiceNvodTimeShifted                        DVBServiceType = 5
	DvbServiceMosaic                                 DVBServiceType = 6
	DvbServiceFmRadio                                DVBServiceType = 7
	DvbServiceDvbSrm                                 DVBServiceType = 8
	DvbServiceReserved09                             DVBServiceType = 9
	DvbServiceAdvancedCodecDigitalRadioSound         DVBServiceType = 10
	DvbServiceAdvancedCodecMosaic                    DVBServiceType = 11
	DvbServiceDataBroadcast                          DVBServiceType = 12
	DvbServiceReserved0DCommonInterface              DVBServiceType = 13
	DvbServiceRcsMap                                 DVBServiceType = 14
	DvbServiceRcsFls                                 DVBServiceType = 15
	DvbServiceDvbMhp                                 DVBServiceType = 16
	DvbServiceMpeg2HdDigitalTelevision               DVBServiceType = 17
	DvbServiceAdvancedCodecSdDigitalTelevision       DVBServiceType = 22
	DvbServiceAdvancedCodecSdNvodTimeShifted         DVBServiceType = 23
	DvbServiceAdvancedCodecSdNvodReference           DVBServiceType = 24
	DvbServiceAdvancedCodecHdDigitalTelevision       DVBServiceType = 25
	DvbServiceAdvancedCodecHdNvodTimeShifted         DVBServiceType = 26
	DvbServiceAdvancedCodecHdNvodReference           DVBServiceType = 27
	DvbServiceAdvancedCodecStereoHdDigitalTelevision DVBServiceType = 28
	DvbServiceAdvancedCodecStereoHdNvodTimeShifted   DVBServiceType = 29
	DvbServiceAdvancedCodecStereoHdNvodReference     DVBServiceType = 30
	DvbServiceReservedFf                             DVBServiceType = 31
)

// String returns the name in string for DVBServiceType.
func (d DVBServiceType) String() string {
	switch d {
	case DvbServiceReserved00:
		return "Reserved00"
	case DvbServiceDigitalTelevision:
		return "DigitalTelevision"
	case DvbServiceDigitalRadioSound:
		return "DigitalRadioSound"
	case DvbServiceTeletext:
		return "Teletext"
	case DvbServiceNvodReference:
		return "NvodReference"
	case DvbServiceNvodTimeShifted:
		return "NvodTimeShifted"
	case DvbServiceMosaic:
		return "Mosaic"
	case DvbServiceFmRadio:
		return "FmRadio"
	case DvbServiceDvbSrm:
		return "DvbSrm"
	case DvbServiceReserved09:
		return "Reserved09"
	case DvbServiceAdvancedCodecDigitalRadioSound:
		return "AdvancedCodecDigitalRadioSound"
	case DvbServiceAdvancedCodecMosaic:
		return "AdvancedCodecMosaic"
	case DvbServiceDataBroadcast:
		return "DataBroadcast"
	case DvbServiceReserved0DCommonInterface:
		return "Reserved0DCommonInterface"
	case DvbServiceRcsMap:
		return "RcsMap"
	case DvbServiceRcsFls:
		return "RcsFls"
	case DvbServiceDvbMhp:
		return "DvbMhp"
	case DvbServiceMpeg2HdDigitalTelevision:
		return "Mpeg2HdDigitalTelevision"
	case DvbServiceAdvancedCodecSdDigitalTelevision:
		return "AdvancedCodecSdDigitalTelevision"
	case DvbServiceAdvancedCodecSdNvodTimeShifted:
		return "AdvancedCodecSdNvodTimeShifted"
	case DvbServiceAdvancedCodecSdNvodReference:
		return "AdvancedCodecSdNvodReference"
	case DvbServiceAdvancedCodecHdDigitalTelevision:
		return "AdvancedCodecHdDigitalTelevision"
	case DvbServiceAdvancedCodecHdNvodTimeShifted:
		return "AdvancedCodecHdNvodTimeShifted"
	case DvbServiceAdvancedCodecHdNvodReference:
		return "AdvancedCodecHdNvodReference"
	case DvbServiceAdvancedCodecStereoHdDigitalTelevision:
		return "AdvancedCodecStereoHdDigitalTelevision"
	case DvbServiceAdvancedCodecStereoHdNvodTimeShifted:
		return "AdvancedCodecStereoHdNvodTimeShifted"
	case DvbServiceAdvancedCodecStereoHdNvodReference:
		return "AdvancedCodecStereoHdNvodReference"
	case DvbServiceReservedFf:
		return "ReservedFf"
	default:
		return fmt.Sprintf("DVBServiceType(%d)", d)
	}
}

// DVBTeletextType: type of teletext page.
//
// As specified in Table 100 of ETSI EN 300 468 v1.13.1.
type DVBTeletextType C.gint

const (
	InitialPage           DVBTeletextType = 1
	SubtitlePage          DVBTeletextType = 2
	AdditionalInfoPage    DVBTeletextType = 3
	ProgrammeSchedulePage DVBTeletextType = 4
	HearingImpairedPage   DVBTeletextType = 5
)

// String returns the name in string for DVBTeletextType.
func (d DVBTeletextType) String() string {
	switch d {
	case InitialPage:
		return "InitialPage"
	case SubtitlePage:
		return "SubtitlePage"
	case AdditionalInfoPage:
		return "AdditionalInfoPage"
	case ProgrammeSchedulePage:
		return "ProgrammeSchedulePage"
	case HearingImpairedPage:
		return "HearingImpairedPage"
	default:
		return fmt.Sprintf("DVBTeletextType(%d)", d)
	}
}

// DescriptorType: type of MpegtsDescriptor
//
// These values correspond to the registered descriptor type from the base
// MPEG-TS specifications (ITU H.222.0 | ISO/IEC 13818-1).
//
// Consult the relevant specifications for more details.
type DescriptorType C.gint

const (
	MtsDescReserved00                   DescriptorType = 0
	MtsDescReserved01                   DescriptorType = 1
	MtsDescVideoStream                  DescriptorType = 2
	MtsDescAudioStream                  DescriptorType = 3
	MtsDescHierarchy                    DescriptorType = 4
	MtsDescRegistration                 DescriptorType = 5
	MtsDescDataStreamAlignment          DescriptorType = 6
	MtsDescTargetBackgroundGrid         DescriptorType = 7
	MtsDescVideoWindow                  DescriptorType = 8
	MtsDescCa                           DescriptorType = 9
	MtsDescISO639Language               DescriptorType = 10
	MtsDescSystemClock                  DescriptorType = 11
	MtsDescMultiplexBufferUtilisation   DescriptorType = 12
	MtsDescCopyright                    DescriptorType = 13
	MtsDescMaximumBitrate               DescriptorType = 14
	MtsDescPrivateDataIndicator         DescriptorType = 15
	MtsDescSmoothingBuffer              DescriptorType = 16
	MtsDescStd                          DescriptorType = 17
	MtsDescIbp                          DescriptorType = 18
	MtsDescDsmccCarouselIdentifier      DescriptorType = 19
	MtsDescDsmccAssociationTag          DescriptorType = 20
	MtsDescDsmccDeferredAssociationTag  DescriptorType = 21
	MtsDescDsmccNptReference            DescriptorType = 23
	MtsDescDsmccNptEndpoint             DescriptorType = 24
	MtsDescDsmccStreamMode              DescriptorType = 25
	MtsDescDsmccStreamEvent             DescriptorType = 26
	MtsDescMpeg4Video                   DescriptorType = 27
	MtsDescMpeg4Audio                   DescriptorType = 28
	MtsDescIod                          DescriptorType = 29
	MtsDescSl                           DescriptorType = 30
	MtsDescFmc                          DescriptorType = 31
	MtsDescExternalESID                 DescriptorType = 32
	MtsDescMuxCode                      DescriptorType = 33
	MtsDescFmxBufferSize                DescriptorType = 34
	MtsDescMultiplexBuffer              DescriptorType = 35
	MtsDescContentLabeling              DescriptorType = 36
	MtsDescMetadataPointer              DescriptorType = 37
	MtsDescMetadata                     DescriptorType = 38
	MtsDescMetadataStd                  DescriptorType = 39
	MtsDescAvcVideo                     DescriptorType = 40
	MtsDescIpmp                         DescriptorType = 41
	MtsDescAvcTimingAndHrd              DescriptorType = 42
	MtsDescMpeg2AacAudio                DescriptorType = 43
	MtsDescFlexMuxTiming                DescriptorType = 44
	MtsDescMpeg4Text                    DescriptorType = 45
	MtsDescMpeg4AudioExtension          DescriptorType = 46
	MtsDescAuxiliaryVideoStream         DescriptorType = 47
	MtsDescSvcExtension                 DescriptorType = 48
	MtsDescMvcExtension                 DescriptorType = 49
	MtsDescJ2KVideo                     DescriptorType = 50
	MtsDescMvcOperationPoint            DescriptorType = 51
	MtsDescMpeg2StereoscopicVideoFormat DescriptorType = 52
	MtsDescStereoscopicProgramInfo      DescriptorType = 53
	MtsDescStereoscopicVideoInfo        DescriptorType = 54
)

// String returns the name in string for DescriptorType.
func (d DescriptorType) String() string {
	switch d {
	case MtsDescReserved00:
		return "Reserved00"
	case MtsDescReserved01:
		return "Reserved01"
	case MtsDescVideoStream:
		return "VideoStream"
	case MtsDescAudioStream:
		return "AudioStream"
	case MtsDescHierarchy:
		return "Hierarchy"
	case MtsDescRegistration:
		return "Registration"
	case MtsDescDataStreamAlignment:
		return "DataStreamAlignment"
	case MtsDescTargetBackgroundGrid:
		return "TargetBackgroundGrid"
	case MtsDescVideoWindow:
		return "VideoWindow"
	case MtsDescCa:
		return "Ca"
	case MtsDescISO639Language:
		return "ISO639Language"
	case MtsDescSystemClock:
		return "SystemClock"
	case MtsDescMultiplexBufferUtilisation:
		return "MultiplexBufferUtilisation"
	case MtsDescCopyright:
		return "Copyright"
	case MtsDescMaximumBitrate:
		return "MaximumBitrate"
	case MtsDescPrivateDataIndicator:
		return "PrivateDataIndicator"
	case MtsDescSmoothingBuffer:
		return "SmoothingBuffer"
	case MtsDescStd:
		return "Std"
	case MtsDescIbp:
		return "Ibp"
	case MtsDescDsmccCarouselIdentifier:
		return "DsmccCarouselIdentifier"
	case MtsDescDsmccAssociationTag:
		return "DsmccAssociationTag"
	case MtsDescDsmccDeferredAssociationTag:
		return "DsmccDeferredAssociationTag"
	case MtsDescDsmccNptReference:
		return "DsmccNptReference"
	case MtsDescDsmccNptEndpoint:
		return "DsmccNptEndpoint"
	case MtsDescDsmccStreamMode:
		return "DsmccStreamMode"
	case MtsDescDsmccStreamEvent:
		return "DsmccStreamEvent"
	case MtsDescMpeg4Video:
		return "Mpeg4Video"
	case MtsDescMpeg4Audio:
		return "Mpeg4Audio"
	case MtsDescIod:
		return "Iod"
	case MtsDescSl:
		return "Sl"
	case MtsDescFmc:
		return "Fmc"
	case MtsDescExternalESID:
		return "ExternalESID"
	case MtsDescMuxCode:
		return "MuxCode"
	case MtsDescFmxBufferSize:
		return "FmxBufferSize"
	case MtsDescMultiplexBuffer:
		return "MultiplexBuffer"
	case MtsDescContentLabeling:
		return "ContentLabeling"
	case MtsDescMetadataPointer:
		return "MetadataPointer"
	case MtsDescMetadata:
		return "Metadata"
	case MtsDescMetadataStd:
		return "MetadataStd"
	case MtsDescAvcVideo:
		return "AvcVideo"
	case MtsDescIpmp:
		return "Ipmp"
	case MtsDescAvcTimingAndHrd:
		return "AvcTimingAndHrd"
	case MtsDescMpeg2AacAudio:
		return "Mpeg2AacAudio"
	case MtsDescFlexMuxTiming:
		return "FlexMuxTiming"
	case MtsDescMpeg4Text:
		return "Mpeg4Text"
	case MtsDescMpeg4AudioExtension:
		return "Mpeg4AudioExtension"
	case MtsDescAuxiliaryVideoStream:
		return "AuxiliaryVideoStream"
	case MtsDescSvcExtension:
		return "SvcExtension"
	case MtsDescMvcExtension:
		return "MvcExtension"
	case MtsDescJ2KVideo:
		return "J2KVideo"
	case MtsDescMvcOperationPoint:
		return "MvcOperationPoint"
	case MtsDescMpeg2StereoscopicVideoFormat:
		return "Mpeg2StereoscopicVideoFormat"
	case MtsDescStereoscopicProgramInfo:
		return "StereoscopicProgramInfo"
	case MtsDescStereoscopicVideoInfo:
		return "StereoscopicVideoInfo"
	default:
		return fmt.Sprintf("DescriptorType(%d)", d)
	}
}

// HdmvStreamType: type of mpeg-ts streams for Blu-ray formats. To be matched
// with the stream-type of a MpegtsSection.
type HdmvStreamType C.gint

const (
	MpegtsStreamTypeHdmvAudioLpcm             HdmvStreamType = 128
	MpegtsStreamTypeHdmvAudioAc3              HdmvStreamType = 129
	MpegtsStreamTypeHdmvAudioDts              HdmvStreamType = 130
	MpegtsStreamTypeHdmvAudioAc3TrueHd        HdmvStreamType = 131
	MpegtsStreamTypeHdmvAudioAc3Plus          HdmvStreamType = 132
	MpegtsStreamTypeHdmvAudioDtsHd            HdmvStreamType = 133
	MpegtsStreamTypeHdmvAudioDtsHdMasterAudio HdmvStreamType = 134
	MpegtsStreamTypeHdmvAudioEac3             HdmvStreamType = 135
	MpegtsStreamTypeHdmvSubpicturePgs         HdmvStreamType = 144
	MpegtsStreamTypeHdmvIgs                   HdmvStreamType = 145
	MpegtsStreamTypeHdmvSubtitle              HdmvStreamType = 146
	MpegtsStreamTypeHdmvAudioAc3PlusSecondary HdmvStreamType = 161
	MpegtsStreamTypeHdmvAudioDtsHdSecondary   HdmvStreamType = 162
)

// String returns the name in string for HdmvStreamType.
func (h HdmvStreamType) String() string {
	switch h {
	case MpegtsStreamTypeHdmvAudioLpcm:
		return "AudioLpcm"
	case MpegtsStreamTypeHdmvAudioAc3:
		return "AudioAc3"
	case MpegtsStreamTypeHdmvAudioDts:
		return "AudioDts"
	case MpegtsStreamTypeHdmvAudioAc3TrueHd:
		return "AudioAc3TrueHd"
	case MpegtsStreamTypeHdmvAudioAc3Plus:
		return "AudioAc3Plus"
	case MpegtsStreamTypeHdmvAudioDtsHd:
		return "AudioDtsHd"
	case MpegtsStreamTypeHdmvAudioDtsHdMasterAudio:
		return "AudioDtsHdMasterAudio"
	case MpegtsStreamTypeHdmvAudioEac3:
		return "AudioEac3"
	case MpegtsStreamTypeHdmvSubpicturePgs:
		return "SubpicturePgs"
	case MpegtsStreamTypeHdmvIgs:
		return "Igs"
	case MpegtsStreamTypeHdmvSubtitle:
		return "Subtitle"
	case MpegtsStreamTypeHdmvAudioAc3PlusSecondary:
		return "AudioAc3PlusSecondary"
	case MpegtsStreamTypeHdmvAudioDtsHdSecondary:
		return "AudioDtsHdSecondary"
	default:
		return fmt.Sprintf("HdmvStreamType(%d)", h)
	}
}

// ISDBDescriptorType: these values correspond to the registered descriptor type
// from the various ISDB specifications.
//
// Consult the relevant specifications for more details.
type ISDBDescriptorType C.gint

const (
	MtsDescIsdbHierarchicalTransmission ISDBDescriptorType = 192
	MtsDescIsdbDigitalCopyControl       ISDBDescriptorType = 193
	MtsDescIsdbNetworkIdentification    ISDBDescriptorType = 194
	MtsDescIsdbPartialTsTime            ISDBDescriptorType = 195
	MtsDescIsdbAudioComponent           ISDBDescriptorType = 196
	MtsDescIsdbHyperlink                ISDBDescriptorType = 197
	MtsDescIsdbTargetRegion             ISDBDescriptorType = 198
	MtsDescIsdbDataContent              ISDBDescriptorType = 199
	MtsDescIsdbVideoDecodeControl       ISDBDescriptorType = 200
	MtsDescIsdbDownloadContent          ISDBDescriptorType = 201
	MtsDescIsdbCaEmmTs                  ISDBDescriptorType = 202
	MtsDescIsdbCaContractInformation    ISDBDescriptorType = 203
	MtsDescIsdbCaService                ISDBDescriptorType = 204
	MtsDescIsdbTsInformation            ISDBDescriptorType = 205
	MtsDescIsdbExtendedBroadcaster      ISDBDescriptorType = 206
	MtsDescIsdbLogoTransmission         ISDBDescriptorType = 207
	MtsDescIsdbBasicLocalEvent          ISDBDescriptorType = 208
	MtsDescIsdbReference                ISDBDescriptorType = 209
	MtsDescIsdbNodeRelation             ISDBDescriptorType = 210
	MtsDescIsdbShortNodeInformation     ISDBDescriptorType = 211
	MtsDescIsdbStcReference             ISDBDescriptorType = 212
	MtsDescIsdbSeries                   ISDBDescriptorType = 213
	MtsDescIsdbEventGroup               ISDBDescriptorType = 214
	MtsDescIsdbSiParameter              ISDBDescriptorType = 215
	MtsDescIsdbBroadcasterName          ISDBDescriptorType = 216
	MtsDescIsdbComponentGroup           ISDBDescriptorType = 217
	MtsDescIsdbSiPrimeTs                ISDBDescriptorType = 218
	MtsDescIsdbBoardInformation         ISDBDescriptorType = 219
	MtsDescIsdbLdtLinkage               ISDBDescriptorType = 220
	MtsDescIsdbConnectedTransmission    ISDBDescriptorType = 221
	MtsDescIsdbContentAvailability      ISDBDescriptorType = 222
	MtsDescIsdbServiceGroup             ISDBDescriptorType = 224
)

// String returns the name in string for ISDBDescriptorType.
func (i ISDBDescriptorType) String() string {
	switch i {
	case MtsDescIsdbHierarchicalTransmission:
		return "HierarchicalTransmission"
	case MtsDescIsdbDigitalCopyControl:
		return "DigitalCopyControl"
	case MtsDescIsdbNetworkIdentification:
		return "NetworkIdentification"
	case MtsDescIsdbPartialTsTime:
		return "PartialTsTime"
	case MtsDescIsdbAudioComponent:
		return "AudioComponent"
	case MtsDescIsdbHyperlink:
		return "Hyperlink"
	case MtsDescIsdbTargetRegion:
		return "TargetRegion"
	case MtsDescIsdbDataContent:
		return "DataContent"
	case MtsDescIsdbVideoDecodeControl:
		return "VideoDecodeControl"
	case MtsDescIsdbDownloadContent:
		return "DownloadContent"
	case MtsDescIsdbCaEmmTs:
		return "CaEmmTs"
	case MtsDescIsdbCaContractInformation:
		return "CaContractInformation"
	case MtsDescIsdbCaService:
		return "CaService"
	case MtsDescIsdbTsInformation:
		return "TsInformation"
	case MtsDescIsdbExtendedBroadcaster:
		return "ExtendedBroadcaster"
	case MtsDescIsdbLogoTransmission:
		return "LogoTransmission"
	case MtsDescIsdbBasicLocalEvent:
		return "BasicLocalEvent"
	case MtsDescIsdbReference:
		return "Reference"
	case MtsDescIsdbNodeRelation:
		return "NodeRelation"
	case MtsDescIsdbShortNodeInformation:
		return "ShortNodeInformation"
	case MtsDescIsdbStcReference:
		return "StcReference"
	case MtsDescIsdbSeries:
		return "Series"
	case MtsDescIsdbEventGroup:
		return "EventGroup"
	case MtsDescIsdbSiParameter:
		return "SiParameter"
	case MtsDescIsdbBroadcasterName:
		return "BroadcasterName"
	case MtsDescIsdbComponentGroup:
		return "ComponentGroup"
	case MtsDescIsdbSiPrimeTs:
		return "SiPrimeTs"
	case MtsDescIsdbBoardInformation:
		return "BoardInformation"
	case MtsDescIsdbLdtLinkage:
		return "LdtLinkage"
	case MtsDescIsdbConnectedTransmission:
		return "ConnectedTransmission"
	case MtsDescIsdbContentAvailability:
		return "ContentAvailability"
	case MtsDescIsdbServiceGroup:
		return "ServiceGroup"
	default:
		return fmt.Sprintf("ISDBDescriptorType(%d)", i)
	}
}

type ISO639AudioType C.gint

const (
	MpegtsAudioTypeUndefined ISO639AudioType = iota
	MpegtsAudioTypeCleanEffects
	MpegtsAudioTypeHearingImpaired
	MpegtsAudioTypeVisualImpairedCommentary
)

// String returns the name in string for ISO639AudioType.
func (i ISO639AudioType) String() string {
	switch i {
	case MpegtsAudioTypeUndefined:
		return "Undefined"
	case MpegtsAudioTypeCleanEffects:
		return "CleanEffects"
	case MpegtsAudioTypeHearingImpaired:
		return "HearingImpaired"
	case MpegtsAudioTypeVisualImpairedCommentary:
		return "VisualImpairedCommentary"
	default:
		return fmt.Sprintf("ISO639AudioType(%d)", i)
	}
}

// MetadataFormat: metadata_descriptor metadata_format valid values. See ISO/IEC
// 13818-1:2018(E) Table 2-85.
type MetadataFormat C.gint

const (
	// MpegtsMetadataFormatTem: ISO/IEC 15938-1 TeM.
	MpegtsMetadataFormatTem MetadataFormat = 16
	// MpegtsMetadataFormatBim: ISO/IEC 15938-1 BiM.
	MpegtsMetadataFormatBim MetadataFormat = 17
	// MpegtsMetadataFormatApplicationFormat: defined by metadata application
	// format.
	MpegtsMetadataFormatApplicationFormat MetadataFormat = 63
	// MpegtsMetadataFormatIdentifierField: defined by
	// metadata_format_identifier field.
	MpegtsMetadataFormatIdentifierField MetadataFormat = 255
)

// String returns the name in string for MetadataFormat.
func (m MetadataFormat) String() string {
	switch m {
	case MpegtsMetadataFormatTem:
		return "Tem"
	case MpegtsMetadataFormatBim:
		return "Bim"
	case MpegtsMetadataFormatApplicationFormat:
		return "ApplicationFormat"
	case MpegtsMetadataFormatIdentifierField:
		return "IdentifierField"
	default:
		return fmt.Sprintf("MetadataFormat(%d)", m)
	}
}

// MiscDescriptorType: type of MpegtsDescriptor
//
// These values correspond to miscellaneous descriptor types that are not yet
// identified from known specifications.
type MiscDescriptorType C.gint

const (
	MtsDescDtgLogicalChannel MiscDescriptorType = 131
)

// String returns the name in string for MiscDescriptorType.
func (m MiscDescriptorType) String() string {
	switch m {
	case MtsDescDtgLogicalChannel:
		return "MtsDescDtgLogicalChannel"
	default:
		return fmt.Sprintf("MiscDescriptorType(%d)", m)
	}
}

type ModulationType C.gint

const (
	MpegtsModulationQpsk ModulationType = iota
	MpegtsModulationQam16
	MpegtsModulationQam32
	MpegtsModulationQam64
	MpegtsModulationQam128
	MpegtsModulationQam256
	MpegtsModulationQamAuto
	MpegtsModulationVsb8
	MpegtsModulationVsb16
	MpegtsModulationPsk8
	MpegtsModulationApsk16
	MpegtsModulationApsk32
	MpegtsModulationDqpsk
	MpegtsModulationQam4Nr_
	MpegtsModulationNone
)

// String returns the name in string for ModulationType.
func (m ModulationType) String() string {
	switch m {
	case MpegtsModulationQpsk:
		return "Qpsk"
	case MpegtsModulationQam16:
		return "Qam16"
	case MpegtsModulationQam32:
		return "Qam32"
	case MpegtsModulationQam64:
		return "Qam64"
	case MpegtsModulationQam128:
		return "Qam128"
	case MpegtsModulationQam256:
		return "Qam256"
	case MpegtsModulationQamAuto:
		return "QamAuto"
	case MpegtsModulationVsb8:
		return "Vsb8"
	case MpegtsModulationVsb16:
		return "Vsb16"
	case MpegtsModulationPsk8:
		return "Psk8"
	case MpegtsModulationApsk16:
		return "Apsk16"
	case MpegtsModulationApsk32:
		return "Apsk32"
	case MpegtsModulationDqpsk:
		return "Dqpsk"
	case MpegtsModulationQam4Nr_:
		return "Qam4Nr_"
	case MpegtsModulationNone:
		return "None"
	default:
		return fmt.Sprintf("ModulationType(%d)", m)
	}
}

// RunningStatus: running status of a service.
//
// Corresponds to table 6 of ETSI EN 300 468 (v1.13.0).
type RunningStatus C.gint

const (
	MpegtsRunningStatusUndefined RunningStatus = iota
	MpegtsRunningStatusNotRunning
	MpegtsRunningStatusStartsInFewSeconds
	MpegtsRunningStatusPausing
	MpegtsRunningStatusRunning
	MpegtsRunningStatusOffAir
)

// String returns the name in string for RunningStatus.
func (r RunningStatus) String() string {
	switch r {
	case MpegtsRunningStatusUndefined:
		return "Undefined"
	case MpegtsRunningStatusNotRunning:
		return "NotRunning"
	case MpegtsRunningStatusStartsInFewSeconds:
		return "StartsInFewSeconds"
	case MpegtsRunningStatusPausing:
		return "Pausing"
	case MpegtsRunningStatusRunning:
		return "Running"
	case MpegtsRunningStatusOffAir:
		return "OffAir"
	default:
		return fmt.Sprintf("RunningStatus(%d)", r)
	}
}

// SCTEDescriptorType: these values correspond to the ones defined by SCTE
// (amongst other in ANSI/SCTE 57).
type SCTEDescriptorType C.gint

const (
	MtsDescScteStuffing          SCTEDescriptorType = 128
	MtsDescScteAc3               SCTEDescriptorType = 129
	MtsDescScteFrameRate         SCTEDescriptorType = 130
	MtsDescScteExtendedVideo     SCTEDescriptorType = 131
	MtsDescScteComponentName     SCTEDescriptorType = 132
	MtsDescScteFrequencySpec     SCTEDescriptorType = 144
	MtsDescScteModulationParams  SCTEDescriptorType = 145
	MtsDescScteTransportStreamID SCTEDescriptorType = 146
)

// String returns the name in string for SCTEDescriptorType.
func (s SCTEDescriptorType) String() string {
	switch s {
	case MtsDescScteStuffing:
		return "Stuffing"
	case MtsDescScteAc3:
		return "Ac3"
	case MtsDescScteFrameRate:
		return "FrameRate"
	case MtsDescScteExtendedVideo:
		return "ExtendedVideo"
	case MtsDescScteComponentName:
		return "ComponentName"
	case MtsDescScteFrequencySpec:
		return "FrequencySpec"
	case MtsDescScteModulationParams:
		return "ModulationParams"
	case MtsDescScteTransportStreamID:
		return "TransportStreamID"
	default:
		return fmt.Sprintf("SCTEDescriptorType(%d)", s)
	}
}

type SCTESpliceCommandType C.gint

const (
	MtsScteSpliceCommandNull      SCTESpliceCommandType = 0
	MtsScteSpliceCommandSchedule  SCTESpliceCommandType = 4
	MtsScteSpliceCommandInsert    SCTESpliceCommandType = 5
	MtsScteSpliceCommandTime      SCTESpliceCommandType = 6
	MtsScteSpliceCommandBandwidth SCTESpliceCommandType = 7
	MtsScteSpliceCommandPrivate   SCTESpliceCommandType = 255
)

// String returns the name in string for SCTESpliceCommandType.
func (s SCTESpliceCommandType) String() string {
	switch s {
	case MtsScteSpliceCommandNull:
		return "Null"
	case MtsScteSpliceCommandSchedule:
		return "Schedule"
	case MtsScteSpliceCommandInsert:
		return "Insert"
	case MtsScteSpliceCommandTime:
		return "Time"
	case MtsScteSpliceCommandBandwidth:
		return "Bandwidth"
	case MtsScteSpliceCommandPrivate:
		return "Private"
	default:
		return fmt.Sprintf("SCTESpliceCommandType(%d)", s)
	}
}

type SCTESpliceDescriptor C.gint

const (
	MtsScteDescAvail SCTESpliceDescriptor = iota
	MtsScteDescDtmf
	MtsScteDescSegmentation
	MtsScteDescTime
	MtsScteDescAudio
)

// String returns the name in string for SCTESpliceDescriptor.
func (s SCTESpliceDescriptor) String() string {
	switch s {
	case MtsScteDescAvail:
		return "Avail"
	case MtsScteDescDtmf:
		return "Dtmf"
	case MtsScteDescSegmentation:
		return "Segmentation"
	case MtsScteDescTime:
		return "Time"
	case MtsScteDescAudio:
		return "Audio"
	default:
		return fmt.Sprintf("SCTESpliceDescriptor(%d)", s)
	}
}

type SatellitePolarizationType C.gint

const (
	MpegtsPolarizationLinearHorizontal SatellitePolarizationType = iota
	MpegtsPolarizationLinearVertical
	MpegtsPolarizationCircularLeft
	MpegtsPolarizationCircularRight
)

// String returns the name in string for SatellitePolarizationType.
func (s SatellitePolarizationType) String() string {
	switch s {
	case MpegtsPolarizationLinearHorizontal:
		return "LinearHorizontal"
	case MpegtsPolarizationLinearVertical:
		return "LinearVertical"
	case MpegtsPolarizationCircularLeft:
		return "CircularLeft"
	case MpegtsPolarizationCircularRight:
		return "CircularRight"
	default:
		return fmt.Sprintf("SatellitePolarizationType(%d)", s)
	}
}

type SatelliteRolloff C.gint

const (
	MpegtsRolloff35 SatelliteRolloff = iota
	MpegtsRolloff20
	MpegtsRolloff25
	MpegtsRolloffReserved
	MpegtsRolloffAuto
)

// String returns the name in string for SatelliteRolloff.
func (s SatelliteRolloff) String() string {
	switch s {
	case MpegtsRolloff35:
		return "35"
	case MpegtsRolloff20:
		return "20"
	case MpegtsRolloff25:
		return "25"
	case MpegtsRolloffReserved:
		return "Reserved"
	case MpegtsRolloffAuto:
		return "Auto"
	default:
		return fmt.Sprintf("SatelliteRolloff(%d)", s)
	}
}

// ScteStreamType: type of mpeg-ts streams for SCTE. Most users would want to
// use the MpegtsATSCStreamType instead since it also covers these stream types.
type ScteStreamType C.gint

const (
	// MpegtsStreamTypeScteSubtitling: SCTE-27 Subtitling.
	MpegtsStreamTypeScteSubtitling ScteStreamType = 130
	// MpegtsStreamTypeScteIsochData: SCTE-19 Isochronous data.
	MpegtsStreamTypeScteIsochData ScteStreamType = 131
	// MpegtsStreamTypeScteSit: SCTE-35 Splice Information Table.
	MpegtsStreamTypeScteSit ScteStreamType = 134
	// MpegtsStreamTypeScteDstNrt: SCTE-07 Data Service or Network Resource
	// Table.
	MpegtsStreamTypeScteDstNrt ScteStreamType = 149
	// MpegtsStreamTypeScteDsmccDcb: type B - DSM-CC Data Carousel [IEC
	// 13818-6]).
	MpegtsStreamTypeScteDsmccDcb ScteStreamType = 176
	// MpegtsStreamTypeScteSignaling: enhanced Television Application Signaling
	// (OC-SP-ETV-AM1.0.1-120614).
	MpegtsStreamTypeScteSignaling ScteStreamType = 192
	// MpegtsStreamTypeScteSyncData: SCTE-07 Synchronous data.
	MpegtsStreamTypeScteSyncData ScteStreamType = 194
	// MpegtsStreamTypeScteAsyncData: SCTE-53 Asynchronous data.
	MpegtsStreamTypeScteAsyncData ScteStreamType = 195
)

// String returns the name in string for ScteStreamType.
func (s ScteStreamType) String() string {
	switch s {
	case MpegtsStreamTypeScteSubtitling:
		return "Subtitling"
	case MpegtsStreamTypeScteIsochData:
		return "IsochData"
	case MpegtsStreamTypeScteSit:
		return "Sit"
	case MpegtsStreamTypeScteDstNrt:
		return "DstNrt"
	case MpegtsStreamTypeScteDsmccDcb:
		return "DsmccDcb"
	case MpegtsStreamTypeScteSignaling:
		return "Signaling"
	case MpegtsStreamTypeScteSyncData:
		return "SyncData"
	case MpegtsStreamTypeScteAsyncData:
		return "AsyncData"
	default:
		return fmt.Sprintf("ScteStreamType(%d)", s)
	}
}

// SectionATSCTableID values for a MpegtsSection table_id.
//
// These are the registered ATSC section table_id variants. Unless specified
// otherwise, they are defined in the "ATSC A/65" specification.
//
// see also: MpegtsSectionTableID and other variants.
type SectionATSCTableID C.gint

const (
	// MtsTableIDAtscMasterGuide: master Guide Table (MGT).
	MtsTableIDAtscMasterGuide SectionATSCTableID = 199
	// MtsTableIDAtscTerrestrialVirtualChannel: terrestrial Virtual Channel
	// Table (TVCT).
	MtsTableIDAtscTerrestrialVirtualChannel SectionATSCTableID = 200
	// MtsTableIDAtscCableVirtualChannel: cable Virtual Channel Table (CVCT).
	MtsTableIDAtscCableVirtualChannel SectionATSCTableID = 201
	// MtsTableIDAtscRatingRegion: rating Region Table (RRT).
	MtsTableIDAtscRatingRegion SectionATSCTableID = 202
	// MtsTableIDAtscEventInformation: event Information Table (EIT).
	MtsTableIDAtscEventInformation SectionATSCTableID = 203
	// MtsTableIDAtscChannelOrEventExtendedText: extended Text Table (ETT).
	MtsTableIDAtscChannelOrEventExtendedText SectionATSCTableID = 204
	// MtsTableIDAtscSystemTime: system Time Table (STT).
	MtsTableIDAtscSystemTime SectionATSCTableID = 205
	// MtsTableIDAtscDataEvent: a/90: Data Event Table (DET).
	MtsTableIDAtscDataEvent SectionATSCTableID = 206
	// MtsTableIDAtscDataService: a/90: Data Service Table (DST).
	MtsTableIDAtscDataService SectionATSCTableID = 207
	// MtsTableIDAtscProgramIdentifier: a/57B: Program Identifier Table.
	MtsTableIDAtscProgramIdentifier SectionATSCTableID = 208
	// MtsTableIDAtscNetworkResource: a/90: Network Resources Table (NRT).
	MtsTableIDAtscNetworkResource SectionATSCTableID = 209
	// MtsTableIDAtscLongTermService: a/90: Long Term Service Table (LTST).
	MtsTableIDAtscLongTermService SectionATSCTableID = 210
	// MtsTableIDAtscDirectedChannelChange: directed Channel Change Table
	// (DCCT).
	MtsTableIDAtscDirectedChannelChange SectionATSCTableID = 211
	// MtsTableIDAtscDirectedChannelChangeSectionCode: directed Channel Change
	// Selection Code Table (DCCSCT).
	MtsTableIDAtscDirectedChannelChangeSectionCode SectionATSCTableID = 212
	MtsTableIDAtscAggregateEventInformation        SectionATSCTableID = 214
	MtsTableIDAtscAggregateExtendedText            SectionATSCTableID = 215
	MtsTableIDAtscAggregateDataEvent               SectionATSCTableID = 217
	// MtsTableIDAtscSatelliteVirtualChannel: a/81: Satellite Virtual Channel
	// Table.
	MtsTableIDAtscSatelliteVirtualChannel SectionATSCTableID = 218
)

// String returns the name in string for SectionATSCTableID.
func (s SectionATSCTableID) String() string {
	switch s {
	case MtsTableIDAtscMasterGuide:
		return "MasterGuide"
	case MtsTableIDAtscTerrestrialVirtualChannel:
		return "TerrestrialVirtualChannel"
	case MtsTableIDAtscCableVirtualChannel:
		return "CableVirtualChannel"
	case MtsTableIDAtscRatingRegion:
		return "RatingRegion"
	case MtsTableIDAtscEventInformation:
		return "EventInformation"
	case MtsTableIDAtscChannelOrEventExtendedText:
		return "ChannelOrEventExtendedText"
	case MtsTableIDAtscSystemTime:
		return "SystemTime"
	case MtsTableIDAtscDataEvent:
		return "DataEvent"
	case MtsTableIDAtscDataService:
		return "DataService"
	case MtsTableIDAtscProgramIdentifier:
		return "ProgramIdentifier"
	case MtsTableIDAtscNetworkResource:
		return "NetworkResource"
	case MtsTableIDAtscLongTermService:
		return "LongTermService"
	case MtsTableIDAtscDirectedChannelChange:
		return "DirectedChannelChange"
	case MtsTableIDAtscDirectedChannelChangeSectionCode:
		return "DirectedChannelChangeSectionCode"
	case MtsTableIDAtscAggregateEventInformation:
		return "AggregateEventInformation"
	case MtsTableIDAtscAggregateExtendedText:
		return "AggregateExtendedText"
	case MtsTableIDAtscAggregateDataEvent:
		return "AggregateDataEvent"
	case MtsTableIDAtscSatelliteVirtualChannel:
		return "SatelliteVirtualChannel"
	default:
		return fmt.Sprintf("SectionATSCTableID(%d)", s)
	}
}

// SectionDVBTableID values for a MpegtsSection table_id.
//
// These are the registered DVB table_id variants. Unless specified otherwise,
// they come from the DVB Specification for SI (ETSI EN 300 468).
//
// see also: MpegtsSectionTableID.
type SectionDVBTableID C.gint

const (
	// MtsTableIDNetworkInformationActualNetwork: network Information Table
	// (NIT), Actual Network.
	MtsTableIDNetworkInformationActualNetwork SectionDVBTableID = 64
	// MtsTableIDNetworkInformationOtherNetwork: network Information Table
	// (NIT), Other Network.
	MtsTableIDNetworkInformationOtherNetwork SectionDVBTableID = 65
	// MtsTableIDServiceDescriptionActualTs: service Description Table (SDT),
	// Actual Transport Stream.
	MtsTableIDServiceDescriptionActualTs SectionDVBTableID = 66
	// MtsTableIDServiceDescriptionOtherTs: service Description Table (SDT),
	// Other Transport Stream.
	MtsTableIDServiceDescriptionOtherTs SectionDVBTableID = 70
	// MtsTableIDBouquetAssociation: bouquet Association Table (BAT).
	MtsTableIDBouquetAssociation SectionDVBTableID = 74
	// MtsTableIDUpdateNotification: ETSI TS 102 006: Update Notification Table
	// (UNT).
	MtsTableIDUpdateNotification SectionDVBTableID = 75
	// MtsTableIDDownloadableFontInfo: ETSI EN 303 560: Downloadable Font Info.
	MtsTableIDDownloadableFontInfo SectionDVBTableID = 76
	// MtsTableIDEventInformationActualTsPresent: event Information Table (EIT),
	// Actual Transport Stream, present/following.
	MtsTableIDEventInformationActualTsPresent SectionDVBTableID = 78
	// MtsTableIDEventInformationOtherTsPresent: event Information Table (EIT),
	// Other Transport Stream, present/following.
	MtsTableIDEventInformationOtherTsPresent SectionDVBTableID = 79
	// MtsTableIDEventInformationActualTsSchedule1: event Information Table
	// (EIT), Actual Transport Stream, Schedule (first).
	MtsTableIDEventInformationActualTsSchedule1 SectionDVBTableID = 80
	// MtsTableIDEventInformationActualTsScheduleN: event Information Table
	// (EIT), Actual Transport Stream, Schedule (last).
	MtsTableIDEventInformationActualTsScheduleN SectionDVBTableID = 95
	// MtsTableIDEventInformationOtherTsSchedule1: event Information Table
	// (EIT), Other Transport Stream, Schedule (first).
	MtsTableIDEventInformationOtherTsSchedule1 SectionDVBTableID = 96
	// MtsTableIDEventInformationOtherTsScheduleN: event Information Table
	// (EIT), Other Transport Stream, Schedule (last).
	MtsTableIDEventInformationOtherTsScheduleN SectionDVBTableID = 111
	// MtsTableIDTimeDate: time Date Table (TDT).
	MtsTableIDTimeDate SectionDVBTableID = 112
	// MtsTableIDRunningStatus: running Status Table (RST).
	MtsTableIDRunningStatus SectionDVBTableID = 113
	// MtsTableIDStuffing: stuffing Table (ST).
	MtsTableIDStuffing SectionDVBTableID = 114
	// MtsTableIDTimeOffset: time Offset Table (TOT).
	MtsTableIDTimeOffset SectionDVBTableID = 115
	// MtsTableIDApplicationInformationTable: ETSI TS 102 323: Application
	// Information Table (AIT).
	MtsTableIDApplicationInformationTable SectionDVBTableID = 116
	// MtsTableIDContainer: ETSI TS 102 323: Container Section.
	MtsTableIDContainer SectionDVBTableID = 117
	// MtsTableIDRelatedContent: ETSI TS 102 323: Related Content Table (RCT).
	MtsTableIDRelatedContent SectionDVBTableID = 118
	// MtsTableIDContentIdentifier: ETSI TS 102 323: Content Identifier Table
	// (CIT).
	MtsTableIDContentIdentifier SectionDVBTableID = 119
	// MtsTableIDMpeFec: ETSI TS 301 192: MPE-FEC Section.
	MtsTableIDMpeFec SectionDVBTableID = 120
	// MtsTableIDResolutionNotification: ETSI 103 323: Resolution Provider
	// Notification Table (RNT).
	MtsTableIDResolutionNotification SectionDVBTableID = 121
	// MtsTableIDMpeIfec: ETSI TS 102 772: MPE-IFEC Section.
	MtsTableIDMpeIfec SectionDVBTableID = 122
	// MtsTableIDProtectionMessage: ETSI TS 102 809: Protection Message Section.
	MtsTableIDProtectionMessage SectionDVBTableID = 123
	// MtsTableIDDiscontinuityInformation: discontinuity Information Table
	// (DIT).
	MtsTableIDDiscontinuityInformation SectionDVBTableID = 126
	// MtsTableIDSelectionInformation: selection Information Table (SIT).
	MtsTableIDSelectionInformation SectionDVBTableID = 127
	// MtsTableIDCaMessageEcm0: ETSI TR 289: CA Message Table (CMT): ECM 0.
	MtsTableIDCaMessageEcm0 SectionDVBTableID = 128
	// MtsTableIDCaMessageEcm1: ETSI TR 289: CA Message Table (CMT): ECM 1.
	MtsTableIDCaMessageEcm1 SectionDVBTableID = 129
	// MtsTableIDCaMessageSystemPrivate1: ETSI TR 289: CA Message Table (CMT):
	// CA System Private (First).
	MtsTableIDCaMessageSystemPrivate1 SectionDVBTableID = 130
	// MtsTableIDCaMessageSystemPrivateN: ETSI TR 289: CA Message Table (CMT):
	// CA System Private (Last).
	MtsTableIDCaMessageSystemPrivateN        SectionDVBTableID = 143
	MtsTableIDSct                            SectionDVBTableID = 160
	MtsTableIDFct                            SectionDVBTableID = 161
	MtsTableIDTct                            SectionDVBTableID = 162
	MtsTableIDSpt                            SectionDVBTableID = 163
	MtsTableIDCmt                            SectionDVBTableID = 164
	MtsTableIDTbtp                           SectionDVBTableID = 165
	MtsTableIDPcrPacketPayload               SectionDVBTableID = 166
	MtsTableIDTransmissionModeSupportPayload SectionDVBTableID = 170
	MtsTableIDTim                            SectionDVBTableID = 176
	MtsTableIDLlFecParityDataTable           SectionDVBTableID = 177
)

// String returns the name in string for SectionDVBTableID.
func (s SectionDVBTableID) String() string {
	switch s {
	case MtsTableIDNetworkInformationActualNetwork:
		return "NetworkInformationActualNetwork"
	case MtsTableIDNetworkInformationOtherNetwork:
		return "NetworkInformationOtherNetwork"
	case MtsTableIDServiceDescriptionActualTs:
		return "ServiceDescriptionActualTs"
	case MtsTableIDServiceDescriptionOtherTs:
		return "ServiceDescriptionOtherTs"
	case MtsTableIDBouquetAssociation:
		return "BouquetAssociation"
	case MtsTableIDUpdateNotification:
		return "UpdateNotification"
	case MtsTableIDDownloadableFontInfo:
		return "DownloadableFontInfo"
	case MtsTableIDEventInformationActualTsPresent:
		return "EventInformationActualTsPresent"
	case MtsTableIDEventInformationOtherTsPresent:
		return "EventInformationOtherTsPresent"
	case MtsTableIDEventInformationActualTsSchedule1:
		return "EventInformationActualTsSchedule1"
	case MtsTableIDEventInformationActualTsScheduleN:
		return "EventInformationActualTsScheduleN"
	case MtsTableIDEventInformationOtherTsSchedule1:
		return "EventInformationOtherTsSchedule1"
	case MtsTableIDEventInformationOtherTsScheduleN:
		return "EventInformationOtherTsScheduleN"
	case MtsTableIDTimeDate:
		return "TimeDate"
	case MtsTableIDRunningStatus:
		return "RunningStatus"
	case MtsTableIDStuffing:
		return "Stuffing"
	case MtsTableIDTimeOffset:
		return "TimeOffset"
	case MtsTableIDApplicationInformationTable:
		return "ApplicationInformationTable"
	case MtsTableIDContainer:
		return "Container"
	case MtsTableIDRelatedContent:
		return "RelatedContent"
	case MtsTableIDContentIdentifier:
		return "ContentIdentifier"
	case MtsTableIDMpeFec:
		return "MpeFec"
	case MtsTableIDResolutionNotification:
		return "ResolutionNotification"
	case MtsTableIDMpeIfec:
		return "MpeIfec"
	case MtsTableIDProtectionMessage:
		return "ProtectionMessage"
	case MtsTableIDDiscontinuityInformation:
		return "DiscontinuityInformation"
	case MtsTableIDSelectionInformation:
		return "SelectionInformation"
	case MtsTableIDCaMessageEcm0:
		return "CaMessageEcm0"
	case MtsTableIDCaMessageEcm1:
		return "CaMessageEcm1"
	case MtsTableIDCaMessageSystemPrivate1:
		return "CaMessageSystemPrivate1"
	case MtsTableIDCaMessageSystemPrivateN:
		return "CaMessageSystemPrivateN"
	case MtsTableIDSct:
		return "Sct"
	case MtsTableIDFct:
		return "Fct"
	case MtsTableIDTct:
		return "Tct"
	case MtsTableIDSpt:
		return "Spt"
	case MtsTableIDCmt:
		return "Cmt"
	case MtsTableIDTbtp:
		return "Tbtp"
	case MtsTableIDPcrPacketPayload:
		return "PcrPacketPayload"
	case MtsTableIDTransmissionModeSupportPayload:
		return "TransmissionModeSupportPayload"
	case MtsTableIDTim:
		return "Tim"
	case MtsTableIDLlFecParityDataTable:
		return "LlFecParityDataTable"
	default:
		return fmt.Sprintf("SectionDVBTableID(%d)", s)
	}
}

// SectionSCTETableID values for a MpegtsSection table_id.
//
// These are the registered SCTE table_id variants.
//
// see also: MpegtsSectionTableID.
type SectionSCTETableID C.gint

const (
	// MtsTableIDScteEas: SCTE-18 Emergency Alert System.
	MtsTableIDScteEas SectionSCTETableID = 216
	// MtsTableIDScteEbif: CL-SP-ETV-AM 1.0.1 EBIF message.
	MtsTableIDScteEbif     SectionSCTETableID = 224
	MtsTableIDScteReserved SectionSCTETableID = 225
	// MtsTableIDScteEiss: CL-SP-ETV-AM 1.0.1 EBIF Int. Signaling Sect.
	MtsTableIDScteEiss SectionSCTETableID = 226
	// MtsTableIDScteDii: CL-SP-ETV-AM 1.0.1 DSMCC DII message.
	MtsTableIDScteDii SectionSCTETableID = 227
	// MtsTableIDScteDdb: CL-SP-ETV-AM 1.0.1 DSMCC Data Download Block.
	MtsTableIDScteDdb SectionSCTETableID = 228
	// MtsTableIDScteSplice: SCTE-35 splice information is carried in a section
	// stream on a separate PID in the program’s Map Table (PMT) allowing
	// Splice Event notifications to remain associated with the program and pass
	// through multiplexers.
	MtsTableIDScteSplice SectionSCTETableID = 252
)

// String returns the name in string for SectionSCTETableID.
func (s SectionSCTETableID) String() string {
	switch s {
	case MtsTableIDScteEas:
		return "Eas"
	case MtsTableIDScteEbif:
		return "Ebif"
	case MtsTableIDScteReserved:
		return "Reserved"
	case MtsTableIDScteEiss:
		return "Eiss"
	case MtsTableIDScteDii:
		return "Dii"
	case MtsTableIDScteDdb:
		return "Ddb"
	case MtsTableIDScteSplice:
		return "Splice"
	default:
		return fmt.Sprintf("SectionSCTETableID(%d)", s)
	}
}

// SectionTableID values for a MpegtsSection table_id
//
// These are the registered ITU H.222.0 | ISO/IEC 13818-1 table_id variants.
//
// see also MpegtsSectionATSCTableID, MpegtsSectionDVBTableID, and
// MpegtsSectionSCTETableID.
type SectionTableID C.gint

const (
	// MtsTableIDProgramAssociation: program Association Table (PAT).
	MtsTableIDProgramAssociation SectionTableID = 0
	// MtsTableIDConditionalAccess: conditional Access Table (CAT).
	MtsTableIDConditionalAccess SectionTableID = 1
	// MtsTableIDTsProgramMap: program Map Table (PMT).
	MtsTableIDTsProgramMap SectionTableID = 2
	// MtsTableIDTsDescription: transport Stream Description Table.
	MtsTableIDTsDescription SectionTableID = 3
	// MtsTableID14496SceneDescription: ISO/IEC 14496 Scene Description Table.
	MtsTableID14496SceneDescription SectionTableID = 4
	// MtsTableID14496ObjetDescriptor: ISO/IEC 14496 Object Descriptor Table.
	MtsTableID14496ObjetDescriptor SectionTableID = 5
	// MtsTableIDMetadata: metadata Section.
	MtsTableIDMetadata SectionTableID = 6
	// MtsTableIDIpmpControlInformation: IPMP Control Information.
	MtsTableIDIpmpControlInformation SectionTableID = 7
	// MtsTableID14496Section: ISO/IEC 14496 Section.
	MtsTableID14496Section SectionTableID = 8
	// MtsTableID2300111_Section: ISO/IEC 23001-11 (Green Access Unit) Section.
	MtsTableID2300111_Section SectionTableID = 9
	// MtsTableID2300110_Section: ISO/ISO 23001-10 (Quality Access Unit)
	// Section.
	MtsTableID2300110_Section SectionTableID = 10
	// MtsTableIDDsmCcMultiprotoEncapsulatedData: DSM-CC Multi-Protocol
	// Encapsulated (MPE) Data.
	MtsTableIDDsmCcMultiprotoEncapsulatedData SectionTableID = 58
	// MtsTableIDDsmCcUNMessages: DSM-CC U-N Messages.
	MtsTableIDDsmCcUNMessages SectionTableID = 59
	// MtsTableIDDsmCcDownloadDataMessages: DSM-CC Download Data Messages.
	MtsTableIDDsmCcDownloadDataMessages SectionTableID = 60
	// MtsTableIDDsmCcStreamDescriptors: DSM-CC Stream Descriptors.
	MtsTableIDDsmCcStreamDescriptors SectionTableID = 61
	// MtsTableIDDsmCcPrivateData: DSM-CC Private Data.
	MtsTableIDDsmCcPrivateData SectionTableID = 62
	// MtsTableIDDsmCcAddressableSections: DSM-CC Addressable Section.
	MtsTableIDDsmCcAddressableSections SectionTableID = 63
	// MtsTableIDUnset: unset section table_id (value is forbidden to use in
	// actual sections).
	MtsTableIDUnset SectionTableID = 255
)

// String returns the name in string for SectionTableID.
func (s SectionTableID) String() string {
	switch s {
	case MtsTableIDProgramAssociation:
		return "ProgramAssociation"
	case MtsTableIDConditionalAccess:
		return "ConditionalAccess"
	case MtsTableIDTsProgramMap:
		return "TsProgramMap"
	case MtsTableIDTsDescription:
		return "TsDescription"
	case MtsTableID14496SceneDescription:
		return "14496SceneDescription"
	case MtsTableID14496ObjetDescriptor:
		return "14496ObjetDescriptor"
	case MtsTableIDMetadata:
		return "Metadata"
	case MtsTableIDIpmpControlInformation:
		return "IpmpControlInformation"
	case MtsTableID14496Section:
		return "14496Section"
	case MtsTableID2300111_Section:
		return "2300111_Section"
	case MtsTableID2300110_Section:
		return "2300110_Section"
	case MtsTableIDDsmCcMultiprotoEncapsulatedData:
		return "DsmCcMultiprotoEncapsulatedData"
	case MtsTableIDDsmCcUNMessages:
		return "DsmCcUNMessages"
	case MtsTableIDDsmCcDownloadDataMessages:
		return "DsmCcDownloadDataMessages"
	case MtsTableIDDsmCcStreamDescriptors:
		return "DsmCcStreamDescriptors"
	case MtsTableIDDsmCcPrivateData:
		return "DsmCcPrivateData"
	case MtsTableIDDsmCcAddressableSections:
		return "DsmCcAddressableSections"
	case MtsTableIDUnset:
		return "Unset"
	default:
		return fmt.Sprintf("SectionTableID(%d)", s)
	}
}

// SectionType types of MpegtsSection that the library handles. This covers all
// the MPEG-TS and derivate specification that the library can properly identify
// and use.
type SectionType C.gint

const (
	// MpegtsSectionUnknown: unknown section type.
	MpegtsSectionUnknown SectionType = iota
	// MpegtsSectionPat: program Association Table (ISO/IEC 13818-1).
	MpegtsSectionPat
	// MpegtsSectionPmt: program Map Table (ISO/IEC 13818-1).
	MpegtsSectionPmt
	// MpegtsSectionCat: conditional Access Table (ISO/IEC 13818-1).
	MpegtsSectionCat
	// MpegtsSectionTsdt: transport Stream Description Table (ISO/IEC 13818-1).
	MpegtsSectionTsdt
	// MpegtsSectionEit: event Information Table (EN 300 468).
	MpegtsSectionEit
	// MpegtsSectionNit: network Information Table (ISO/IEC 13818-1 / EN 300
	// 468).
	MpegtsSectionNit
	// MpegtsSectionBat: bouquet Association Table ((EN 300 468).
	MpegtsSectionBat
	// MpegtsSectionSdt: service Description Table (EN 300 468).
	MpegtsSectionSdt
	// MpegtsSectionTdt: time and Date Table (EN 300 468).
	MpegtsSectionTdt
	// MpegtsSectionTot: time Offset Table (EN 300 468).
	MpegtsSectionTot
	// MpegtsSectionSit: selection Information Table (EN 300 468).
	MpegtsSectionSit
	// MpegtsSectionAtscTvct: ATSC Terrestrial Virtual Channel Table (A65).
	MpegtsSectionAtscTvct
	// MpegtsSectionAtscCvct: ATSC Cable Virtual Channel Table (A65).
	MpegtsSectionAtscCvct
	// MpegtsSectionAtscMgt: ATSC Master Guide Table (A65).
	MpegtsSectionAtscMgt
	// MpegtsSectionAtscEtt: ATSC Extended Text Table (A65).
	MpegtsSectionAtscEtt
	// MpegtsSectionAtscEit: ATSC Event Information Table (A65).
	MpegtsSectionAtscEit
	// MpegtsSectionAtscStt: ATSC System Time Table (A65).
	MpegtsSectionAtscStt
	// MpegtsSectionAtscRrt: ATSC Rating Region Table (A65).
	MpegtsSectionAtscRrt
	// MpegtsSectionScteSit: SCTE Splice Information Table (SCTE-35).
	MpegtsSectionScteSit
)

// String returns the name in string for SectionType.
func (s SectionType) String() string {
	switch s {
	case MpegtsSectionUnknown:
		return "Unknown"
	case MpegtsSectionPat:
		return "Pat"
	case MpegtsSectionPmt:
		return "Pmt"
	case MpegtsSectionCat:
		return "Cat"
	case MpegtsSectionTsdt:
		return "Tsdt"
	case MpegtsSectionEit:
		return "Eit"
	case MpegtsSectionNit:
		return "Nit"
	case MpegtsSectionBat:
		return "Bat"
	case MpegtsSectionSdt:
		return "Sdt"
	case MpegtsSectionTdt:
		return "Tdt"
	case MpegtsSectionTot:
		return "Tot"
	case MpegtsSectionSit:
		return "Sit"
	case MpegtsSectionAtscTvct:
		return "AtscTvct"
	case MpegtsSectionAtscCvct:
		return "AtscCvct"
	case MpegtsSectionAtscMgt:
		return "AtscMgt"
	case MpegtsSectionAtscEtt:
		return "AtscEtt"
	case MpegtsSectionAtscEit:
		return "AtscEit"
	case MpegtsSectionAtscStt:
		return "AtscStt"
	case MpegtsSectionAtscRrt:
		return "AtscRrt"
	case MpegtsSectionScteSit:
		return "ScteSit"
	default:
		return fmt.Sprintf("SectionType(%d)", s)
	}
}

// StreamType: type of MPEG-TS stream type.
//
// These values correspond to the base standard registered types. Depending on
// the variant of mpeg-ts being used (Bluray, ATSC, DVB, ...), other types might
// also be used, but will not conflict with these.
//
// Corresponds to table 2-34 of ITU H.222.0 | ISO/IEC 13818-1.
type StreamType C.gint

const (
	// MpegtsStreamTypeReserved00: ITU-T | ISO/IEC Reserved.
	MpegtsStreamTypeReserved00 StreamType = 0
	// MpegtsStreamTypeVideoMpeg1: ISO/IEC 11172-2 Video (i.e. MPEG-1 Video).
	MpegtsStreamTypeVideoMpeg1 StreamType = 1
	// MpegtsStreamTypeVideoMpeg2: rec. ITU-T H.262 | ISO/IEC 13818-2 Video or
	// ISO/IEC 11172-2 constrained parameter video stream (i.e. MPEG-2 Video).
	MpegtsStreamTypeVideoMpeg2 StreamType = 2
	// MpegtsStreamTypeAudioMpeg1: ISO/IEC 11172-3 Audio.
	MpegtsStreamTypeAudioMpeg1 StreamType = 3
	// MpegtsStreamTypeAudioMpeg2: ISO/IEC 13818-3 Audio.
	MpegtsStreamTypeAudioMpeg2 StreamType = 4
	// MpegtsStreamTypePrivateSections: private sections.
	MpegtsStreamTypePrivateSections StreamType = 5
	// MpegtsStreamTypePrivatePesPackets: PES packets containing private data.
	MpegtsStreamTypePrivatePesPackets StreamType = 6
	// MpegtsStreamTypeMheg: ISO/IEC 13522 MHEG.
	MpegtsStreamTypeMheg StreamType = 7
	// MpegtsStreamTypeDsmCc: annex A DSM-CC.
	MpegtsStreamTypeDsmCc StreamType = 8
	// MpegtsStreamTypeH2221: rec. ITU-T H.222.1.
	MpegtsStreamTypeH2221 StreamType = 9
	// MpegtsStreamTypeDsmccA: ISO/IEC 13818-6 type A.
	MpegtsStreamTypeDsmccA StreamType = 10
	// MpegtsStreamTypeDsmccB: ISO/IEC 13818-6 type B.
	MpegtsStreamTypeDsmccB StreamType = 11
	// MpegtsStreamTypeDsmccC: ISO/IEC 13818-6 type C.
	MpegtsStreamTypeDsmccC StreamType = 12
	// MpegtsStreamTypeDsmccD: ISO/IEC 13818-6 type D.
	MpegtsStreamTypeDsmccD StreamType = 13
	// MpegtsStreamTypeAuxiliary: auxiliary streams.
	MpegtsStreamTypeAuxiliary StreamType = 14
	// MpegtsStreamTypeAudioAacAdts: ISO/IEC 13818-7 Audio (AAC) with ADTS
	// transport syntax.
	MpegtsStreamTypeAudioAacAdts StreamType = 15
	// MpegtsStreamTypeVideoMpeg4: ISO/IEC 14496-2 Visual (MPEG-4 Video).
	MpegtsStreamTypeVideoMpeg4 StreamType = 16
	// MpegtsStreamTypeAudioAacLatm: ISO/IEC 14496-3 Audio (AAC) with the LATM
	// transport syntax as defined in ISO/IEC 14496-3.
	MpegtsStreamTypeAudioAacLatm StreamType = 17
	// MpegtsStreamTypeSlFlexmuxPesPackets: ISO/IEC 14496-1 SL-packetized stream
	// or FlexMux stream carried in PES packets.
	MpegtsStreamTypeSlFlexmuxPesPackets StreamType = 18
	// MpegtsStreamTypeSlFlexmuxSections: ISO/IEC 14496-1 SL-packetized stream
	// or FlexMux stream carried in ISO/IEC 14496_sections.
	MpegtsStreamTypeSlFlexmuxSections StreamType = 19
	// MpegtsStreamTypeSynchronizedDownload: ISO/IEC 13818-6 Synchronized
	// Download Protocol.
	MpegtsStreamTypeSynchronizedDownload StreamType = 20
	// MpegtsStreamTypeMetadataPesPackets: metadata carried in PES packets.
	MpegtsStreamTypeMetadataPesPackets StreamType = 21
	// MpegtsStreamTypeMetadataSections: metadata carried in metadata_sections.
	MpegtsStreamTypeMetadataSections StreamType = 22
	// MpegtsStreamTypeMetadataDataCarousel: metadata carried in ISO/IEC 13818-6
	// Data Carousel.
	MpegtsStreamTypeMetadataDataCarousel StreamType = 23
	// MpegtsStreamTypeMetadataObjectCarousel: metadata carried in ISO/IEC
	// 13818-6 Object Carousel.
	MpegtsStreamTypeMetadataObjectCarousel StreamType = 24
	// MpegtsStreamTypeMetadataSynchronizedDownload: metadata carried in ISO/IEC
	// 13818-6 Synchronized Download Protocol.
	MpegtsStreamTypeMetadataSynchronizedDownload StreamType = 25
	// MpegtsStreamTypeMpeg2Ipmp: IPMP stream (defined in ISO/IEC 13818-11,
	// MPEG-2 IPMP).
	MpegtsStreamTypeMpeg2Ipmp StreamType = 26
	// MpegtsStreamTypeVideoH264: AVC video stream conforming to one or more
	// profiles defined in Annex A of Rec. ITU-T H.264 | ISO/IEC 14496-10 or
	// AVC video sub-bitstream of SVC as defined in 2.1.78 or MVC base view
	// sub-bitstream, as defined in 2.1.85, or AVC video sub-bitstream of MVC,
	// as defined in 2.1.88.
	MpegtsStreamTypeVideoH264 StreamType = 27
	// MpegtsStreamTypeAudioAacClean: ISO/IEC 14496-3 (AAC) Audio, without using
	// any additional transport syntax, such as DST, ALS and SLS.
	MpegtsStreamTypeAudioAacClean StreamType = 28
	// MpegtsStreamTypeMpeg4TimedText: ISO/IEC 14496-17 Text.
	MpegtsStreamTypeMpeg4TimedText StreamType = 29
	// MpegtsStreamTypeVideoRvc: auxiliary video stream as defined in ISO/IEC
	// 23002-3.
	MpegtsStreamTypeVideoRvc StreamType = 30
	// MpegtsStreamTypeVideoH264SvcSubBitstream: SVC video sub-bitstream of an
	// AVC video stream conforming to one or more profiles defined in Annex G of
	// Rec. ITU-T H.264 | ISO/IEC 14496-10.
	MpegtsStreamTypeVideoH264SvcSubBitstream StreamType = 31
	// MpegtsStreamTypeVideoH264MvcSubBitstream: MVC video sub-bitstream of an
	// AVC video stream conforming to one or more profiles defined in Annex H of
	// Rec. ITU-T H.264 | ISO/IEC 14496-10.
	MpegtsStreamTypeVideoH264MvcSubBitstream StreamType = 32
	// MpegtsStreamTypeVideoJp2K: video stream conforming to one or more
	// profiles as defined in Rec. ITU-T T.800 | ISO/IEC 15444-1 (i.e. JPEG
	// 2000).
	MpegtsStreamTypeVideoJp2K StreamType = 33
	// MpegtsStreamTypeVideoMpeg2StereoAdditionalView: additional view Rec.
	// ITU-T H.262 | ISO/IEC 13818-2 video stream for service-compatible
	// stereoscopic 3D services.
	MpegtsStreamTypeVideoMpeg2StereoAdditionalView StreamType = 34
	// MpegtsStreamTypeVideoH264StereoAdditionalView: additional view Rec. ITU-T
	// H.264 | ISO/IEC 14496-10 video stream conforming to one or more profiles
	// defined in Annex A for service-compatible stereoscopic 3D services.
	MpegtsStreamTypeVideoH264StereoAdditionalView StreamType = 35
	// MpegtsStreamTypeVideoHevc: rec. ITU-T H.265 | ISO/IEC 23008-2 video
	// stream or an HEVC temporal video sub-bitstream.
	MpegtsStreamTypeVideoHevc StreamType = 36
	// MpegtsStreamTypeIpmpStream: IPMP stream.
	MpegtsStreamTypeIpmpStream StreamType = 127
	// MpegtsStreamTypeUserPrivateEa: user Private stream id (used for VC-1) as
	// defined by SMPTE RP227.
	MpegtsStreamTypeUserPrivateEa StreamType = 234
)

// String returns the name in string for StreamType.
func (s StreamType) String() string {
	switch s {
	case MpegtsStreamTypeReserved00:
		return "Reserved00"
	case MpegtsStreamTypeVideoMpeg1:
		return "VideoMpeg1"
	case MpegtsStreamTypeVideoMpeg2:
		return "VideoMpeg2"
	case MpegtsStreamTypeAudioMpeg1:
		return "AudioMpeg1"
	case MpegtsStreamTypeAudioMpeg2:
		return "AudioMpeg2"
	case MpegtsStreamTypePrivateSections:
		return "PrivateSections"
	case MpegtsStreamTypePrivatePesPackets:
		return "PrivatePesPackets"
	case MpegtsStreamTypeMheg:
		return "Mheg"
	case MpegtsStreamTypeDsmCc:
		return "DsmCc"
	case MpegtsStreamTypeH2221:
		return "H2221"
	case MpegtsStreamTypeDsmccA:
		return "DsmccA"
	case MpegtsStreamTypeDsmccB:
		return "DsmccB"
	case MpegtsStreamTypeDsmccC:
		return "DsmccC"
	case MpegtsStreamTypeDsmccD:
		return "DsmccD"
	case MpegtsStreamTypeAuxiliary:
		return "Auxiliary"
	case MpegtsStreamTypeAudioAacAdts:
		return "AudioAacAdts"
	case MpegtsStreamTypeVideoMpeg4:
		return "VideoMpeg4"
	case MpegtsStreamTypeAudioAacLatm:
		return "AudioAacLatm"
	case MpegtsStreamTypeSlFlexmuxPesPackets:
		return "SlFlexmuxPesPackets"
	case MpegtsStreamTypeSlFlexmuxSections:
		return "SlFlexmuxSections"
	case MpegtsStreamTypeSynchronizedDownload:
		return "SynchronizedDownload"
	case MpegtsStreamTypeMetadataPesPackets:
		return "MetadataPesPackets"
	case MpegtsStreamTypeMetadataSections:
		return "MetadataSections"
	case MpegtsStreamTypeMetadataDataCarousel:
		return "MetadataDataCarousel"
	case MpegtsStreamTypeMetadataObjectCarousel:
		return "MetadataObjectCarousel"
	case MpegtsStreamTypeMetadataSynchronizedDownload:
		return "MetadataSynchronizedDownload"
	case MpegtsStreamTypeMpeg2Ipmp:
		return "Mpeg2Ipmp"
	case MpegtsStreamTypeVideoH264:
		return "VideoH264"
	case MpegtsStreamTypeAudioAacClean:
		return "AudioAacClean"
	case MpegtsStreamTypeMpeg4TimedText:
		return "Mpeg4TimedText"
	case MpegtsStreamTypeVideoRvc:
		return "VideoRvc"
	case MpegtsStreamTypeVideoH264SvcSubBitstream:
		return "VideoH264SvcSubBitstream"
	case MpegtsStreamTypeVideoH264MvcSubBitstream:
		return "VideoH264MvcSubBitstream"
	case MpegtsStreamTypeVideoJp2K:
		return "VideoJp2K"
	case MpegtsStreamTypeVideoMpeg2StereoAdditionalView:
		return "VideoMpeg2StereoAdditionalView"
	case MpegtsStreamTypeVideoH264StereoAdditionalView:
		return "VideoH264StereoAdditionalView"
	case MpegtsStreamTypeVideoHevc:
		return "VideoHevc"
	case MpegtsStreamTypeIpmpStream:
		return "IpmpStream"
	case MpegtsStreamTypeUserPrivateEa:
		return "UserPrivateEa"
	default:
		return fmt.Sprintf("StreamType(%d)", s)
	}
}

type TerrestrialGuardInterval C.gint

const (
	MpegtsGuardInterval132 TerrestrialGuardInterval = iota
	MpegtsGuardInterval116
	MpegtsGuardInterval18
	MpegtsGuardInterval14
	MpegtsGuardIntervalAuto
	MpegtsGuardInterval1128
	MpegtsGuardInterval19128
	MpegtsGuardInterval19256
	MpegtsGuardIntervalPn420
	MpegtsGuardIntervalPn595
	MpegtsGuardIntervalPn945
)

// String returns the name in string for TerrestrialGuardInterval.
func (t TerrestrialGuardInterval) String() string {
	switch t {
	case MpegtsGuardInterval132:
		return "132"
	case MpegtsGuardInterval116:
		return "116"
	case MpegtsGuardInterval18:
		return "18"
	case MpegtsGuardInterval14:
		return "14"
	case MpegtsGuardIntervalAuto:
		return "Auto"
	case MpegtsGuardInterval1128:
		return "1128"
	case MpegtsGuardInterval19128:
		return "19128"
	case MpegtsGuardInterval19256:
		return "19256"
	case MpegtsGuardIntervalPn420:
		return "Pn420"
	case MpegtsGuardIntervalPn595:
		return "Pn595"
	case MpegtsGuardIntervalPn945:
		return "Pn945"
	default:
		return fmt.Sprintf("TerrestrialGuardInterval(%d)", t)
	}
}

type TerrestrialHierarchy C.gint

const (
	MpegtsHierarchyNone TerrestrialHierarchy = iota
	MpegtsHierarchy1
	MpegtsHierarchy2
	MpegtsHierarchy4
	MpegtsHierarchyAuto
)

// String returns the name in string for TerrestrialHierarchy.
func (t TerrestrialHierarchy) String() string {
	switch t {
	case MpegtsHierarchyNone:
		return "None"
	case MpegtsHierarchy1:
		return "1"
	case MpegtsHierarchy2:
		return "2"
	case MpegtsHierarchy4:
		return "4"
	case MpegtsHierarchyAuto:
		return "Auto"
	default:
		return fmt.Sprintf("TerrestrialHierarchy(%d)", t)
	}
}

type TerrestrialTransmissionMode C.gint

const (
	MpegtsTransmissionMode2K TerrestrialTransmissionMode = iota
	MpegtsTransmissionMode8K
	MpegtsTransmissionModeAuto
	MpegtsTransmissionMode4K
	MpegtsTransmissionMode1K
	MpegtsTransmissionMode16K
	MpegtsTransmissionMode32K
	MpegtsTransmissionModeC1
	MpegtsTransmissionModeC3780
)

// String returns the name in string for TerrestrialTransmissionMode.
func (t TerrestrialTransmissionMode) String() string {
	switch t {
	case MpegtsTransmissionMode2K:
		return "2K"
	case MpegtsTransmissionMode8K:
		return "8K"
	case MpegtsTransmissionModeAuto:
		return "Auto"
	case MpegtsTransmissionMode4K:
		return "4K"
	case MpegtsTransmissionMode1K:
		return "1K"
	case MpegtsTransmissionMode16K:
		return "16K"
	case MpegtsTransmissionMode32K:
		return "32K"
	case MpegtsTransmissionModeC1:
		return "C1"
	case MpegtsTransmissionModeC3780:
		return "C3780"
	default:
		return fmt.Sprintf("TerrestrialTransmissionMode(%d)", t)
	}
}

// RegistrationID: well-known registration ids, expressed as native-endian 32bit
// integers. These are used in descriptors of type GST_MTS_DESC_REGISTRATION.
// Unless specified otherwise (by use of the "OTHER" prefix), they are all
// registered by the SMPTE Registration Authority (https://smpte-ra.org/) or
// specified in "official" documentation for the given format.
type RegistrationID C.guint

const (
	// MtsRegistration0: undefined registration id.
	MtsRegistration0 RegistrationID = 0b0
	// MtsRegistrationAc3: audio AC-3, ATSC A/52.
	MtsRegistrationAc3 RegistrationID = 0b1000001010000110010110100110011
	// MtsRegistrationCuei: SCTE 35, "Digital Program Insertion Cueing Message".
	MtsRegistrationCuei RegistrationID = 0b1000011010101010100010101001001
	// MtsRegistrationDrac: dirac Video codec.
	MtsRegistrationDrac RegistrationID = 0b1100100011100100110000101100011
	// MtsRegistrationDts1: DTS Audio.
	MtsRegistrationDts1 RegistrationID = 0b1000100010101000101001100110001
	// MtsRegistrationDts2: DTS Audio.
	MtsRegistrationDts2 RegistrationID = 0b1000100010101000101001100110010
	// MtsRegistrationDts3: DTS Audio.
	MtsRegistrationDts3 RegistrationID = 0b1000100010101000101001100110011
	// MtsRegistrationBssd: SMPTE 302M, Mapping of AES3 Data in mpeg-ts.
	MtsRegistrationBssd RegistrationID = 0b1000010010100110101001101000100
	// MtsRegistrationEac3: enhanced AC-3 (i.e. EAC3).
	MtsRegistrationEac3 RegistrationID = 0b1000101010000010100001100110011
	// MtsRegistrationEtv1 cablelabs ETV.
	MtsRegistrationEtv1 RegistrationID = 0b1000101010101000101011000110001
	// MtsRegistrationGa94: ATSC A/53 compliant stream (i.e. ATSC).
	MtsRegistrationGa94 RegistrationID = 0b1000111010000010011100100110100
	// MtsRegistrationHdmv: blu-ray, "System Description Blu-ray Disc Read-Only
	// Format part 3 Audio Visual Basic Specifications".
	MtsRegistrationHdmv RegistrationID = 0b1001000010001000100110101010110
	// MtsRegistrationKlva: SMPTE RP217 : Non-synchronized Mapping of KLV
	// Packets in mpeg-ts.
	MtsRegistrationKlva RegistrationID = 0b1001011010011000101011001000001
	// MtsRegistrationOpus opus Audio.
	MtsRegistrationOpus RegistrationID = 0b1001111010100000101010101010011
	// MtsRegistrationTshv: HDV (Sony).
	MtsRegistrationTshv RegistrationID = 0b1010100010100110100100001010110
	// MtsRegistrationVc1: video VC-1, SMPTE RP227 "VC-1 Bitstream Transport
	// Encodings".
	MtsRegistrationVc1 RegistrationID = 0b1010110010000110010110100110001
	// MtsRegistrationAc4: audio AC-4, ETSI 103 190-2.
	MtsRegistrationAc4 RegistrationID = 0b1000001010000110010110100110100
	// MtsRegistrationOtherHevc: HEVC / h265.
	MtsRegistrationOtherHevc RegistrationID = 0b1001000010001010101011001000011
)

// String returns the names in string for RegistrationID.
func (r RegistrationID) String() string {
	if r == 0 {
		return "RegistrationID(0)"
	}

	var builder strings.Builder
	builder.Grow(256)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case MtsRegistration0:
			builder.WriteString("0|")
		case MtsRegistrationAc3:
			builder.WriteString("Ac3|")
		case MtsRegistrationCuei:
			builder.WriteString("Cuei|")
		case MtsRegistrationDrac:
			builder.WriteString("Drac|")
		case MtsRegistrationDts1:
			builder.WriteString("Dts1|")
		case MtsRegistrationDts2:
			builder.WriteString("Dts2|")
		case MtsRegistrationDts3:
			builder.WriteString("Dts3|")
		case MtsRegistrationBssd:
			builder.WriteString("Bssd|")
		case MtsRegistrationEac3:
			builder.WriteString("Eac3|")
		case MtsRegistrationEtv1:
			builder.WriteString("Etv1|")
		case MtsRegistrationGa94:
			builder.WriteString("Ga94|")
		case MtsRegistrationHdmv:
			builder.WriteString("Hdmv|")
		case MtsRegistrationKlva:
			builder.WriteString("Klva|")
		case MtsRegistrationOpus:
			builder.WriteString("Opus|")
		case MtsRegistrationTshv:
			builder.WriteString("Tshv|")
		case MtsRegistrationVc1:
			builder.WriteString("Vc1|")
		case MtsRegistrationAc4:
			builder.WriteString("Ac4|")
		case MtsRegistrationOtherHevc:
			builder.WriteString("OtherHevc|")
		default:
			builder.WriteString(fmt.Sprintf("RegistrationID(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RegistrationID) Has(other RegistrationID) bool {
	return (r & other) == other
}

// BufferAddMpegtsPesMetadataMeta creates and adds a MpegtsPESMetadataMeta to a
// buffer.
//
// The function takes the following parameters:
//
//   - buffer: Buffer.
//
// The function returns the following values:
//
//   - pesMetadataMeta: newly created MpegtsPESMetadataMeta.
func BufferAddMpegtsPesMetadataMeta(buffer *gst.Buffer) *PESMetadataMeta {
	var _arg1 *C.GstBuffer                // out
	var _cret *C.GstMpegtsPESMetadataMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))

	_cret = C.gst_buffer_add_mpegts_pes_metadata_meta(_arg1)
	runtime.KeepAlive(buffer)

	var _pesMetadataMeta *PESMetadataMeta // out

	_pesMetadataMeta = (*PESMetadataMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _pesMetadataMeta
}

// EventNewMpegtsSection creates a new Event for a MpegtsSection.
//
// The function takes the following parameters:
//
//   - section to put in a message.
//
// The function returns the following values:
//
//   - event: new custom Event.
func EventNewMpegtsSection(section *Section) *gst.Event {
	var _arg1 *C.GstMpegtsSection // out
	var _cret *C.GstEvent         // in

	_arg1 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_event_new_mpegts_section(_arg1)
	runtime.KeepAlive(section)

	var _event *gst.Event // out

	_event = (*gst.Event)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_event)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _event
}

// EventParseMpegtsSection extracts the MpegtsSection contained in the event
// Event.
//
// The function takes the following parameters:
//
//   - event containing a MpegtsSection.
//
// The function returns the following values:
//
//   - section: extracted MpegtsSection , or NULL if the event did not contain a
//     valid MpegtsSection.
func EventParseMpegtsSection(event *gst.Event) *Section {
	var _arg1 *C.GstEvent         // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstEvent)(gextras.StructNative(unsafe.Pointer(event)))

	_cret = C.gst_event_parse_mpegts_section(_arg1)
	runtime.KeepAlive(event)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

// Initialize initializes the MPEG-TS helper library. Must be called before any
// usage.
func Initialize() {
	C.gst_mpegts_initialize()
}

// MessageNewMpegtsSection creates a new Message for a GstMpegtsSection.
//
// The function takes the following parameters:
//
//   - parent: creator of the message.
//   - section to put in a message.
//
// The function returns the following values:
//
//   - message: new Message to be posted, or NULL if the section is not valid.
func MessageNewMpegtsSection(parent gst.GstObjector, section *Section) *gst.Message {
	var _arg1 *C.GstObject        // out
	var _arg2 *C.GstMpegtsSection // out
	var _cret *C.GstMessage       // in

	_arg1 = (*C.GstObject)(unsafe.Pointer(coreglib.BaseObject(parent).Native()))
	_arg2 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_message_new_mpegts_section(_arg1, _arg2)
	runtime.KeepAlive(parent)
	runtime.KeepAlive(section)

	var _message *gst.Message // out

	_message = (*gst.Message)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_message)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mini_object_unref((*C.GstMiniObject)(intern.C))
		})

	return _message
}

// MessageParseMpegtsSection returns the MpegtsSection contained in a message.
//
// The function takes the following parameters:
//
//   - message: Message.
//
// The function returns the following values:
//
//   - section: contained MpegtsSection, or NULL.
func MessageParseMpegtsSection(message *gst.Message) *Section {
	var _arg1 *C.GstMessage       // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstMessage)(gextras.StructNative(unsafe.Pointer(message)))

	_cret = C.gst_message_parse_mpegts_section(_arg1)
	runtime.KeepAlive(message)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

// PesMetadataMetaApiGetType: return the #GType associated with
// MpegtsPESMetadataMeta.
//
// The function returns the following values:
//
//   - gType: #GType.
func PesMetadataMetaApiGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_mpegts_pes_metadata_meta_api_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// NewScteCancel allocates and initializes a new INSERT command MpegtsSCTESIT
// setup to cancel the specified event_id.
//
// The function takes the following parameters:
//
//   - eventId: event ID to cancel.
//
// The function returns the following values:
//
//   - sctesiT: newly allocated MpegtsSCTESIT.
func NewScteCancel(eventId uint32) *SCTESIT {
	var _arg1 C.guint32           // out
	var _cret *C.GstMpegtsSCTESIT // in

	_arg1 = C.guint32(eventId)

	_cret = C.gst_mpegts_scte_cancel_new(_arg1)
	runtime.KeepAlive(eventId)

	var _sctesiT *SCTESIT // out

	_sctesiT = (*SCTESIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_sctesiT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _sctesiT
}

// NewScteNull allocates and initializes a NULL command MpegtsSCTESIT.
//
// The function returns the following values:
//
//   - sctesiT: newly allocated MpegtsSCTESIT.
func NewScteNull() *SCTESIT {
	var _cret *C.GstMpegtsSCTESIT // in

	_cret = C.gst_mpegts_scte_null_new()

	var _sctesiT *SCTESIT // out

	_sctesiT = (*SCTESIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_sctesiT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _sctesiT
}

// NewScteSpliceIn allocates and initializes a new "Splice In" INSERT command
// MpegtsSCTESIT for the given event_id and splice_time.
//
// If the splice_time is MAXUINT64 then the event will be immediate as opposed
// to for the target splice_time.
//
// The function takes the following parameters:
//
//   - eventId: event ID.
//   - spliceTime: running time for the splice event.
//
// The function returns the following values:
//
//   - sctesiT: newly allocated MpegtsSCTESIT.
func NewScteSpliceIn(eventId uint32, spliceTime gst.ClockTime) *SCTESIT {
	var _arg1 C.guint32           // out
	var _arg2 C.GstClockTime      // out
	var _cret *C.GstMpegtsSCTESIT // in

	_arg1 = C.guint32(eventId)
	_arg2 = C.GstClockTime(spliceTime)

	_cret = C.gst_mpegts_scte_splice_in_new(_arg1, _arg2)
	runtime.KeepAlive(eventId)
	runtime.KeepAlive(spliceTime)

	var _sctesiT *SCTESIT // out

	_sctesiT = (*SCTESIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_sctesiT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _sctesiT
}

// NewScteSpliceOut allocates and initializes a new "Splice Out" INSERT command
// MpegtsSCTESIT for the given event_id, splice_time and duration.
//
// If the splice_time is MAXUINT64 then the event will be immediate as opposed
// to for the target splice_time.
//
// If the duration is 0 it won't be specified in the event.
//
// The function takes the following parameters:
//
//   - eventId: event ID.
//   - spliceTime: running time for the splice event.
//   - duration: optional duration.
//
// The function returns the following values:
//
//   - sctesiT: newly allocated MpegtsSCTESIT.
func NewScteSpliceOut(eventId uint32, spliceTime, duration gst.ClockTime) *SCTESIT {
	var _arg1 C.guint32           // out
	var _arg2 C.GstClockTime      // out
	var _arg3 C.GstClockTime      // out
	var _cret *C.GstMpegtsSCTESIT // in

	_arg1 = C.guint32(eventId)
	_arg2 = C.GstClockTime(spliceTime)
	_arg3 = C.GstClockTime(duration)

	_cret = C.gst_mpegts_scte_splice_out_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(eventId)
	runtime.KeepAlive(spliceTime)
	runtime.KeepAlive(duration)

	var _sctesiT *SCTESIT // out

	_sctesiT = (*SCTESIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_sctesiT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _sctesiT
}

// AtscEIT: event Information Table (ATSC)
//
// An instance of this type is always passed by reference.
type AtscEIT struct {
	*atscEIT
}

// atscEIT is the struct that's finalized.
type atscEIT struct {
	native *C.GstMpegtsAtscEIT
}

func marshalAtscEIT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscEIT{&atscEIT{(*C.GstMpegtsAtscEIT)(b)}}, nil
}

// AtscEITEvent: ATSC EIT Event
//
// An instance of this type is always passed by reference.
type AtscEITEvent struct {
	*atscEITEvent
}

// atscEITEvent is the struct that's finalized.
type atscEITEvent struct {
	native *C.GstMpegtsAtscEITEvent
}

func marshalAtscEITEvent(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscEITEvent{&atscEITEvent{(*C.GstMpegtsAtscEITEvent)(b)}}, nil
}

// AtscETT: extended Text Table (ATSC)
//
// An instance of this type is always passed by reference.
type AtscETT struct {
	*atscETT
}

// atscETT is the struct that's finalized.
type atscETT struct {
	native *C.GstMpegtsAtscETT
}

func marshalAtscETT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscETT{&atscETT{(*C.GstMpegtsAtscETT)(b)}}, nil
}

// AtscMGT: master Guide Table (A65)
//
// An instance of this type is always passed by reference.
type AtscMGT struct {
	*atscMGT
}

// atscMGT is the struct that's finalized.
type atscMGT struct {
	native *C.GstMpegtsAtscMGT
}

func marshalAtscMGT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscMGT{&atscMGT{(*C.GstMpegtsAtscMGT)(b)}}, nil
}

// NewAtscMGT constructs a struct AtscMGT.
func NewAtscMGT() *AtscMGT {
	var _cret *C.GstMpegtsAtscMGT // in

	_cret = C.gst_mpegts_atsc_mgt_new()

	var _atscMGT *AtscMGT // out

	_atscMGT = (*AtscMGT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_atscMGT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _atscMGT
}

// AtscMGTTable: source from a GstMpegtsAtscMGT
//
// An instance of this type is always passed by reference.
type AtscMGTTable struct {
	*atscMGTTable
}

// atscMGTTable is the struct that's finalized.
type atscMGTTable struct {
	native *C.GstMpegtsAtscMGTTable
}

func marshalAtscMGTTable(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscMGTTable{&atscMGTTable{(*C.GstMpegtsAtscMGTTable)(b)}}, nil
}

// AtscMultString: instance of this type is always passed by reference.
type AtscMultString struct {
	*atscMultString
}

// atscMultString is the struct that's finalized.
type atscMultString struct {
	native *C.GstMpegtsAtscMultString
}

func marshalAtscMultString(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscMultString{&atscMultString{(*C.GstMpegtsAtscMultString)(b)}}, nil
}

// AtscRRT: region Rating Table (A65)
//
// An instance of this type is always passed by reference.
type AtscRRT struct {
	*atscRRT
}

// atscRRT is the struct that's finalized.
type atscRRT struct {
	native *C.GstMpegtsAtscRRT
}

func marshalAtscRRT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscRRT{&atscRRT{(*C.GstMpegtsAtscRRT)(b)}}, nil
}

// NewAtscRRT constructs a struct AtscRRT.
func NewAtscRRT() *AtscRRT {
	var _cret *C.GstMpegtsAtscRRT // in

	_cret = C.gst_mpegts_atsc_rrt_new()

	var _atscRRT *AtscRRT // out

	_atscRRT = (*AtscRRT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_atscRRT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _atscRRT
}

// AtscRRTDimension: instance of this type is always passed by reference.
type AtscRRTDimension struct {
	*atscRRTDimension
}

// atscRRTDimension is the struct that's finalized.
type atscRRTDimension struct {
	native *C.GstMpegtsAtscRRTDimension
}

func marshalAtscRRTDimension(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscRRTDimension{&atscRRTDimension{(*C.GstMpegtsAtscRRTDimension)(b)}}, nil
}

// NewAtscRRTDimension constructs a struct AtscRRTDimension.
func NewAtscRRTDimension() *AtscRRTDimension {
	var _cret *C.GstMpegtsAtscRRTDimension // in

	_cret = C.gst_mpegts_atsc_rrt_dimension_new()

	var _atscRRTDimension *AtscRRTDimension // out

	_atscRRTDimension = (*AtscRRTDimension)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_atscRRTDimension)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _atscRRTDimension
}

// AtscRRTDimensionValue: instance of this type is always passed by reference.
type AtscRRTDimensionValue struct {
	*atscRRTDimensionValue
}

// atscRRTDimensionValue is the struct that's finalized.
type atscRRTDimensionValue struct {
	native *C.GstMpegtsAtscRRTDimensionValue
}

func marshalAtscRRTDimensionValue(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscRRTDimensionValue{&atscRRTDimensionValue{(*C.GstMpegtsAtscRRTDimensionValue)(b)}}, nil
}

// NewAtscRRTDimensionValue constructs a struct AtscRRTDimensionValue.
func NewAtscRRTDimensionValue() *AtscRRTDimensionValue {
	var _cret *C.GstMpegtsAtscRRTDimensionValue // in

	_cret = C.gst_mpegts_atsc_rrt_dimension_value_new()

	var _atscRRTDimensionValue *AtscRRTDimensionValue // out

	_atscRRTDimensionValue = (*AtscRRTDimensionValue)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_atscRRTDimensionValue)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _atscRRTDimensionValue
}

// AtscSTT: system Time Table (A65)
//
// An instance of this type is always passed by reference.
type AtscSTT struct {
	*atscSTT
}

// atscSTT is the struct that's finalized.
type atscSTT struct {
	native *C.GstMpegtsAtscSTT
}

func marshalAtscSTT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscSTT{&atscSTT{(*C.GstMpegtsAtscSTT)(b)}}, nil
}

// NewAtscSTT constructs a struct AtscSTT.
func NewAtscSTT() *AtscSTT {
	var _cret *C.GstMpegtsAtscSTT // in

	_cret = C.gst_mpegts_atsc_stt_new()

	var _atscSTT *AtscSTT // out

	_atscSTT = (*AtscSTT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_atscSTT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _atscSTT
}

func (stt *AtscSTT) DatetimeUTC() *gst.DateTime {
	var _arg0 *C.GstMpegtsAtscSTT // out
	var _cret *C.GstDateTime      // in

	_arg0 = (*C.GstMpegtsAtscSTT)(gextras.StructNative(unsafe.Pointer(stt)))

	_cret = C.gst_mpegts_atsc_stt_get_datetime_utc(_arg0)
	runtime.KeepAlive(stt)

	var _dateTime *gst.DateTime // out

	_dateTime = (*gst.DateTime)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_dateTime)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_date_time_unref((*C.GstDateTime)(intern.C))
		},
	)

	return _dateTime
}

// AtscStringSegment: string segment
//
// An instance of this type is always passed by reference.
type AtscStringSegment struct {
	*atscStringSegment
}

// atscStringSegment is the struct that's finalized.
type atscStringSegment struct {
	native *C.GstMpegtsAtscStringSegment
}

func marshalAtscStringSegment(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscStringSegment{&atscStringSegment{(*C.GstMpegtsAtscStringSegment)(b)}}, nil
}

// CompressionType: compression type.
func (a *AtscStringSegment) CompressionType() byte {
	valptr := &a.native.compression_type
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Mode: mode.
func (a *AtscStringSegment) Mode() byte {
	valptr := &a.native.mode
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// CompressedDataSize: size of compressed data.
func (a *AtscStringSegment) CompressedDataSize() byte {
	valptr := &a.native.compressed_data_size
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// CompressedData: compressed data.
func (a *AtscStringSegment) CompressedData() *byte {
	valptr := &a.native.compressed_data
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

func (a *AtscStringSegment) CachedString() string {
	valptr := &a.native.cached_string
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// CompressionType: compression type.
func (a *AtscStringSegment) SetCompressionType(compressionType byte) {
	valptr := &a.native.compression_type
	*valptr = C.guint8(compressionType)
}

// Mode: mode.
func (a *AtscStringSegment) SetMode(mode byte) {
	valptr := &a.native.mode
	*valptr = C.guint8(mode)
}

// CompressedDataSize: size of compressed data.
func (a *AtscStringSegment) SetCompressedDataSize(compressedDataSize byte) {
	valptr := &a.native.compressed_data_size
	*valptr = C.guint8(compressedDataSize)
}

func (seg *AtscStringSegment) String() string {
	var _arg0 *C.GstMpegtsAtscStringSegment // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.GstMpegtsAtscStringSegment)(gextras.StructNative(unsafe.Pointer(seg)))

	_cret = C.gst_mpegts_atsc_string_segment_get_string(_arg0)
	runtime.KeepAlive(seg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
//   - str
//   - compressionType
//   - mode
func (seg *AtscStringSegment) SetString(str string, compressionType byte, mode byte) bool {
	var _arg0 *C.GstMpegtsAtscStringSegment // out
	var _arg1 *C.gchar                      // out
	var _arg2 C.guint8                      // out
	var _arg3 C.guint8                      // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.GstMpegtsAtscStringSegment)(gextras.StructNative(unsafe.Pointer(seg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint8(compressionType)
	_arg3 = C.guint8(mode)

	_cret = C.gst_mpegts_atsc_string_segment_set_string(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(seg)
	runtime.KeepAlive(str)
	runtime.KeepAlive(compressionType)
	runtime.KeepAlive(mode)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AtscVCT represents both: Terrestrial Virtual Channel Table (A65) Cable
// Virtual Channel Table (A65)
//
// An instance of this type is always passed by reference.
type AtscVCT struct {
	*atscVCT
}

// atscVCT is the struct that's finalized.
type atscVCT struct {
	native *C.GstMpegtsAtscVCT
}

func marshalAtscVCT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscVCT{&atscVCT{(*C.GstMpegtsAtscVCT)(b)}}, nil
}

// AtscVCTSource: source from a GstMpegtsAtscVCT, can be used both for TVCT and
// CVCT tables
//
// An instance of this type is always passed by reference.
type AtscVCTSource struct {
	*atscVCTSource
}

// atscVCTSource is the struct that's finalized.
type atscVCTSource struct {
	native *C.GstMpegtsAtscVCTSource
}

func marshalAtscVCTSource(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AtscVCTSource{&atscVCTSource{(*C.GstMpegtsAtscVCTSource)(b)}}, nil
}

// AudioPreselectionDescriptor: table 110: Audio Preselection Descriptor (ETSI
// EN 300 468 v1.16.1)
//
// An instance of this type is always passed by reference.
type AudioPreselectionDescriptor struct {
	*audioPreselectionDescriptor
}

// audioPreselectionDescriptor is the struct that's finalized.
type audioPreselectionDescriptor struct {
	native *C.GstMpegtsAudioPreselectionDescriptor
}

// PreselectionID: 5-bit.
func (a *AudioPreselectionDescriptor) PreselectionID() byte {
	valptr := &a.native.preselection_id
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// AudioRenderingIndication: 3-bit field.
func (a *AudioPreselectionDescriptor) AudioRenderingIndication() byte {
	valptr := &a.native.audio_rendering_indication
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// AudioDescription: visually impaired.
func (a *AudioPreselectionDescriptor) AudioDescription() bool {
	valptr := &a.native.audio_description
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (a *AudioPreselectionDescriptor) SpokenSubtitles() bool {
	valptr := &a.native.spoken_subtitles
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (a *AudioPreselectionDescriptor) DialogueEnhancement() bool {
	valptr := &a.native.dialogue_enhancement
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (a *AudioPreselectionDescriptor) InteractivityEnabled() bool {
	valptr := &a.native.interactivity_enabled
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (a *AudioPreselectionDescriptor) LanguageCodePresent() bool {
	valptr := &a.native.language_code_present
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (a *AudioPreselectionDescriptor) TextLabelPresent() bool {
	valptr := &a.native.text_label_present
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// MultiStreamInfoPresent indicates if this PID conveys a complete audio
// programme.
func (a *AudioPreselectionDescriptor) MultiStreamInfoPresent() bool {
	valptr := &a.native.multi_stream_info_present
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (a *AudioPreselectionDescriptor) FutureExtension() bool {
	valptr := &a.native.future_extension
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// LanguageCode: NULL terminated ISO 639 language code.
func (a *AudioPreselectionDescriptor) LanguageCode() string {
	valptr := &a.native.language_code
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

func (a *AudioPreselectionDescriptor) MessageID() byte {
	valptr := &a.native.message_id
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// PreselectionID: 5-bit.
func (a *AudioPreselectionDescriptor) SetPreselectionID(preselectionId byte) {
	valptr := &a.native.preselection_id
	*valptr = C.guint8(preselectionId)
}

// AudioRenderingIndication: 3-bit field.
func (a *AudioPreselectionDescriptor) SetAudioRenderingIndication(audioRenderingIndication byte) {
	valptr := &a.native.audio_rendering_indication
	*valptr = C.guint8(audioRenderingIndication)
}

// AudioDescription: visually impaired.
func (a *AudioPreselectionDescriptor) SetAudioDescription(audioDescription bool) {
	valptr := &a.native.audio_description
	if audioDescription {
		*valptr = C.TRUE
	}
}

func (a *AudioPreselectionDescriptor) SetSpokenSubtitles(spokenSubtitles bool) {
	valptr := &a.native.spoken_subtitles
	if spokenSubtitles {
		*valptr = C.TRUE
	}
}

func (a *AudioPreselectionDescriptor) SetDialogueEnhancement(dialogueEnhancement bool) {
	valptr := &a.native.dialogue_enhancement
	if dialogueEnhancement {
		*valptr = C.TRUE
	}
}

func (a *AudioPreselectionDescriptor) SetInteractivityEnabled(interactivityEnabled bool) {
	valptr := &a.native.interactivity_enabled
	if interactivityEnabled {
		*valptr = C.TRUE
	}
}

func (a *AudioPreselectionDescriptor) SetLanguageCodePresent(languageCodePresent bool) {
	valptr := &a.native.language_code_present
	if languageCodePresent {
		*valptr = C.TRUE
	}
}

func (a *AudioPreselectionDescriptor) SetTextLabelPresent(textLabelPresent bool) {
	valptr := &a.native.text_label_present
	if textLabelPresent {
		*valptr = C.TRUE
	}
}

// MultiStreamInfoPresent indicates if this PID conveys a complete audio
// programme.
func (a *AudioPreselectionDescriptor) SetMultiStreamInfoPresent(multiStreamInfoPresent bool) {
	valptr := &a.native.multi_stream_info_present
	if multiStreamInfoPresent {
		*valptr = C.TRUE
	}
}

func (a *AudioPreselectionDescriptor) SetFutureExtension(futureExtension bool) {
	valptr := &a.native.future_extension
	if futureExtension {
		*valptr = C.TRUE
	}
}

func (a *AudioPreselectionDescriptor) SetMessageID(messageId byte) {
	valptr := &a.native.message_id
	*valptr = C.guint8(messageId)
}

// BAT: DVB Bouquet Association Table (EN 300 468)
//
// An instance of this type is always passed by reference.
type BAT struct {
	*baT
}

// baT is the struct that's finalized.
type baT struct {
	native *C.GstMpegtsBAT
}

func marshalBAT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &BAT{&baT{(*C.GstMpegtsBAT)(b)}}, nil
}

// BATStream: instance of this type is always passed by reference.
type BATStream struct {
	*batStream
}

// batStream is the struct that's finalized.
type batStream struct {
	native *C.GstMpegtsBATStream
}

func marshalBATStream(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &BATStream{&batStream{(*C.GstMpegtsBATStream)(b)}}, nil
}

// CableDeliverySystemDescriptor: cable Delivery System Descriptor (EN 300 468
// v.1.13.1)
//
// An instance of this type is always passed by reference.
type CableDeliverySystemDescriptor struct {
	*cableDeliverySystemDescriptor
}

// cableDeliverySystemDescriptor is the struct that's finalized.
type cableDeliverySystemDescriptor struct {
	native *C.GstMpegtsCableDeliverySystemDescriptor
}

func marshalCableDeliverySystemDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &CableDeliverySystemDescriptor{&cableDeliverySystemDescriptor{(*C.GstMpegtsCableDeliverySystemDescriptor)(b)}}, nil
}

// Frequency: frequency in Hz (Hertz).
func (c *CableDeliverySystemDescriptor) Frequency() uint32 {
	valptr := &c.native.frequency
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// OuterFec: outer FEC scheme used.
func (c *CableDeliverySystemDescriptor) OuterFec() CableOuterFECScheme {
	valptr := &c.native.outer_fec
	var _v CableOuterFECScheme // out
	_v = CableOuterFECScheme(*valptr)
	return _v
}

// Modulation scheme used.
func (c *CableDeliverySystemDescriptor) Modulation() ModulationType {
	valptr := &c.native.modulation
	var _v ModulationType // out
	_v = ModulationType(*valptr)
	return _v
}

// SymbolRate: symbol rate (in symbols per second).
func (c *CableDeliverySystemDescriptor) SymbolRate() uint32 {
	valptr := &c.native.symbol_rate
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// FecInner: inner FEC scheme used.
func (c *CableDeliverySystemDescriptor) FecInner() DVBCodeRate {
	valptr := &c.native.fec_inner
	var _v DVBCodeRate // out
	_v = DVBCodeRate(*valptr)
	return _v
}

// Frequency: frequency in Hz (Hertz).
func (c *CableDeliverySystemDescriptor) SetFrequency(frequency uint32) {
	valptr := &c.native.frequency
	*valptr = C.guint32(frequency)
}

// SymbolRate: symbol rate (in symbols per second).
func (c *CableDeliverySystemDescriptor) SetSymbolRate(symbolRate uint32) {
	valptr := &c.native.symbol_rate
	*valptr = C.guint32(symbolRate)
}

// ComponentDescriptor: instance of this type is always passed by reference.
type ComponentDescriptor struct {
	*componentDescriptor
}

// componentDescriptor is the struct that's finalized.
type componentDescriptor struct {
	native *C.GstMpegtsComponentDescriptor
}

func marshalComponentDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &ComponentDescriptor{&componentDescriptor{(*C.GstMpegtsComponentDescriptor)(b)}}, nil
}

func (c *ComponentDescriptor) StreamContent() byte {
	valptr := &c.native.stream_content
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (c *ComponentDescriptor) ComponentType() byte {
	valptr := &c.native.component_type
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (c *ComponentDescriptor) ComponentTag() byte {
	valptr := &c.native.component_tag
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (c *ComponentDescriptor) LanguageCode() string {
	valptr := &c.native.language_code
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

func (c *ComponentDescriptor) Text() string {
	valptr := &c.native.text
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

func (c *ComponentDescriptor) SetStreamContent(streamContent byte) {
	valptr := &c.native.stream_content
	*valptr = C.guint8(streamContent)
}

func (c *ComponentDescriptor) SetComponentType(componentType byte) {
	valptr := &c.native.component_type
	*valptr = C.guint8(componentType)
}

func (c *ComponentDescriptor) SetComponentTag(componentTag byte) {
	valptr := &c.native.component_tag
	*valptr = C.guint8(componentTag)
}

// Content: instance of this type is always passed by reference.
type Content struct {
	*content
}

// content is the struct that's finalized.
type content struct {
	native *C.GstMpegtsContent
}

func marshalContent(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Content{&content{(*C.GstMpegtsContent)(b)}}, nil
}

func (c *Content) ContentNibble1() ContentNibbleHi {
	valptr := &c.native.content_nibble_1
	var _v ContentNibbleHi // out
	_v = ContentNibbleHi(*valptr)
	return _v
}

func (c *Content) ContentNibble2() byte {
	valptr := &c.native.content_nibble_2
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (c *Content) UserByte() byte {
	valptr := &c.native.user_byte
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (c *Content) SetContentNibble2(contentNibble2 byte) {
	valptr := &c.native.content_nibble_2
	*valptr = C.guint8(contentNibble2)
}

func (c *Content) SetUserByte(userByte byte) {
	valptr := &c.native.user_byte
	*valptr = C.guint8(userByte)
}

// DVBLinkageDescriptor: instance of this type is always passed by reference.
type DVBLinkageDescriptor struct {
	*dvbLinkageDescriptor
}

// dvbLinkageDescriptor is the struct that's finalized.
type dvbLinkageDescriptor struct {
	native *C.GstMpegtsDVBLinkageDescriptor
}

func marshalDVBLinkageDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DVBLinkageDescriptor{&dvbLinkageDescriptor{(*C.GstMpegtsDVBLinkageDescriptor)(b)}}, nil
}

// TransportStreamID: transport id.
func (d *DVBLinkageDescriptor) TransportStreamID() uint16 {
	valptr := &d.native.transport_stream_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// OriginalNetworkID: original network id.
func (d *DVBLinkageDescriptor) OriginalNetworkID() uint16 {
	valptr := &d.native.original_network_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// ServiceID: service id.
func (d *DVBLinkageDescriptor) ServiceID() uint16 {
	valptr := &d.native.service_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// LinkageType: type which linkage_data has.
func (d *DVBLinkageDescriptor) LinkageType() DVBLinkageType {
	valptr := &d.native.linkage_type
	var _v DVBLinkageType // out
	_v = DVBLinkageType(*valptr)
	return _v
}

// PrivateDataLength: length for private_data_bytes.
func (d *DVBLinkageDescriptor) PrivateDataLength() byte {
	valptr := &d.native.private_data_length
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// PrivateDataBytes: additional data bytes.
func (d *DVBLinkageDescriptor) PrivateDataBytes() *byte {
	valptr := &d.native.private_data_bytes
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// TransportStreamID: transport id.
func (d *DVBLinkageDescriptor) SetTransportStreamID(transportStreamId uint16) {
	valptr := &d.native.transport_stream_id
	*valptr = C.guint16(transportStreamId)
}

// OriginalNetworkID: original network id.
func (d *DVBLinkageDescriptor) SetOriginalNetworkID(originalNetworkId uint16) {
	valptr := &d.native.original_network_id
	*valptr = C.guint16(originalNetworkId)
}

// ServiceID: service id.
func (d *DVBLinkageDescriptor) SetServiceID(serviceId uint16) {
	valptr := &d.native.service_id
	*valptr = C.guint16(serviceId)
}

// PrivateDataLength: length for private_data_bytes.
func (d *DVBLinkageDescriptor) SetPrivateDataLength(privateDataLength byte) {
	valptr := &d.native.private_data_length
	*valptr = C.guint8(privateDataLength)
}

// The function returns the following values:
//
//   - dvbLinkageEvent or NULL if an error happened.
func (desc *DVBLinkageDescriptor) Event() *DVBLinkageEvent {
	var _arg0 *C.GstMpegtsDVBLinkageDescriptor // out
	var _cret *C.GstMpegtsDVBLinkageEvent      // in

	_arg0 = (*C.GstMpegtsDVBLinkageDescriptor)(gextras.StructNative(unsafe.Pointer(desc)))

	_cret = C.gst_mpegts_dvb_linkage_descriptor_get_event(_arg0)
	runtime.KeepAlive(desc)

	var _dvbLinkageEvent *DVBLinkageEvent // out

	_dvbLinkageEvent = (*DVBLinkageEvent)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _dvbLinkageEvent
}

// The function returns the following values:
//
//   - dvbLinkageMobileHandOver or NULL if an error happened.
func (desc *DVBLinkageDescriptor) MobileHandOver() *DVBLinkageMobileHandOver {
	var _arg0 *C.GstMpegtsDVBLinkageDescriptor     // out
	var _cret *C.GstMpegtsDVBLinkageMobileHandOver // in

	_arg0 = (*C.GstMpegtsDVBLinkageDescriptor)(gextras.StructNative(unsafe.Pointer(desc)))

	_cret = C.gst_mpegts_dvb_linkage_descriptor_get_mobile_hand_over(_arg0)
	runtime.KeepAlive(desc)

	var _dvbLinkageMobileHandOver *DVBLinkageMobileHandOver // out

	_dvbLinkageMobileHandOver = (*DVBLinkageMobileHandOver)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _dvbLinkageMobileHandOver
}

// DVBLinkageEvent: instance of this type is always passed by reference.
type DVBLinkageEvent struct {
	*dvbLinkageEvent
}

// dvbLinkageEvent is the struct that's finalized.
type dvbLinkageEvent struct {
	native *C.GstMpegtsDVBLinkageEvent
}

func marshalDVBLinkageEvent(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DVBLinkageEvent{&dvbLinkageEvent{(*C.GstMpegtsDVBLinkageEvent)(b)}}, nil
}

// NewDVBLinkageEvent creates a new DVBLinkageEvent instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewDVBLinkageEvent(targetEventId uint16, targetListed, eventSimulcast bool) DVBLinkageEvent {
	var f0 C.guint16 // out
	f0 = C.guint16(targetEventId)
	var f1 C.gboolean // out
	if targetListed {
		f1 = C.TRUE
	}
	var f2 C.gboolean // out
	if eventSimulcast {
		f2 = C.TRUE
	}

	v := C.GstMpegtsDVBLinkageEvent{
		target_event_id: f0,
		target_listed:   f1,
		event_simulcast: f2,
	}

	return *(*DVBLinkageEvent)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

func (d *DVBLinkageEvent) TargetEventID() uint16 {
	valptr := &d.native.target_event_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (d *DVBLinkageEvent) TargetListed() bool {
	valptr := &d.native.target_listed
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (d *DVBLinkageEvent) EventSimulcast() bool {
	valptr := &d.native.event_simulcast
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (d *DVBLinkageEvent) SetTargetEventID(targetEventId uint16) {
	valptr := &d.native.target_event_id
	*valptr = C.guint16(targetEventId)
}

func (d *DVBLinkageEvent) SetTargetListed(targetListed bool) {
	valptr := &d.native.target_listed
	if targetListed {
		*valptr = C.TRUE
	}
}

func (d *DVBLinkageEvent) SetEventSimulcast(eventSimulcast bool) {
	valptr := &d.native.event_simulcast
	if eventSimulcast {
		*valptr = C.TRUE
	}
}

// DVBLinkageExtendedEvent: instance of this type is always passed by reference.
type DVBLinkageExtendedEvent struct {
	*dvbLinkageExtendedEvent
}

// dvbLinkageExtendedEvent is the struct that's finalized.
type dvbLinkageExtendedEvent struct {
	native *C.GstMpegtsDVBLinkageExtendedEvent
}

func marshalDVBLinkageExtendedEvent(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DVBLinkageExtendedEvent{&dvbLinkageExtendedEvent{(*C.GstMpegtsDVBLinkageExtendedEvent)(b)}}, nil
}

// NewDVBLinkageExtendedEvent creates a new DVBLinkageExtendedEvent instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewDVBLinkageExtendedEvent(targetEventId uint16, targetListed, eventSimulcast bool, linkType, targetIdType byte, originalNetworkIdFlag, serviceIdFlag bool, userDefinedId, targetTransportStreamId, targetOriginalNetworkId, targetServiceId uint16) DVBLinkageExtendedEvent {
	var f0 C.guint16 // out
	f0 = C.guint16(targetEventId)
	var f1 C.gboolean // out
	if targetListed {
		f1 = C.TRUE
	}
	var f2 C.gboolean // out
	if eventSimulcast {
		f2 = C.TRUE
	}
	var f3 C.guint8 // out
	f3 = C.guint8(linkType)
	var f4 C.guint8 // out
	f4 = C.guint8(targetIdType)
	var f5 C.gboolean // out
	if originalNetworkIdFlag {
		f5 = C.TRUE
	}
	var f6 C.gboolean // out
	if serviceIdFlag {
		f6 = C.TRUE
	}
	var f7 C.guint16 // out
	f7 = C.guint16(userDefinedId)
	var f8 C.guint16 // out
	f8 = C.guint16(targetTransportStreamId)
	var f9 C.guint16 // out
	f9 = C.guint16(targetOriginalNetworkId)
	var f10 C.guint16 // out
	f10 = C.guint16(targetServiceId)

	v := C.GstMpegtsDVBLinkageExtendedEvent{
		target_event_id:            f0,
		target_listed:              f1,
		event_simulcast:            f2,
		link_type:                  f3,
		target_id_type:             f4,
		original_network_id_flag:   f5,
		service_id_flag:            f6,
		user_defined_id:            f7,
		target_transport_stream_id: f8,
		target_original_network_id: f9,
		target_service_id:          f10,
	}

	return *(*DVBLinkageExtendedEvent)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

func (d *DVBLinkageExtendedEvent) TargetEventID() uint16 {
	valptr := &d.native.target_event_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (d *DVBLinkageExtendedEvent) TargetListed() bool {
	valptr := &d.native.target_listed
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (d *DVBLinkageExtendedEvent) EventSimulcast() bool {
	valptr := &d.native.event_simulcast
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (d *DVBLinkageExtendedEvent) LinkType() byte {
	valptr := &d.native.link_type
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (d *DVBLinkageExtendedEvent) TargetIDType() byte {
	valptr := &d.native.target_id_type
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (d *DVBLinkageExtendedEvent) OriginalNetworkIDFlag() bool {
	valptr := &d.native.original_network_id_flag
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (d *DVBLinkageExtendedEvent) ServiceIDFlag() bool {
	valptr := &d.native.service_id_flag
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (d *DVBLinkageExtendedEvent) UserDefinedID() uint16 {
	valptr := &d.native.user_defined_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (d *DVBLinkageExtendedEvent) TargetTransportStreamID() uint16 {
	valptr := &d.native.target_transport_stream_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (d *DVBLinkageExtendedEvent) TargetOriginalNetworkID() uint16 {
	valptr := &d.native.target_original_network_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (d *DVBLinkageExtendedEvent) TargetServiceID() uint16 {
	valptr := &d.native.target_service_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (d *DVBLinkageExtendedEvent) SetTargetEventID(targetEventId uint16) {
	valptr := &d.native.target_event_id
	*valptr = C.guint16(targetEventId)
}

func (d *DVBLinkageExtendedEvent) SetTargetListed(targetListed bool) {
	valptr := &d.native.target_listed
	if targetListed {
		*valptr = C.TRUE
	}
}

func (d *DVBLinkageExtendedEvent) SetEventSimulcast(eventSimulcast bool) {
	valptr := &d.native.event_simulcast
	if eventSimulcast {
		*valptr = C.TRUE
	}
}

func (d *DVBLinkageExtendedEvent) SetLinkType(linkType byte) {
	valptr := &d.native.link_type
	*valptr = C.guint8(linkType)
}

func (d *DVBLinkageExtendedEvent) SetTargetIDType(targetIdType byte) {
	valptr := &d.native.target_id_type
	*valptr = C.guint8(targetIdType)
}

func (d *DVBLinkageExtendedEvent) SetOriginalNetworkIDFlag(originalNetworkIdFlag bool) {
	valptr := &d.native.original_network_id_flag
	if originalNetworkIdFlag {
		*valptr = C.TRUE
	}
}

func (d *DVBLinkageExtendedEvent) SetServiceIDFlag(serviceIdFlag bool) {
	valptr := &d.native.service_id_flag
	if serviceIdFlag {
		*valptr = C.TRUE
	}
}

func (d *DVBLinkageExtendedEvent) SetUserDefinedID(userDefinedId uint16) {
	valptr := &d.native.user_defined_id
	*valptr = C.guint16(userDefinedId)
}

func (d *DVBLinkageExtendedEvent) SetTargetTransportStreamID(targetTransportStreamId uint16) {
	valptr := &d.native.target_transport_stream_id
	*valptr = C.guint16(targetTransportStreamId)
}

func (d *DVBLinkageExtendedEvent) SetTargetOriginalNetworkID(targetOriginalNetworkId uint16) {
	valptr := &d.native.target_original_network_id
	*valptr = C.guint16(targetOriginalNetworkId)
}

func (d *DVBLinkageExtendedEvent) SetTargetServiceID(targetServiceId uint16) {
	valptr := &d.native.target_service_id
	*valptr = C.guint16(targetServiceId)
}

// DVBLinkageMobileHandOver: instance of this type is always passed by
// reference.
type DVBLinkageMobileHandOver struct {
	*dvbLinkageMobileHandOver
}

// dvbLinkageMobileHandOver is the struct that's finalized.
type dvbLinkageMobileHandOver struct {
	native *C.GstMpegtsDVBLinkageMobileHandOver
}

func marshalDVBLinkageMobileHandOver(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DVBLinkageMobileHandOver{&dvbLinkageMobileHandOver{(*C.GstMpegtsDVBLinkageMobileHandOver)(b)}}, nil
}

func (d *DVBLinkageMobileHandOver) HandOverType() DVBLinkageHandOverType {
	valptr := &d.native.hand_over_type
	var _v DVBLinkageHandOverType // out
	_v = DVBLinkageHandOverType(*valptr)
	return _v
}

func (d *DVBLinkageMobileHandOver) OriginType() bool {
	valptr := &d.native.origin_type
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (d *DVBLinkageMobileHandOver) NetworkID() uint16 {
	valptr := &d.native.network_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (d *DVBLinkageMobileHandOver) InitialServiceID() uint16 {
	valptr := &d.native.initial_service_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (d *DVBLinkageMobileHandOver) SetOriginType(originType bool) {
	valptr := &d.native.origin_type
	if originType {
		*valptr = C.TRUE
	}
}

func (d *DVBLinkageMobileHandOver) SetNetworkID(networkId uint16) {
	valptr := &d.native.network_id
	*valptr = C.guint16(networkId)
}

func (d *DVBLinkageMobileHandOver) SetInitialServiceID(initialServiceId uint16) {
	valptr := &d.native.initial_service_id
	*valptr = C.guint16(initialServiceId)
}

// DVBParentalRatingItem: instance of this type is always passed by reference.
type DVBParentalRatingItem struct {
	*dvbParentalRatingItem
}

// dvbParentalRatingItem is the struct that's finalized.
type dvbParentalRatingItem struct {
	native *C.GstMpegtsDVBParentalRatingItem
}

func marshalDVBParentalRatingItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DVBParentalRatingItem{&dvbParentalRatingItem{(*C.GstMpegtsDVBParentalRatingItem)(b)}}, nil
}

func (d *DVBParentalRatingItem) CountryCode() string {
	valptr := &d.native.country_code
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

func (d *DVBParentalRatingItem) Rating() byte {
	valptr := &d.native.rating
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (d *DVBParentalRatingItem) SetRating(rating byte) {
	valptr := &d.native.rating
	*valptr = C.guint8(rating)
}

// DVBServiceListItem: instance of this type is always passed by reference.
type DVBServiceListItem struct {
	*dvbServiceListItem
}

// dvbServiceListItem is the struct that's finalized.
type dvbServiceListItem struct {
	native *C.GstMpegtsDVBServiceListItem
}

func marshalDVBServiceListItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DVBServiceListItem{&dvbServiceListItem{(*C.GstMpegtsDVBServiceListItem)(b)}}, nil
}

// ServiceID: id of a service.
func (d *DVBServiceListItem) ServiceID() uint16 {
	valptr := &d.native.service_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Type: type of a service.
func (d *DVBServiceListItem) Type() DVBServiceType {
	valptr := &d.native._type
	var _v DVBServiceType // out
	_v = DVBServiceType(*valptr)
	return _v
}

// ServiceID: id of a service.
func (d *DVBServiceListItem) SetServiceID(serviceId uint16) {
	valptr := &d.native.service_id
	*valptr = C.guint16(serviceId)
}

// DataBroadcastDescriptor: instance of this type is always passed by reference.
type DataBroadcastDescriptor struct {
	*dataBroadcastDescriptor
}

// dataBroadcastDescriptor is the struct that's finalized.
type dataBroadcastDescriptor struct {
	native *C.GstMpegtsDataBroadcastDescriptor
}

func marshalDataBroadcastDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DataBroadcastDescriptor{&dataBroadcastDescriptor{(*C.GstMpegtsDataBroadcastDescriptor)(b)}}, nil
}

// DataBroadcastID: data broadcast id.
func (d *DataBroadcastDescriptor) DataBroadcastID() uint16 {
	valptr := &d.native.data_broadcast_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// ComponentTag: component tag.
func (d *DataBroadcastDescriptor) ComponentTag() byte {
	valptr := &d.native.component_tag
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

func (d *DataBroadcastDescriptor) Length() byte {
	valptr := &d.native.length
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// SelectorBytes: selector byte field.
func (d *DataBroadcastDescriptor) SelectorBytes() *byte {
	valptr := &d.native.selector_bytes
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// LanguageCode: language of text.
func (d *DataBroadcastDescriptor) LanguageCode() string {
	valptr := &d.native.language_code
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Text: description of data broadcast.
func (d *DataBroadcastDescriptor) Text() string {
	valptr := &d.native.text
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// DataBroadcastID: data broadcast id.
func (d *DataBroadcastDescriptor) SetDataBroadcastID(dataBroadcastId uint16) {
	valptr := &d.native.data_broadcast_id
	*valptr = C.guint16(dataBroadcastId)
}

// ComponentTag: component tag.
func (d *DataBroadcastDescriptor) SetComponentTag(componentTag byte) {
	valptr := &d.native.component_tag
	*valptr = C.guint8(componentTag)
}

func (d *DataBroadcastDescriptor) SetLength(length byte) {
	valptr := &d.native.length
	*valptr = C.guint8(length)
}

// Descriptor: these are the base descriptor types and methods.
//
// For more details, refer to the ITU H.222.0 or ISO/IEC 13818-1 specifications
// and other specifications mentioned in the documentation.
//
// An instance of this type is always passed by reference.
type Descriptor struct {
	*descriptor
}

// descriptor is the struct that's finalized.
type descriptor struct {
	native *C.GstMpegtsDescriptor
}

func marshalDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Descriptor{&descriptor{(*C.GstMpegtsDescriptor)(b)}}, nil
}

// Tag: type of descriptor.
func (d *Descriptor) Tag() byte {
	valptr := &d.native.tag
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// TagExtension: extended type (if descriptor_tag is 0x7f).
func (d *Descriptor) TagExtension() byte {
	valptr := &d.native.tag_extension
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Length: length of the descriptor content (excluding tag/length field).
func (d *Descriptor) Length() byte {
	valptr := &d.native.length
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Data: full descriptor data (including tag, extension, length). The first two
// bytes are the tag and length.
func (d *Descriptor) Data() *byte {
	valptr := &d.native.data
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// Tag: type of descriptor.
func (d *Descriptor) SetTag(tag byte) {
	valptr := &d.native.tag
	*valptr = C.guint8(tag)
}

// TagExtension: extended type (if descriptor_tag is 0x7f).
func (d *Descriptor) SetTagExtension(tagExtension byte) {
	valptr := &d.native.tag_extension
	*valptr = C.guint8(tagExtension)
}

// Length: length of the descriptor content (excluding tag/length field).
func (d *Descriptor) SetLength(length byte) {
	valptr := &d.native.length
	*valptr = C.guint8(length)
}

// ParseCa extracts the Conditional Access information from descriptor.
//
// The function returns the following values:
//
//   - caSystemId: type of CA system used.
//   - caPid: PID containing ECM or EMM data.
//   - privateData (optional): private data.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseCa() (caSystemId uint16, caPid uint16, privateData []byte, ok bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 C.guint16              // in
	var _arg2 C.guint16              // in
	var _arg3 *C.guint8              // in
	var _arg4 C.gsize                // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_ca(_arg0, &_arg1, &_arg2, &_arg3, &_arg4)
	runtime.KeepAlive(descriptor)

	var _caSystemId uint16  // out
	var _caPid uint16       // out
	var _privateData []byte // out
	var _ok bool            // out

	_caSystemId = uint16(_arg1)
	_caPid = uint16(_arg2)
	if _arg3 != nil {
		defer C.free(unsafe.Pointer(_arg3))
		_privateData = make([]byte, _arg4)
		copy(_privateData, unsafe.Slice((*byte)(unsafe.Pointer(_arg3)), _arg4))
	}
	if _cret != 0 {
		_ok = true
	}

	return _caSystemId, _caPid, _privateData, _ok
}

// ParseCableDeliverySystem extracts the cable delivery system information from
// descriptor.
//
// The function returns the following values:
//
//   - res to fill.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseCableDeliverySystem() (*CableDeliverySystemDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor                   // out
	var _arg1 C.GstMpegtsCableDeliverySystemDescriptor // in
	var _cret C.gboolean                               // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_cable_delivery_system(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *CableDeliverySystemDescriptor // out
	var _ok bool                            // out

	_res = (*CableDeliverySystemDescriptor)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseDvbBouquetName extracts the bouquet name from descriptor.
//
// The function returns the following values:
//
//   - bouquetName (optional): bouquet name.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseDvbBouquetName() (string, bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 *C.gchar               // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_bouquet_name(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _bouquetName string // out
	var _ok bool            // out

	if _arg1 != nil {
		_bouquetName = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if _cret != 0 {
		_ok = true
	}

	return _bouquetName, _ok
}

// ParseDvbComponent extracts the DVB component information from descriptor.
//
// The function returns the following values:
//
//   - res to fill.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseDvbComponent() (*ComponentDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor          // out
	var _arg1 *C.GstMpegtsComponentDescriptor // in
	var _cret C.gboolean                      // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_component(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *ComponentDescriptor // out
	var _ok bool                  // out

	_res = (*ComponentDescriptor)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_res)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseDvbDataBroadcast parses out the data broadcast from the descriptor.
//
// The function returns the following values:
//
//   - res: MpegtsDataBroadcastDescriptor.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseDvbDataBroadcast() (*DataBroadcastDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor              // out
	var _arg1 *C.GstMpegtsDataBroadcastDescriptor // in
	var _cret C.gboolean                          // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_data_broadcast(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *DataBroadcastDescriptor // out
	var _ok bool                      // out

	_res = (*DataBroadcastDescriptor)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_res)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_dvb_data_broadcast_descriptor_free((*C.GstMpegtsDataBroadcastDescriptor)(intern.C))
		},
	)
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseDvbDataBroadcastID parses out the data broadcast id from the descriptor.
//
// The function returns the following values:
//
//   - dataBroadcastId: data broadcast id.
//   - idSelectorBytes: selector bytes, if present.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseDvbDataBroadcastID() (uint16, []byte, bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 C.guint16              // in
	var _arg2 *C.guint8              // in
	var _arg3 C.guint8               // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_data_broadcast_id(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(descriptor)

	var _dataBroadcastId uint16 // out
	var _idSelectorBytes []byte // out
	var _ok bool                // out

	_dataBroadcastId = uint16(_arg1)
	defer C.free(unsafe.Pointer(_arg2))
	_idSelectorBytes = make([]byte, _arg3)
	copy(_idSelectorBytes, unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3))
	if _cret != 0 {
		_ok = true
	}

	return _dataBroadcastId, _idSelectorBytes, _ok
}

// ParseDvbExtendedEvent extracts the DVB extended event information from
// descriptor.
//
// The function returns the following values:
//
//   - res to fill.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseDvbExtendedEvent() (*ExtendedEventDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor              // out
	var _arg1 *C.GstMpegtsExtendedEventDescriptor // in
	var _cret C.gboolean                          // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_extended_event(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *ExtendedEventDescriptor // out
	var _ok bool                      // out

	_res = (*ExtendedEventDescriptor)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_res)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_extended_event_descriptor_free((*C.GstMpegtsExtendedEventDescriptor)(intern.C))
		},
	)
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseDvbLinkage extracts the DVB linkage information from descriptor.
//
// The function returns the following values:
//
//   - res to fill.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseDvbLinkage() (*DVBLinkageDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor           // out
	var _arg1 *C.GstMpegtsDVBLinkageDescriptor // in
	var _cret C.gboolean                       // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_linkage(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *DVBLinkageDescriptor // out
	var _ok bool                   // out

	_res = (*DVBLinkageDescriptor)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_res)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_dvb_linkage_descriptor_free((*C.GstMpegtsDVBLinkageDescriptor)(intern.C))
		},
	)
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseDvbNetworkName parses out the dvb network name from the descriptor:.
//
// The function returns the following values:
//
//   - name: extracted name.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseDvbNetworkName() (string, bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 *C.gchar               // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_network_name(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _name string // out
	var _ok bool     // out

	_name = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	defer C.free(unsafe.Pointer(_arg1))
	if _cret != 0 {
		_ok = true
	}

	return _name, _ok
}

// ParseDvbPrivateDataSpecifier parses out the private data specifier from the
// descriptor.
//
// The function returns the following values:
//
//   - privateDataSpecifier: private data specifier id registered by
//     http://www.dvbservices.com/.
//   - privateData (optional): additional data or NULL.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseDvbPrivateDataSpecifier() (uint32, []byte, bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 C.guint32              // in
	var _arg2 *C.guint8              // in
	var _arg3 C.guint8               // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_private_data_specifier(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(descriptor)

	var _privateDataSpecifier uint32 // out
	var _privateData []byte          // out
	var _ok bool                     // out

	_privateDataSpecifier = uint32(_arg1)
	if _arg2 != nil {
		defer C.free(unsafe.Pointer(_arg2))
		_privateData = make([]byte, _arg3)
		copy(_privateData, unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3))
	}
	if _cret != 0 {
		_ok = true
	}

	return _privateDataSpecifier, _privateData, _ok
}

// ParseDvbScrambling parses out the scrambling mode from the descriptor.
//
// The function returns the following values:
//
//   - scramblingMode: this 8-bit field identifies the selected mode of the
//     scrambling algorithm (MpegtsDVBScramblingModeType). The technical details
//     of the scrambling algorithm are available only to bona-fide users upon
//     signature of a Non Disclosure Agreement (NDA) administered by the DVB
//     Common Scrambling Algorithm Custodian.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseDvbScrambling() (DVBScramblingModeType, bool) {
	var _arg0 *C.GstMpegtsDescriptor           // out
	var _arg1 C.GstMpegtsDVBScramblingModeType // in
	var _cret C.gboolean                       // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_scrambling(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _scramblingMode DVBScramblingModeType // out
	var _ok bool                              // out

	_scramblingMode = DVBScramblingModeType(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _scramblingMode, _ok
}

// ParseDvbService extracts the dvb service information from descriptor.
//
// The function returns the following values:
//
//   - serviceType (optional): service type.
//   - serviceName (optional): service name.
//   - providerName (optional): provider name.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseDvbService() (serviceType DVBServiceType, serviceName string, providerName string, ok bool) {
	var _arg0 *C.GstMpegtsDescriptor    // out
	var _arg1 C.GstMpegtsDVBServiceType // in
	var _arg2 *C.gchar                  // in
	var _arg3 *C.gchar                  // in
	var _cret C.gboolean                // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_service(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(descriptor)

	var _serviceType DVBServiceType // out
	var _serviceName string         // out
	var _providerName string        // out
	var _ok bool                    // out

	_serviceType = DVBServiceType(_arg1)
	if _arg2 != nil {
		_serviceName = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if _arg3 != nil {
		_providerName = C.GoString((*C.gchar)(unsafe.Pointer(_arg3)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	if _cret != 0 {
		_ok = true
	}

	return _serviceType, _serviceName, _providerName, _ok
}

// ParseDvbShortEvent extracts the DVB short event information from descriptor.
//
// The function returns the following values:
//
//   - languageCode (optional): language code.
//   - eventName (optional): event name.
//   - text (optional): event text.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseDvbShortEvent() (languageCode string, eventName string, text string, ok bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 *C.gchar               // in
	var _arg2 *C.gchar               // in
	var _arg3 *C.gchar               // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_short_event(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(descriptor)

	var _languageCode string // out
	var _eventName string    // out
	var _text string         // out
	var _ok bool             // out

	if _arg1 != nil {
		_languageCode = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if _arg2 != nil {
		_eventName = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if _arg3 != nil {
		_text = C.GoString((*C.gchar)(unsafe.Pointer(_arg3)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	if _cret != 0 {
		_ok = true
	}

	return _languageCode, _eventName, _text, _ok
}

// ParseDvbStreamIdentifier extracts the component tag from descriptor.
//
// The function returns the following values:
//
//   - componentTag: component tag.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseDvbStreamIdentifier() (byte, bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 C.guint8               // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_stream_identifier(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _componentTag byte // out
	var _ok bool           // out

	_componentTag = byte(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _componentTag, _ok
}

// ParseDvbStuffing parses out the stuffing bytes from the descriptor.
//
// The function returns the following values:
//
//   - stuffingBytes: stuffing bytes.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseDvbStuffing() (*byte, bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 *C.guint8              // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_stuffing(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _stuffingBytes *byte // out
	var _ok bool             // out

	_stuffingBytes = (*byte)(unsafe.Pointer(_arg1))
	if _cret != 0 {
		_ok = true
	}

	return _stuffingBytes, _ok
}

// ParseDvbSubtitlingIdx extracts the DVB subtitling informatio from specific
// table id in descriptor.
//
// Note: Use #gst_tag_get_language_code if you want to get the the ISO 639-1
// language code from the returned ISO 639-2 one.
//
// The function takes the following parameters:
//
//   - idx: table id of the entry to parse.
//
// The function returns the following values:
//
//   - lang: language code.
//   - typ (optional): type of subtitling.
//   - compositionPageId (optional): composition page id.
//   - ancillaryPageId (optional): ancillary page id.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseDvbSubtitlingIdx(idx uint) (lang string, typ byte, compositionPageId uint16, ancillaryPageId uint16, ok bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 C.guint                // out
	var _arg2 *C.gchar               // in
	var _arg3 C.guint8               // in
	var _arg4 C.guint16              // in
	var _arg5 C.guint16              // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mpegts_descriptor_parse_dvb_subtitling_idx(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5)
	runtime.KeepAlive(descriptor)
	runtime.KeepAlive(idx)

	var _lang string              // out
	var _typ byte                 // out
	var _compositionPageId uint16 // out
	var _ancillaryPageId uint16   // out
	var _ok bool                  // out

	_lang = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	defer C.free(unsafe.Pointer(_arg2))
	_typ = byte(_arg3)
	_compositionPageId = uint16(_arg4)
	_ancillaryPageId = uint16(_arg5)
	if _cret != 0 {
		_ok = true
	}

	return _lang, _typ, _compositionPageId, _ancillaryPageId, _ok
}

// The function returns the following values:
//
//   - guint: number of entries in descriptor.
func (descriptor *Descriptor) ParseDvbSubtitlingNb() uint {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _cret C.guint                // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_subtitling_nb(_arg0)
	runtime.KeepAlive(descriptor)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ParseDvbT2DeliverySystem parses out the DVB-T2 delivery system from the
// descriptor.
//
// The function returns the following values:
//
//   - res: MpegtsT2DeliverySystemDescriptor.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseDvbT2DeliverySystem() (*T2DeliverySystemDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor                 // out
	var _arg1 *C.GstMpegtsT2DeliverySystemDescriptor // in
	var _cret C.gboolean                             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_t2_delivery_system(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *T2DeliverySystemDescriptor // out
	var _ok bool                         // out

	_res = (*T2DeliverySystemDescriptor)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_res)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_t2_delivery_system_descriptor_free((*C.GstMpegtsT2DeliverySystemDescriptor)(intern.C))
		},
	)
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseDvbTeletextIdx parses teletext number idx in the descriptor. The
// language is in ISO639 format.
//
// The function takes the following parameters:
//
//   - idx: id of the teletext to get.
//
// The function returns the following values:
//
//   - languageCode (optional): null-terminated string.
//   - teletextType (optional): MpegtsDVBTeletextType.
//   - magazineNumber (optional)
//   - pageNumber (optional)
//   - ok: FALSE on out-of-bounds and errors.
func (descriptor *Descriptor) ParseDvbTeletextIdx(idx uint) (languageCode string, teletextType DVBTeletextType, magazineNumber byte, pageNumber byte, ok bool) {
	var _arg0 *C.GstMpegtsDescriptor     // out
	var _arg1 C.guint                    // out
	var _arg2 *C.gchar                   // in
	var _arg3 C.GstMpegtsDVBTeletextType // in
	var _arg4 C.guint8                   // in
	var _arg5 C.guint8                   // in
	var _cret C.gboolean                 // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mpegts_descriptor_parse_dvb_teletext_idx(_arg0, _arg1, &_arg2, &_arg3, &_arg4, &_arg5)
	runtime.KeepAlive(descriptor)
	runtime.KeepAlive(idx)

	var _languageCode string          // out
	var _teletextType DVBTeletextType // out
	var _magazineNumber byte          // out
	var _pageNumber byte              // out
	var _ok bool                      // out

	if _arg2 != nil {
		_languageCode = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	_teletextType = DVBTeletextType(_arg3)
	_magazineNumber = byte(_arg4)
	_pageNumber = byte(_arg5)
	if _cret != 0 {
		_ok = true
	}

	return _languageCode, _teletextType, _magazineNumber, _pageNumber, _ok
}

// ParseDvbTeletextNb: find the number of teletext entries in descriptor.
//
// The function returns the following values:
//
//   - guint: number of teletext entries.
func (descriptor *Descriptor) ParseDvbTeletextNb() uint {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _cret C.guint                // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_dvb_teletext_nb(_arg0)
	runtime.KeepAlive(descriptor)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ParseISO639Language extracts the iso 639-2 language information from
// descriptor.
//
// Note: Use #gst_tag_get_language_code if you want to get the the ISO 639-1
// language code from the returned ISO 639-2 one.
//
// The function returns the following values:
//
//   - res to fill.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseISO639Language() (*ISO639LanguageDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor               // out
	var _arg1 *C.GstMpegtsISO639LanguageDescriptor // in
	var _cret C.gboolean                           // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_iso_639_language(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *ISO639LanguageDescriptor // out
	var _ok bool                       // out

	_res = (*ISO639LanguageDescriptor)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_res)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseISO639LanguageIdx extracts the iso 639-2 language information from
// specific table id in descriptor.
//
// Note: Use #gst_tag_get_language_code if you want to get the the ISO 639-1
// language code from the returned ISO 639-2 one.
//
// The function takes the following parameters:
//
//   - idx: table id of the language to parse.
//
// The function returns the following values:
//
//   - lang: 4-byte gchar array to hold the language code.
//   - audioType (optional) to set.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseISO639LanguageIdx(idx uint) (string, ISO639AudioType, bool) {
	var _arg0 *C.GstMpegtsDescriptor     // out
	var _arg1 C.guint                    // out
	var _arg2 *C.gchar                   // in
	var _arg3 C.GstMpegtsIso639AudioType // in
	var _cret C.gboolean                 // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mpegts_descriptor_parse_iso_639_language_idx(_arg0, _arg1, &_arg2, &_arg3)
	runtime.KeepAlive(descriptor)
	runtime.KeepAlive(idx)

	var _lang string               // out
	var _audioType ISO639AudioType // out
	var _ok bool                   // out

	_lang = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	defer C.free(unsafe.Pointer(_arg2))
	_audioType = ISO639AudioType(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _lang, _audioType, _ok
}

// The function returns the following values:
//
//   - guint: number of languages in descriptor.
func (descriptor *Descriptor) ParseISO639LanguageNb() uint {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _cret C.guint                // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_iso_639_language_nb(_arg0)
	runtime.KeepAlive(descriptor)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ParseLogicalChannel extracts the logical channels from descriptor.
//
// The function returns the following values:
//
//   - res to fill.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseLogicalChannel() (*LogicalChannelDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor              // out
	var _arg1 C.GstMpegtsLogicalChannelDescriptor // in
	var _cret C.gboolean                          // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_logical_channel(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *LogicalChannelDescriptor // out
	var _ok bool                       // out

	_res = (*LogicalChannelDescriptor)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseMetadata parses out the metadata descriptor from the descriptor.
//
// See ISO/IEC 13818-1:2018 Section 2.6.60 and 2.6.61 for details.
// metadata_application_format is provided in Table 2-82. metadata_format is
// provided in Table 2-85.
//
// The function returns the following values:
//
//   - res: MpegtsMetadataDescriptor.
//   - ok: TRUE if the parsing worked correctly, else FALSE.
func (descriptor *Descriptor) ParseMetadata() (*MetadataDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor         // out
	var _arg1 *C.GstMpegtsMetadataDescriptor // in
	var _cret C.gboolean                     // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_metadata(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *MetadataDescriptor // out
	var _ok bool                 // out

	_res = (*MetadataDescriptor)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_res)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseMetadataStd extracts the metadata STD descriptor from descriptor.
//
// See ISO/IEC 13818-1:2018 Section 2.6.62 and 2.6.63 for details.
//
// The function takes the following parameters:
//
//   - metadataInputLeakRate
//   - metadataBufferSize
//   - metadataOutputLeakRate
//
// The function returns the following values:
//
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseMetadataStd(metadataInputLeakRate *uint32, metadataBufferSize *uint32, metadataOutputLeakRate *uint32) bool {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 *C.guint32             // out
	var _arg2 *C.guint32             // out
	var _arg3 *C.guint32             // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))
	_arg1 = (*C.guint32)(unsafe.Pointer(metadataInputLeakRate))
	_arg2 = (*C.guint32)(unsafe.Pointer(metadataBufferSize))
	_arg3 = (*C.guint32)(unsafe.Pointer(metadataOutputLeakRate))

	_cret = C.gst_mpegts_descriptor_parse_metadata_std(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(descriptor)
	runtime.KeepAlive(metadataInputLeakRate)
	runtime.KeepAlive(metadataBufferSize)
	runtime.KeepAlive(metadataOutputLeakRate)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ParseRegistration extracts the Registration information from descriptor.
//
// The function returns the following values:
//
//   - registrationId: registration ID (in host endiannes).
//   - additionalInfo (optional): additional information.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseRegistration() (uint32, []byte, bool) {
	var _arg0 *C.GstMpegtsDescriptor // out
	var _arg1 C.guint32              // in
	var _arg2 *C.guint8              // in
	var _arg3 C.gsize                // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_registration(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(descriptor)

	var _registrationId uint32 // out
	var _additionalInfo []byte // out
	var _ok bool               // out

	_registrationId = uint32(_arg1)
	if _arg2 != nil {
		defer C.free(unsafe.Pointer(_arg2))
		_additionalInfo = make([]byte, _arg3)
		copy(_additionalInfo, unsafe.Slice((*byte)(unsafe.Pointer(_arg2)), _arg3))
	}
	if _cret != 0 {
		_ok = true
	}

	return _registrationId, _additionalInfo, _ok
}

// ParseSatelliteDeliverySystem extracts the satellite delivery system
// information from descriptor.
//
// The function returns the following values:
//
//   - res to fill.
//   - ok: TRUE if parsing succeeded, else FALSE.
func (descriptor *Descriptor) ParseSatelliteDeliverySystem() (*SatelliteDeliverySystemDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor                       // out
	var _arg1 C.GstMpegtsSatelliteDeliverySystemDescriptor // in
	var _cret C.gboolean                                   // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_satellite_delivery_system(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *SatelliteDeliverySystemDescriptor // out
	var _ok bool                                // out

	_res = (*SatelliteDeliverySystemDescriptor)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// ParseTerrestrialDeliverySystem parses out the terrestrial delivery system
// from the descriptor.
//
// The function returns the following values:
//
//   - res: MpegtsTerrestrialDeliverySystemDescriptor.
//   - ok: TRUE if the parsing happened correctly, else FALSE.
func (descriptor *Descriptor) ParseTerrestrialDeliverySystem() (*TerrestrialDeliverySystemDescriptor, bool) {
	var _arg0 *C.GstMpegtsDescriptor                         // out
	var _arg1 C.GstMpegtsTerrestrialDeliverySystemDescriptor // in
	var _cret C.gboolean                                     // in

	_arg0 = (*C.GstMpegtsDescriptor)(gextras.StructNative(unsafe.Pointer(descriptor)))

	_cret = C.gst_mpegts_descriptor_parse_terrestrial_delivery_system(_arg0, &_arg1)
	runtime.KeepAlive(descriptor)

	var _res *TerrestrialDeliverySystemDescriptor // out
	var _ok bool                                  // out

	_res = (*TerrestrialDeliverySystemDescriptor)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	if _cret != 0 {
		_ok = true
	}

	return _res, _ok
}

// DescriptorFromCustom creates a MpegtsDescriptor with custom tag and data.
//
// The function takes the following parameters:
//
//   - tag: descriptor tag.
//   - data: descriptor data (after tag and length field).
//
// The function returns the following values:
//
//   - descriptor: MpegtsDescriptor.
func DescriptorFromCustom(tag byte, data []byte) *Descriptor {
	var _arg1 C.guint8  // out
	var _arg2 *C.guint8 // out
	var _arg3 C.gsize
	var _cret *C.GstMpegtsDescriptor // in

	_arg1 = C.guint8(tag)
	_arg3 = (C.gsize)(len(data))
	if len(data) > 0 {
		_arg2 = (*C.guint8)(unsafe.Pointer(&data[0]))
	}

	_cret = C.gst_mpegts_descriptor_from_custom(_arg1, _arg2, _arg3)
	runtime.KeepAlive(tag)
	runtime.KeepAlive(data)

	var _descriptor *Descriptor // out

	_descriptor = (*Descriptor)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_descriptor)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_descriptor_free((*C.GstMpegtsDescriptor)(intern.C))
		},
	)

	return _descriptor
}

// DescriptorFromCustomWithExtension creates a MpegtsDescriptor with custom tag,
// tag_extension and data.
//
// The function takes the following parameters:
//
//   - tag: descriptor tag.
//   - tagExtension: descriptor tag extension.
//   - data: descriptor data (after tag and length field).
//
// The function returns the following values:
//
//   - descriptor: MpegtsDescriptor.
func DescriptorFromCustomWithExtension(tag, tagExtension byte, data []byte) *Descriptor {
	var _arg1 C.guint8  // out
	var _arg2 C.guint8  // out
	var _arg3 *C.guint8 // out
	var _arg4 C.gsize
	var _cret *C.GstMpegtsDescriptor // in

	_arg1 = C.guint8(tag)
	_arg2 = C.guint8(tagExtension)
	_arg4 = (C.gsize)(len(data))
	if len(data) > 0 {
		_arg3 = (*C.guint8)(unsafe.Pointer(&data[0]))
	}

	_cret = C.gst_mpegts_descriptor_from_custom_with_extension(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(tag)
	runtime.KeepAlive(tagExtension)
	runtime.KeepAlive(data)

	var _descriptor *Descriptor // out

	_descriptor = (*Descriptor)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_descriptor)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_descriptor_free((*C.GstMpegtsDescriptor)(intern.C))
		},
	)

	return _descriptor
}

// DescriptorFromDvbNetworkName creates a MpegtsDescriptor to be a
// GST_MTS_DESC_DVB_NETWORK_NAME, with the network name name. The data field of
// the MpegtsDescriptor will be allocated, and transferred to the caller.
//
// The function takes the following parameters:
//
//   - name: network name to set.
//
// The function returns the following values:
//
//   - descriptor or NULL on fail.
func DescriptorFromDvbNetworkName(name string) *Descriptor {
	var _arg1 *C.gchar               // out
	var _cret *C.GstMpegtsDescriptor // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_mpegts_descriptor_from_dvb_network_name(_arg1)
	runtime.KeepAlive(name)

	var _descriptor *Descriptor // out

	_descriptor = (*Descriptor)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_descriptor)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_descriptor_free((*C.GstMpegtsDescriptor)(intern.C))
		},
	)

	return _descriptor
}

// DescriptorFromDvbService fills a MpegtsDescriptor to be a
// GST_MTS_DESC_DVB_SERVICE. The data field of the MpegtsDescriptor will be
// allocated, and transferred to the caller.
//
// The function takes the following parameters:
//
//   - serviceType: service type defined as a MpegtsDVBServiceType.
//   - serviceName (optional): name of the service.
//   - serviceProvider (optional): name of the service provider.
//
// The function returns the following values:
//
//   - descriptor or NULL on fail.
func DescriptorFromDvbService(serviceType DVBServiceType, serviceName, serviceProvider string) *Descriptor {
	var _arg1 C.GstMpegtsDVBServiceType // out
	var _arg2 *C.gchar                  // out
	var _arg3 *C.gchar                  // out
	var _cret *C.GstMpegtsDescriptor    // in

	_arg1 = C.GstMpegtsDVBServiceType(serviceType)
	if serviceName != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(serviceName)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if serviceProvider != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(serviceProvider)))
		defer C.free(unsafe.Pointer(_arg3))
	}

	_cret = C.gst_mpegts_descriptor_from_dvb_service(_arg1, _arg2, _arg3)
	runtime.KeepAlive(serviceType)
	runtime.KeepAlive(serviceName)
	runtime.KeepAlive(serviceProvider)

	var _descriptor *Descriptor // out

	_descriptor = (*Descriptor)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_descriptor)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_descriptor_free((*C.GstMpegtsDescriptor)(intern.C))
		},
	)

	return _descriptor
}

// The function takes the following parameters:
//
//   - lang: string containing the ISO639 language.
//   - typ: subtitling type.
//   - composition page id.
//   - ancillary page id.
func DescriptorFromDvbSubtitling(lang string, typ byte, composition, ancillary uint16) *Descriptor {
	var _arg1 *C.gchar               // out
	var _arg2 C.guint8               // out
	var _arg3 C.guint16              // out
	var _arg4 C.guint16              // out
	var _cret *C.GstMpegtsDescriptor // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(lang)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint8(typ)
	_arg3 = C.guint16(composition)
	_arg4 = C.guint16(ancillary)

	_cret = C.gst_mpegts_descriptor_from_dvb_subtitling(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(lang)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(composition)
	runtime.KeepAlive(ancillary)

	var _descriptor *Descriptor // out

	_descriptor = (*Descriptor)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_descriptor)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_descriptor_free((*C.GstMpegtsDescriptor)(intern.C))
		},
	)

	return _descriptor
}

// DescriptorFromISO639Language creates a GST_MTS_DESC_ISO_639_LANGUAGE
// MpegtsDescriptor with a single language.
//
// The function takes the following parameters:
//
//   - language: ISO-639-2 language 3-char code.
//
// The function returns the following values:
//
//   - descriptor NULL on failure.
func DescriptorFromISO639Language(language string) *Descriptor {
	var _arg1 *C.gchar               // out
	var _cret *C.GstMpegtsDescriptor // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(language)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_mpegts_descriptor_from_iso_639_language(_arg1)
	runtime.KeepAlive(language)

	var _descriptor *Descriptor // out

	_descriptor = (*Descriptor)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_descriptor)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_descriptor_free((*C.GstMpegtsDescriptor)(intern.C))
		},
	)

	return _descriptor
}

// DescriptorFromRegistration creates a GST_MTS_DESC_REGISTRATION
// MpegtsDescriptor.
//
// The function takes the following parameters:
//
//   - formatIdentifier: 4 character format identifier string.
//   - additionalInfo (optional): pointer to optional additional info.
//
// The function returns the following values:
//
//   - descriptor NULL on failure.
func DescriptorFromRegistration(formatIdentifier string, additionalInfo []byte) *Descriptor {
	var _arg1 *C.gchar  // out
	var _arg2 *C.guint8 // out
	var _arg3 C.gsize
	var _cret *C.GstMpegtsDescriptor // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(formatIdentifier)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = (C.gsize)(len(additionalInfo))
	if len(additionalInfo) > 0 {
		_arg2 = (*C.guint8)(unsafe.Pointer(&additionalInfo[0]))
	}

	_cret = C.gst_mpegts_descriptor_from_registration(_arg1, _arg2, _arg3)
	runtime.KeepAlive(formatIdentifier)
	runtime.KeepAlive(additionalInfo)

	var _descriptor *Descriptor // out

	_descriptor = (*Descriptor)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_descriptor)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mpegts_descriptor_free((*C.GstMpegtsDescriptor)(intern.C))
		},
	)

	return _descriptor
}

func DescriptorParseAudioPreselectionDump(source *AudioPreselectionDescriptor) {
	var _arg1 *C.GstMpegtsAudioPreselectionDescriptor // out

	_arg1 = (*C.GstMpegtsAudioPreselectionDescriptor)(gextras.StructNative(unsafe.Pointer(source)))

	C.gst_mpegts_descriptor_parse_audio_preselection_dump(_arg1)
	runtime.KeepAlive(source)
}

// DvbMultilingualBouquetNameItem: multilingual bouquet name entry
//
// An instance of this type is always passed by reference.
type DvbMultilingualBouquetNameItem struct {
	*dvbMultilingualBouquetNameItem
}

// dvbMultilingualBouquetNameItem is the struct that's finalized.
type dvbMultilingualBouquetNameItem struct {
	native *C.GstMpegtsDvbMultilingualBouquetNameItem
}

func marshalDvbMultilingualBouquetNameItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DvbMultilingualBouquetNameItem{&dvbMultilingualBouquetNameItem{(*C.GstMpegtsDvbMultilingualBouquetNameItem)(b)}}, nil
}

// LanguageCode: ISO 639 language code.
func (d *DvbMultilingualBouquetNameItem) LanguageCode() string {
	valptr := &d.native.language_code
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// BouquetName: bouquet name.
func (d *DvbMultilingualBouquetNameItem) BouquetName() string {
	valptr := &d.native.bouquet_name
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// DvbMultilingualComponentItem: instance of this type is always passed by
// reference.
type DvbMultilingualComponentItem struct {
	*dvbMultilingualComponentItem
}

// dvbMultilingualComponentItem is the struct that's finalized.
type dvbMultilingualComponentItem struct {
	native *C.GstMpegtsDvbMultilingualComponentItem
}

func marshalDvbMultilingualComponentItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DvbMultilingualComponentItem{&dvbMultilingualComponentItem{(*C.GstMpegtsDvbMultilingualComponentItem)(b)}}, nil
}

// LanguageCode: ISO 639 language code.
func (d *DvbMultilingualComponentItem) LanguageCode() string {
	valptr := &d.native.language_code
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Description: component description.
func (d *DvbMultilingualComponentItem) Description() string {
	valptr := &d.native.description
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// DvbMultilingualNetworkNameItem: multilingual network name entry
//
// An instance of this type is always passed by reference.
type DvbMultilingualNetworkNameItem struct {
	*dvbMultilingualNetworkNameItem
}

// dvbMultilingualNetworkNameItem is the struct that's finalized.
type dvbMultilingualNetworkNameItem struct {
	native *C.GstMpegtsDvbMultilingualNetworkNameItem
}

func marshalDvbMultilingualNetworkNameItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DvbMultilingualNetworkNameItem{&dvbMultilingualNetworkNameItem{(*C.GstMpegtsDvbMultilingualNetworkNameItem)(b)}}, nil
}

// LanguageCode: ISO 639 language code.
func (d *DvbMultilingualNetworkNameItem) LanguageCode() string {
	valptr := &d.native.language_code
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// NetworkName: network name.
func (d *DvbMultilingualNetworkNameItem) NetworkName() string {
	valptr := &d.native.network_name
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// DvbMultilingualServiceNameItem: multilingual service name entry
//
// An instance of this type is always passed by reference.
type DvbMultilingualServiceNameItem struct {
	*dvbMultilingualServiceNameItem
}

// dvbMultilingualServiceNameItem is the struct that's finalized.
type dvbMultilingualServiceNameItem struct {
	native *C.GstMpegtsDvbMultilingualServiceNameItem
}

func marshalDvbMultilingualServiceNameItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &DvbMultilingualServiceNameItem{&dvbMultilingualServiceNameItem{(*C.GstMpegtsDvbMultilingualServiceNameItem)(b)}}, nil
}

// LanguageCode: ISO 639 language code.
func (d *DvbMultilingualServiceNameItem) LanguageCode() string {
	valptr := &d.native.language_code
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// ProviderName: provider name.
func (d *DvbMultilingualServiceNameItem) ProviderName() string {
	valptr := &d.native.provider_name
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// ServiceName: service name.
func (d *DvbMultilingualServiceNameItem) ServiceName() string {
	valptr := &d.native.service_name
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// EIT: event Information Table (EN 300 468)
//
// An instance of this type is always passed by reference.
type EIT struct {
	*eiT
}

// eiT is the struct that's finalized.
type eiT struct {
	native *C.GstMpegtsEIT
}

func marshalEIT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &EIT{&eiT{(*C.GstMpegtsEIT)(b)}}, nil
}

// EITEvent: event from a GstMpegtsEIT
//
// An instance of this type is always passed by reference.
type EITEvent struct {
	*eitEvent
}

// eitEvent is the struct that's finalized.
type eitEvent struct {
	native *C.GstMpegtsEITEvent
}

func marshalEITEvent(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &EITEvent{&eitEvent{(*C.GstMpegtsEITEvent)(b)}}, nil
}

// ExtendedEventDescriptor: extended Event Descriptor (EN 300 468 v.1.13.1)
//
// An instance of this type is always passed by reference.
type ExtendedEventDescriptor struct {
	*extendedEventDescriptor
}

// extendedEventDescriptor is the struct that's finalized.
type extendedEventDescriptor struct {
	native *C.GstMpegtsExtendedEventDescriptor
}

func marshalExtendedEventDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &ExtendedEventDescriptor{&extendedEventDescriptor{(*C.GstMpegtsExtendedEventDescriptor)(b)}}, nil
}

// ExtendedEventItem: instance of this type is always passed by reference.
type ExtendedEventItem struct {
	*extendedEventItem
}

// extendedEventItem is the struct that's finalized.
type extendedEventItem struct {
	native *C.GstMpegtsExtendedEventItem
}

func marshalExtendedEventItem(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &ExtendedEventItem{&extendedEventItem{(*C.GstMpegtsExtendedEventItem)(b)}}, nil
}

func (e *ExtendedEventItem) ItemDescription() string {
	valptr := &e.native.item_description
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

func (e *ExtendedEventItem) Item() string {
	valptr := &e.native.item
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// ISO639LanguageDescriptor: instance of this type is always passed by
// reference.
type ISO639LanguageDescriptor struct {
	*isO639LanguageDescriptor
}

// isO639LanguageDescriptor is the struct that's finalized.
type isO639LanguageDescriptor struct {
	native *C.GstMpegtsISO639LanguageDescriptor
}

func marshalISO639LanguageDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &ISO639LanguageDescriptor{&isO639LanguageDescriptor{(*C.GstMpegtsISO639LanguageDescriptor)(b)}}, nil
}

func (i *ISO639LanguageDescriptor) NbLanguage() uint {
	valptr := &i.native.nb_language
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

func (i *ISO639LanguageDescriptor) Language() [64]string {
	valptr := &i.native.language
	var _v [64]string // out
	{
		src := &*valptr
		for i := 0; i < 64; i++ {
			_v[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}
	return _v
}

func (i *ISO639LanguageDescriptor) AudioType() [64]ISO639AudioType {
	valptr := &i.native.audio_type
	var _v [64]ISO639AudioType // out
	_v = *(*[64]ISO639AudioType)(unsafe.Pointer(&*valptr))
	return _v
}

func (i *ISO639LanguageDescriptor) SetNbLanguage(nbLanguage uint) {
	valptr := &i.native.nb_language
	*valptr = C.guint(nbLanguage)
}

// LogicalChannel: instance of this type is always passed by reference.
type LogicalChannel struct {
	*logicalChannel
}

// logicalChannel is the struct that's finalized.
type logicalChannel struct {
	native *C.GstMpegtsLogicalChannel
}

func marshalLogicalChannel(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &LogicalChannel{&logicalChannel{(*C.GstMpegtsLogicalChannel)(b)}}, nil
}

// NewLogicalChannel creates a new LogicalChannel instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewLogicalChannel(serviceId uint16, visibleService bool, logicalChannelNumber uint16) LogicalChannel {
	var f0 C.guint16 // out
	f0 = C.guint16(serviceId)
	var f1 C.gboolean // out
	if visibleService {
		f1 = C.TRUE
	}
	var f2 C.guint16 // out
	f2 = C.guint16(logicalChannelNumber)

	v := C.GstMpegtsLogicalChannel{
		service_id:             f0,
		visible_service:        f1,
		logical_channel_number: f2,
	}

	return *(*LogicalChannel)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

func (l *LogicalChannel) ServiceID() uint16 {
	valptr := &l.native.service_id
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (l *LogicalChannel) VisibleService() bool {
	valptr := &l.native.visible_service
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

func (l *LogicalChannel) LogicalChannelNumber() uint16 {
	valptr := &l.native.logical_channel_number
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

func (l *LogicalChannel) SetServiceID(serviceId uint16) {
	valptr := &l.native.service_id
	*valptr = C.guint16(serviceId)
}

func (l *LogicalChannel) SetVisibleService(visibleService bool) {
	valptr := &l.native.visible_service
	if visibleService {
		*valptr = C.TRUE
	}
}

func (l *LogicalChannel) SetLogicalChannelNumber(logicalChannelNumber uint16) {
	valptr := &l.native.logical_channel_number
	*valptr = C.guint16(logicalChannelNumber)
}

// LogicalChannelDescriptor: instance of this type is always passed by
// reference.
type LogicalChannelDescriptor struct {
	*logicalChannelDescriptor
}

// logicalChannelDescriptor is the struct that's finalized.
type logicalChannelDescriptor struct {
	native *C.GstMpegtsLogicalChannelDescriptor
}

func marshalLogicalChannelDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &LogicalChannelDescriptor{&logicalChannelDescriptor{(*C.GstMpegtsLogicalChannelDescriptor)(b)}}, nil
}

func (l *LogicalChannelDescriptor) NbChannels() uint {
	valptr := &l.native.nb_channels
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

func (l *LogicalChannelDescriptor) Channels() [64]LogicalChannel {
	valptr := &l.native.channels
	var _v [64]LogicalChannel // out
	{
		src := &*valptr
		for i := 0; i < 64; i++ {
			_v[i] = *(*LogicalChannel)(gextras.NewStructNative(unsafe.Pointer((&src[i]))))
		}
	}
	return _v
}

func (l *LogicalChannelDescriptor) SetNbChannels(nbChannels uint) {
	valptr := &l.native.nb_channels
	*valptr = C.guint(nbChannels)
}

// MetadataDescriptor: metadata descriptor specifies parameters of a metadata
// service carried in an MPEG-2 Transport Stream (or Program Stream). The
// descriptor is included in the PMT in the descriptor loop for the elementary
// stream that carries the metadata service. The descriptor specifies the format
// of the associated metadata, and contains the value of the metadata_service_id
// to identify the metadata service to which the metadata descriptor applies.
//
// Note that this structure does not include all of the metadata_descriptor
// items, and will need extension to support DSM-CC and private data. See
// ISO/IEC 13818-1:2018 Section 2.6.60 and Section 2.6.61 for more information.
//
// An instance of this type is always passed by reference.
type MetadataDescriptor struct {
	*metadataDescriptor
}

// metadataDescriptor is the struct that's finalized.
type metadataDescriptor struct {
	native *C.GstMpegtsMetadataDescriptor
}

func marshalMetadataDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &MetadataDescriptor{&metadataDescriptor{(*C.GstMpegtsMetadataDescriptor)(b)}}, nil
}

// MetadataApplicationFormat specifies the application responsible for defining
// usage, syntax and semantics.
func (m *MetadataDescriptor) MetadataApplicationFormat() uint16 {
	valptr := &m.native.metadata_application_format
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// MetadataFormat indicates the format and coding of the metadata.
func (m *MetadataDescriptor) MetadataFormat() MetadataFormat {
	valptr := &m.native.metadata_format
	var _v MetadataFormat // out
	_v = MetadataFormat(*valptr)
	return _v
}

// MetadataFormatIdentifier: format identifier (equivalent to registration
// descriptor), for example 0x4B4C4641 ('KLVA') to indicate SMPTE 336 KLV.
func (m *MetadataDescriptor) MetadataFormatIdentifier() uint32 {
	valptr := &m.native.metadata_format_identifier
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// MetadataServiceID: metadata service to which this metadata descriptor
// applies, typically 0x00.
func (m *MetadataDescriptor) MetadataServiceID() byte {
	valptr := &m.native.metadata_service_id
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// DecoderConfigFlags: decoder flags, see ISO/IEC 13818-1:2018 Table 2-88.
func (m *MetadataDescriptor) DecoderConfigFlags() byte {
	valptr := &m.native.decoder_config_flags
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// DsmCcFlag: true if stream associated with this descriptor is in an ISO/IEC
// 13818-6 data or object carousel.
func (m *MetadataDescriptor) DsmCcFlag() bool {
	valptr := &m.native.dsm_cc_flag
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// MetadataApplicationFormat specifies the application responsible for defining
// usage, syntax and semantics.
func (m *MetadataDescriptor) SetMetadataApplicationFormat(metadataApplicationFormat uint16) {
	valptr := &m.native.metadata_application_format
	*valptr = C.guint16(metadataApplicationFormat)
}

// MetadataFormatIdentifier: format identifier (equivalent to registration
// descriptor), for example 0x4B4C4641 ('KLVA') to indicate SMPTE 336 KLV.
func (m *MetadataDescriptor) SetMetadataFormatIdentifier(metadataFormatIdentifier uint32) {
	valptr := &m.native.metadata_format_identifier
	*valptr = C.guint32(metadataFormatIdentifier)
}

// MetadataServiceID: metadata service to which this metadata descriptor
// applies, typically 0x00.
func (m *MetadataDescriptor) SetMetadataServiceID(metadataServiceId byte) {
	valptr := &m.native.metadata_service_id
	*valptr = C.guint8(metadataServiceId)
}

// DecoderConfigFlags: decoder flags, see ISO/IEC 13818-1:2018 Table 2-88.
func (m *MetadataDescriptor) SetDecoderConfigFlags(decoderConfigFlags byte) {
	valptr := &m.native.decoder_config_flags
	*valptr = C.guint8(decoderConfigFlags)
}

// DsmCcFlag: true if stream associated with this descriptor is in an ISO/IEC
// 13818-6 data or object carousel.
func (m *MetadataDescriptor) SetDsmCcFlag(dsmCcFlag bool) {
	valptr := &m.native.dsm_cc_flag
	if dsmCcFlag {
		*valptr = C.TRUE
	}
}

// NIT: network Information Table (ISO/IEC 13818-1 / EN 300 468)
//
// An instance of this type is always passed by reference.
type NIT struct {
	*niT
}

// niT is the struct that's finalized.
type niT struct {
	native *C.GstMpegtsNIT
}

func marshalNIT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &NIT{&niT{(*C.GstMpegtsNIT)(b)}}, nil
}

// NewNIT constructs a struct NIT.
func NewNIT() *NIT {
	var _cret *C.GstMpegtsNIT // in

	_cret = C.gst_mpegts_nit_new()

	var _niT *NIT // out

	_niT = (*NIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_niT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _niT
}

// NITStream: instance of this type is always passed by reference.
type NITStream struct {
	*nitStream
}

// nitStream is the struct that's finalized.
type nitStream struct {
	native *C.GstMpegtsNITStream
}

func marshalNITStream(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &NITStream{&nitStream{(*C.GstMpegtsNITStream)(b)}}, nil
}

// NewNITStream constructs a struct NITStream.
func NewNITStream() *NITStream {
	var _cret *C.GstMpegtsNITStream // in

	_cret = C.gst_mpegts_nit_stream_new()

	var _nitStream *NITStream // out

	_nitStream = (*NITStream)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_nitStream)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _nitStream
}

// PESMetadataMeta: extra buffer metadata describing the PES Metadata context.
// This is based on the Metadata AU cell header in ISO/IEC 13818-1:2018 Section
// 2.12.4.
//
// AU_cell_data_length is not provided, since it matches the length of the
// buffer
//
// An instance of this type is always passed by reference.
type PESMetadataMeta struct {
	*pesMetadataMeta
}

// pesMetadataMeta is the struct that's finalized.
type pesMetadataMeta struct {
	native *C.GstMpegtsPESMetadataMeta
}

// Meta: parent Meta.
func (p *PESMetadataMeta) Meta() *gst.Meta {
	valptr := &p.native.meta
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// MetadataServiceID: metadata service identifier.
func (p *PESMetadataMeta) MetadataServiceID() byte {
	valptr := &p.native.metadata_service_id
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Flags: bit flags, see spec for details.
func (p *PESMetadataMeta) Flags() byte {
	valptr := &p.native.flags
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// MetadataServiceID: metadata service identifier.
func (p *PESMetadataMeta) SetMetadataServiceID(metadataServiceId byte) {
	valptr := &p.native.metadata_service_id
	*valptr = C.guint8(metadataServiceId)
}

// Flags: bit flags, see spec for details.
func (p *PESMetadataMeta) SetFlags(flags byte) {
	valptr := &p.native.flags
	*valptr = C.guint8(flags)
}

// PESMetadataMetaGetInfo gets the global MetaInfo describing the
// MpegtsPESMetadataMeta meta.
//
// The function returns the following values:
//
//   - metaInfo: MetaInfo.
func PESMetadataMetaGetInfo() *gst.MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_mpegts_pes_metadata_meta_get_info()

	var _metaInfo *gst.MetaInfo // out

	_metaInfo = (*gst.MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}

// PMT: program Map Table (ISO/IEC 13818-1). Provides the mappings between
// program numbers and the program elements that comprise them.
//
// The program_number is contained in the subtable_extension field of the
// container MpegtsSection.
//
// An instance of this type is always passed by reference.
type PMT struct {
	*pmT
}

// pmT is the struct that's finalized.
type pmT struct {
	native *C.GstMpegtsPMT
}

func marshalPMT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &PMT{&pmT{(*C.GstMpegtsPMT)(b)}}, nil
}

// NewPMT constructs a struct PMT.
func NewPMT() *PMT {
	var _cret *C.GstMpegtsPMT // in

	_cret = C.gst_mpegts_pmt_new()

	var _pmT *PMT // out

	_pmT = (*PMT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_pmT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _pmT
}

// PMTStream: individual stream definition of a MpegtsPMT.
//
// An instance of this type is always passed by reference.
type PMTStream struct {
	*pmtStream
}

// pmtStream is the struct that's finalized.
type pmtStream struct {
	native *C.GstMpegtsPMTStream
}

func marshalPMTStream(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &PMTStream{&pmtStream{(*C.GstMpegtsPMTStream)(b)}}, nil
}

// NewPMTStream constructs a struct PMTStream.
func NewPMTStream() *PMTStream {
	var _cret *C.GstMpegtsPMTStream // in

	_cret = C.gst_mpegts_pmt_stream_new()

	var _pmtStream *PMTStream // out

	_pmtStream = (*PMTStream)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_pmtStream)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _pmtStream
}

// PatProgram: program entry from a Program Association Table (ITU H.222.0,
// ISO/IEC 13818-1).
//
// An instance of this type is always passed by reference.
type PatProgram struct {
	*patProgram
}

// patProgram is the struct that's finalized.
type patProgram struct {
	native *C.GstMpegtsPatProgram
}

func marshalPatProgram(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &PatProgram{&patProgram{(*C.GstMpegtsPatProgram)(b)}}, nil
}

// NewPatProgram constructs a struct PatProgram.
func NewPatProgram() *PatProgram {
	var _cret *C.GstMpegtsPatProgram // in

	_cret = C.gst_mpegts_pat_program_new()

	var _patProgram *PatProgram // out

	_patProgram = (*PatProgram)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_patProgram)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _patProgram
}

// ProgramNumber: program number.
func (p *PatProgram) ProgramNumber() uint16 {
	valptr := &p.native.program_number
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// NetworkOrProgramMapPID: network of program map PID.
func (p *PatProgram) NetworkOrProgramMapPID() uint16 {
	valptr := &p.native.network_or_program_map_PID
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// ProgramNumber: program number.
func (p *PatProgram) SetProgramNumber(programNumber uint16) {
	valptr := &p.native.program_number
	*valptr = C.guint16(programNumber)
}

// NetworkOrProgramMapPID: network of program map PID.
func (p *PatProgram) SetNetworkOrProgramMapPID(networkOrProgramMapPID uint16) {
	valptr := &p.native.network_or_program_map_PID
	*valptr = C.guint16(networkOrProgramMapPID)
}

// SCTESIT: instance of this type is always passed by reference.
type SCTESIT struct {
	*sctesiT
}

// sctesiT is the struct that's finalized.
type sctesiT struct {
	native *C.GstMpegtsSCTESIT
}

func marshalSCTESIT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SCTESIT{&sctesiT{(*C.GstMpegtsSCTESIT)(b)}}, nil
}

// NewSCTESIT constructs a struct SCTESIT.
func NewSCTESIT() *SCTESIT {
	var _cret *C.GstMpegtsSCTESIT // in

	_cret = C.gst_mpegts_scte_sit_new()

	var _sctesiT *SCTESIT // out

	_sctesiT = (*SCTESIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_sctesiT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _sctesiT
}

// SCTESpliceComponent: per-PID splice information.
//
// An instance of this type is always passed by reference.
type SCTESpliceComponent struct {
	*scteSpliceComponent
}

// scteSpliceComponent is the struct that's finalized.
type scteSpliceComponent struct {
	native *C.GstMpegtsSCTESpliceComponent
}

func marshalSCTESpliceComponent(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SCTESpliceComponent{&scteSpliceComponent{(*C.GstMpegtsSCTESpliceComponent)(b)}}, nil
}

// NewSCTESpliceComponent constructs a struct SCTESpliceComponent.
func NewSCTESpliceComponent(tag byte) *SCTESpliceComponent {
	var _arg1 C.guint8                        // out
	var _cret *C.GstMpegtsSCTESpliceComponent // in

	_arg1 = C.guint8(tag)

	_cret = C.gst_mpegts_scte_splice_component_new(_arg1)
	runtime.KeepAlive(tag)

	var _scteSpliceComponent *SCTESpliceComponent // out

	_scteSpliceComponent = (*SCTESpliceComponent)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_scteSpliceComponent)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _scteSpliceComponent
}

// Tag: elementary PID stream containing the Splice Point.
func (s *SCTESpliceComponent) Tag() byte {
	valptr := &s.native.tag
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// SpliceTimeSpecified: whether splice_time was specified.
func (s *SCTESpliceComponent) SpliceTimeSpecified() bool {
	valptr := &s.native.splice_time_specified
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// SpliceTime: presentation time of the signaled splice event.
func (s *SCTESpliceComponent) SpliceTime() uint64 {
	valptr := &s.native.splice_time
	var _v uint64 // out
	_v = uint64(*valptr)
	return _v
}

// UTCSpliceTime: UTC time of the signaled splice event.
func (s *SCTESpliceComponent) UTCSpliceTime() uint32 {
	valptr := &s.native.utc_splice_time
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Tag: elementary PID stream containing the Splice Point.
func (s *SCTESpliceComponent) SetTag(tag byte) {
	valptr := &s.native.tag
	*valptr = C.guint8(tag)
}

// SpliceTimeSpecified: whether splice_time was specified.
func (s *SCTESpliceComponent) SetSpliceTimeSpecified(spliceTimeSpecified bool) {
	valptr := &s.native.splice_time_specified
	if spliceTimeSpecified {
		*valptr = C.TRUE
	}
}

// SpliceTime: presentation time of the signaled splice event.
func (s *SCTESpliceComponent) SetSpliceTime(spliceTime uint64) {
	valptr := &s.native.splice_time
	*valptr = C.guint64(spliceTime)
}

// UTCSpliceTime: UTC time of the signaled splice event.
func (s *SCTESpliceComponent) SetUTCSpliceTime(utcSpliceTime uint32) {
	valptr := &s.native.utc_splice_time
	*valptr = C.guint32(utcSpliceTime)
}

// SCTESpliceEvent: instance of this type is always passed by reference.
type SCTESpliceEvent struct {
	*scteSpliceEvent
}

// scteSpliceEvent is the struct that's finalized.
type scteSpliceEvent struct {
	native *C.GstMpegtsSCTESpliceEvent
}

func marshalSCTESpliceEvent(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SCTESpliceEvent{&scteSpliceEvent{(*C.GstMpegtsSCTESpliceEvent)(b)}}, nil
}

// NewSCTESpliceEvent constructs a struct SCTESpliceEvent.
func NewSCTESpliceEvent() *SCTESpliceEvent {
	var _cret *C.GstMpegtsSCTESpliceEvent // in

	_cret = C.gst_mpegts_scte_splice_event_new()

	var _scteSpliceEvent *SCTESpliceEvent // out

	_scteSpliceEvent = (*SCTESpliceEvent)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_scteSpliceEvent)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _scteSpliceEvent
}

// SDT: service Description Table (EN 300 468)
//
// An instance of this type is always passed by reference.
type SDT struct {
	*sdT
}

// sdT is the struct that's finalized.
type sdT struct {
	native *C.GstMpegtsSDT
}

func marshalSDT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SDT{&sdT{(*C.GstMpegtsSDT)(b)}}, nil
}

// NewSDT constructs a struct SDT.
func NewSDT() *SDT {
	var _cret *C.GstMpegtsSDT // in

	_cret = C.gst_mpegts_sdt_new()

	var _sdT *SDT // out

	_sdT = (*SDT)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_sdT)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _sdT
}

// SDTService: instance of this type is always passed by reference.
type SDTService struct {
	*sdtService
}

// sdtService is the struct that's finalized.
type sdtService struct {
	native *C.GstMpegtsSDTService
}

func marshalSDTService(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SDTService{&sdtService{(*C.GstMpegtsSDTService)(b)}}, nil
}

// NewSDTService constructs a struct SDTService.
func NewSDTService() *SDTService {
	var _cret *C.GstMpegtsSDTService // in

	_cret = C.gst_mpegts_sdt_service_new()

	var _sdtService *SDTService // out

	_sdtService = (*SDTService)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_sdtService)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _sdtService
}

// SIT: selection Information Table (EN 300 468)
//
// An instance of this type is always passed by reference.
type SIT struct {
	*siT
}

// siT is the struct that's finalized.
type siT struct {
	native *C.GstMpegtsSIT
}

func marshalSIT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SIT{&siT{(*C.GstMpegtsSIT)(b)}}, nil
}

// SITService: SIT Service entry
//
// An instance of this type is always passed by reference.
type SITService struct {
	*sitService
}

// sitService is the struct that's finalized.
type sitService struct {
	native *C.GstMpegtsSITService
}

func marshalSITService(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SITService{&sitService{(*C.GstMpegtsSITService)(b)}}, nil
}

// SatelliteDeliverySystemDescriptor: satellite Delivery System Descriptor (EN
// 300 468 v.1.13.1)
//
// An instance of this type is always passed by reference.
type SatelliteDeliverySystemDescriptor struct {
	*satelliteDeliverySystemDescriptor
}

// satelliteDeliverySystemDescriptor is the struct that's finalized.
type satelliteDeliverySystemDescriptor struct {
	native *C.GstMpegtsSatelliteDeliverySystemDescriptor
}

func marshalSatelliteDeliverySystemDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SatelliteDeliverySystemDescriptor{&satelliteDeliverySystemDescriptor{(*C.GstMpegtsSatelliteDeliverySystemDescriptor)(b)}}, nil
}

// Frequency: frequency in kHz (kiloHertz).
func (s *SatelliteDeliverySystemDescriptor) Frequency() uint32 {
	valptr := &s.native.frequency
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// OrbitalPosition: orbital position in degrees.
func (s *SatelliteDeliverySystemDescriptor) OrbitalPosition() float32 {
	valptr := &s.native.orbital_position
	var _v float32 // out
	_v = float32(*valptr)
	return _v
}

// WestEast: if TRUE, the satellite is in the eastern part of the orbit, else in
// the western part.
func (s *SatelliteDeliverySystemDescriptor) WestEast() bool {
	valptr := &s.native.west_east
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// Polarization: polarization of the transmitted signal.
func (s *SatelliteDeliverySystemDescriptor) Polarization() SatellitePolarizationType {
	valptr := &s.native.polarization
	var _v SatellitePolarizationType // out
	_v = SatellitePolarizationType(*valptr)
	return _v
}

// RollOff: roll-off factor used in DVB-S2.
func (s *SatelliteDeliverySystemDescriptor) RollOff() SatelliteRolloff {
	valptr := &s.native.roll_off
	var _v SatelliteRolloff // out
	_v = SatelliteRolloff(*valptr)
	return _v
}

// ModulationSystem: modulation system, TRUE if DVB-S2, else DVB-S.
func (s *SatelliteDeliverySystemDescriptor) ModulationSystem() bool {
	valptr := &s.native.modulation_system
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// ModulationType: modulation scheme used.
func (s *SatelliteDeliverySystemDescriptor) ModulationType() ModulationType {
	valptr := &s.native.modulation_type
	var _v ModulationType // out
	_v = ModulationType(*valptr)
	return _v
}

// SymbolRate: symbol rate (in symbols per second).
func (s *SatelliteDeliverySystemDescriptor) SymbolRate() uint32 {
	valptr := &s.native.symbol_rate
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// FecInner: inner FEC scheme used.
func (s *SatelliteDeliverySystemDescriptor) FecInner() DVBCodeRate {
	valptr := &s.native.fec_inner
	var _v DVBCodeRate // out
	_v = DVBCodeRate(*valptr)
	return _v
}

// Frequency: frequency in kHz (kiloHertz).
func (s *SatelliteDeliverySystemDescriptor) SetFrequency(frequency uint32) {
	valptr := &s.native.frequency
	*valptr = C.guint32(frequency)
}

// OrbitalPosition: orbital position in degrees.
func (s *SatelliteDeliverySystemDescriptor) SetOrbitalPosition(orbitalPosition float32) {
	valptr := &s.native.orbital_position
	*valptr = C.gfloat(orbitalPosition)
}

// WestEast: if TRUE, the satellite is in the eastern part of the orbit, else in
// the western part.
func (s *SatelliteDeliverySystemDescriptor) SetWestEast(westEast bool) {
	valptr := &s.native.west_east
	if westEast {
		*valptr = C.TRUE
	}
}

// ModulationSystem: modulation system, TRUE if DVB-S2, else DVB-S.
func (s *SatelliteDeliverySystemDescriptor) SetModulationSystem(modulationSystem bool) {
	valptr := &s.native.modulation_system
	if modulationSystem {
		*valptr = C.TRUE
	}
}

// SymbolRate: symbol rate (in symbols per second).
func (s *SatelliteDeliverySystemDescriptor) SetSymbolRate(symbolRate uint32) {
	valptr := &s.native.symbol_rate
	*valptr = C.guint32(symbolRate)
}

// Section Generic usage of sections with GstMpegtsSection
//
// The GstMpegtsSection object is the representation of MPEG-TS Section (SI or
// PSI).
//
// Various elements can post those on the bus via GstMessage of type
// GST_MESSAGE_ELEMENT. The gst_message_parse_mpegts_section() function provides
// access to the section.
//
// Applications (or other elements) can create them either by using one of the
// gst_mpegts_section_from_* functions, or by providing the raw SI data via
// gst_mpegts_section_new().
//
// Elements outputting MPEG-TS streams can also create sections using the
// various convenience functions and then get the packetized data (to be
// inserted in MPEG-TS packets) using gst_mpegts_section_packetize().
//
// For more details, refer to the ITU H.222.0 or ISO/IEC 13818-1 specifications
// and other specifications mentioned in the documentation.
//
// # Supported base MPEG-TS sections
//
// These are the sections for which parsing and packetizing code exists.
//
// Program Association Table (PAT)
//
// See: * gst_mpegts_section_get_pat() * gst_mpegts_pat_program_new() *
// GstMpegtsPatProgram
//
// Conditional Access Table (CAT)
//
// See: * gst_mpegts_section_get_cat()
//
// Program Map Table (PMT)
//
// See: * GstMpegtsPMT * gst_mpegts_section_get_pmt() * gst_mpegts_pmt_new() *
// GstMpegtsPMTStream
//
// Transport Stream Description Table (TSDT)
//
// See: * gst_mpegts_section_get_tsdt()
//
// # API
//
// An instance of this type is always passed by reference.
type Section struct {
	*section
}

// section is the struct that's finalized.
type section struct {
	native *C.GstMpegtsSection
}

func marshalSection(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Section{&section{(*C.GstMpegtsSection)(b)}}, nil
}

// NewSection constructs a struct Section.
func NewSection(pid uint16, data []byte) *Section {
	var _arg1 C.guint16 // out
	var _arg2 *C.guint8 // out
	var _arg3 C.gsize
	var _cret *C.GstMpegtsSection // in

	_arg1 = C.guint16(pid)
	_arg3 = (C.gsize)(len(data))
	_arg2 = (*C.guint8)(C.calloc(C.size_t(len(data)), C.size_t(C.sizeof_guint8)))
	copy(unsafe.Slice((*byte)(_arg2), len(data)), data)

	_cret = C.gst_mpegts_section_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(pid)
	runtime.KeepAlive(data)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

// SectionType: type of section.
func (s *Section) SectionType() SectionType {
	valptr := &s.native.section_type
	var _v SectionType // out
	_v = SectionType(*valptr)
	return _v
}

// Pid: PID on which this section was found or belongs to.
func (s *Section) Pid() uint16 {
	valptr := &s.native.pid
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// TableID: table id of this section. See GstMpegtsSectionTableID and derivates
// for more information.
func (s *Section) TableID() byte {
	valptr := &s.native.table_id
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// SubtableExtension: this meaning differs per section. See the documentation of
// the parsed section type for the meaning of this field.
func (s *Section) SubtableExtension() uint16 {
	valptr := &s.native.subtable_extension
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// VersionNumber: version of the section.
func (s *Section) VersionNumber() byte {
	valptr := &s.native.version_number
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// CurrentNextIndicator applies to current/next stream or not.
func (s *Section) CurrentNextIndicator() bool {
	valptr := &s.native.current_next_indicator
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// SectionNumber: number of the section (if multiple).
func (s *Section) SectionNumber() byte {
	valptr := &s.native.section_number
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// LastSectionNumber: number of the last expected section (if multiple).
func (s *Section) LastSectionNumber() byte {
	valptr := &s.native.last_section_number
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Crc: checksum (if applicable).
func (s *Section) Crc() uint32 {
	valptr := &s.native.crc
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Pid: PID on which this section was found or belongs to.
func (s *Section) SetPid(pid uint16) {
	valptr := &s.native.pid
	*valptr = C.guint16(pid)
}

// TableID: table id of this section. See GstMpegtsSectionTableID and derivates
// for more information.
func (s *Section) SetTableID(tableId byte) {
	valptr := &s.native.table_id
	*valptr = C.guint8(tableId)
}

// SubtableExtension: this meaning differs per section. See the documentation of
// the parsed section type for the meaning of this field.
func (s *Section) SetSubtableExtension(subtableExtension uint16) {
	valptr := &s.native.subtable_extension
	*valptr = C.guint16(subtableExtension)
}

// VersionNumber: version of the section.
func (s *Section) SetVersionNumber(versionNumber byte) {
	valptr := &s.native.version_number
	*valptr = C.guint8(versionNumber)
}

// CurrentNextIndicator applies to current/next stream or not.
func (s *Section) SetCurrentNextIndicator(currentNextIndicator bool) {
	valptr := &s.native.current_next_indicator
	if currentNextIndicator {
		*valptr = C.TRUE
	}
}

// SectionNumber: number of the section (if multiple).
func (s *Section) SetSectionNumber(sectionNumber byte) {
	valptr := &s.native.section_number
	*valptr = C.guint8(sectionNumber)
}

// LastSectionNumber: number of the last expected section (if multiple).
func (s *Section) SetLastSectionNumber(lastSectionNumber byte) {
	valptr := &s.native.last_section_number
	*valptr = C.guint8(lastSectionNumber)
}

// Crc: checksum (if applicable).
func (s *Section) SetCrc(crc uint32) {
	valptr := &s.native.crc
	*valptr = C.guint32(crc)
}

// AtscCvct returns the MpegtsAtscVCT contained in the section.
//
// The function returns the following values:
//
//   - atscVCT contained in the section, or NULL if an error happened.
func (section *Section) AtscCvct() *AtscVCT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsAtscVCT // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_atsc_cvct(_arg0)
	runtime.KeepAlive(section)

	var _atscVCT *AtscVCT // out

	_atscVCT = (*AtscVCT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _atscVCT
}

// AtscEit returns the MpegtsAtscEIT contained in the section.
//
// The function returns the following values:
//
//   - atscEIT contained in the section, or NULL if an error happened.
func (section *Section) AtscEit() *AtscEIT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsAtscEIT // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_atsc_eit(_arg0)
	runtime.KeepAlive(section)

	var _atscEIT *AtscEIT // out

	_atscEIT = (*AtscEIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _atscEIT
}

// AtscEtt returns the MpegtsAtscETT contained in the section.
//
// The function returns the following values:
//
//   - atscETT contained in the section, or NULL if an error happened.
func (section *Section) AtscEtt() *AtscETT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsAtscETT // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_atsc_ett(_arg0)
	runtime.KeepAlive(section)

	var _atscETT *AtscETT // out

	_atscETT = (*AtscETT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _atscETT
}

// AtscMgt returns the MpegtsAtscMGT contained in the section.
//
// The function returns the following values:
//
//   - atscMGT contained in the section, or NULL if an error happened.
func (section *Section) AtscMgt() *AtscMGT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsAtscMGT // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_atsc_mgt(_arg0)
	runtime.KeepAlive(section)

	var _atscMGT *AtscMGT // out

	_atscMGT = (*AtscMGT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _atscMGT
}

// AtscRrt returns the MpegtsAtscRRT contained in the section.
//
// The function returns the following values:
//
//   - atscRRT contained in the section, or NULL if an error happened.
func (section *Section) AtscRrt() *AtscRRT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsAtscRRT // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_atsc_rrt(_arg0)
	runtime.KeepAlive(section)

	var _atscRRT *AtscRRT // out

	_atscRRT = (*AtscRRT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _atscRRT
}

// AtscStt returns the MpegtsAtscSTT contained in the section.
//
// The function returns the following values:
//
//   - atscSTT contained in the section, or NULL if an error happened.
func (section *Section) AtscStt() *AtscSTT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsAtscSTT // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_atsc_stt(_arg0)
	runtime.KeepAlive(section)

	var _atscSTT *AtscSTT // out

	_atscSTT = (*AtscSTT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _atscSTT
}

// AtscTvct returns the MpegtsAtscVCT contained in the section.
//
// The function returns the following values:
//
//   - atscVCT contained in the section, or NULL if an error happened.
func (section *Section) AtscTvct() *AtscVCT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsAtscVCT // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_atsc_tvct(_arg0)
	runtime.KeepAlive(section)

	var _atscVCT *AtscVCT // out

	_atscVCT = (*AtscVCT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _atscVCT
}

// Bat returns the MpegtsBAT contained in the section.
//
// The function returns the following values:
//
//   - baT contained in the section, or NULL if an error happened.
func (section *Section) Bat() *BAT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsBAT     // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_bat(_arg0)
	runtime.KeepAlive(section)

	var _baT *BAT // out

	_baT = (*BAT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _baT
}

// Data gets the original unparsed section data.
//
// The function returns the following values:
//
//   - bytes: original unparsed section data.
func (section *Section) Data() *glib.Bytes {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GBytes           // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_data(_arg0)
	runtime.KeepAlive(section)

	var _bytes *glib.Bytes // out

	_bytes = (*glib.Bytes)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_bytes)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_bytes_unref((*C.GBytes)(intern.C))
		},
	)

	return _bytes
}

// Eit returns the MpegtsEIT contained in the section.
//
// The function returns the following values:
//
//   - eiT contained in the section, or NULL if an error happened.
func (section *Section) Eit() *EIT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsEIT     // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_eit(_arg0)
	runtime.KeepAlive(section)

	var _eiT *EIT // out

	_eiT = (*EIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _eiT
}

// Nit returns the MpegtsNIT contained in the section.
//
// The function returns the following values:
//
//   - niT contained in the section, or NULL if an error happened.
func (section *Section) Nit() *NIT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsNIT     // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_nit(_arg0)
	runtime.KeepAlive(section)

	var _niT *NIT // out

	_niT = (*NIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _niT
}

// Pmt parses the Program Map Table contained in the section.
//
// The function returns the following values:
//
//   - pmT contained in the section, or NULL if an error happened.
func (section *Section) Pmt() *PMT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsPMT     // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_pmt(_arg0)
	runtime.KeepAlive(section)

	var _pmT *PMT // out

	_pmT = (*PMT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _pmT
}

// ScteSit returns the MpegtsSCTESIT contained in the section.
//
// The function returns the following values:
//
//   - sctesiT contained in the section, or NULL if an error happened.
func (section *Section) ScteSit() *SCTESIT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsSCTESIT // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_scte_sit(_arg0)
	runtime.KeepAlive(section)

	var _sctesiT *SCTESIT // out

	_sctesiT = (*SCTESIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sctesiT
}

// Sdt returns the MpegtsSDT contained in the section.
//
// The function returns the following values:
//
//   - sdT contained in the section, or NULL if an error happened.
func (section *Section) Sdt() *SDT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsSDT     // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_sdt(_arg0)
	runtime.KeepAlive(section)

	var _sdT *SDT // out

	_sdT = (*SDT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdT
}

// Sit returns the MpegtsSIT contained in the section.
//
// The function returns the following values:
//
//   - siT contained in the section, or NULL if an error happened.
func (section *Section) Sit() *SIT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsSIT     // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_sit(_arg0)
	runtime.KeepAlive(section)

	var _siT *SIT // out

	_siT = (*SIT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _siT
}

// Tdt returns the DateTime of the TDT.
//
// The function returns the following values:
//
//   - dateTime contained in the section, or NULL if an error happened. Release
//     with #gst_date_time_unref when done.
func (section *Section) Tdt() *gst.DateTime {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstDateTime      // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_tdt(_arg0)
	runtime.KeepAlive(section)

	var _dateTime *gst.DateTime // out

	_dateTime = (*gst.DateTime)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_dateTime)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_date_time_unref((*C.GstDateTime)(intern.C))
		},
	)

	return _dateTime
}

// Tot returns the MpegtsTOT contained in the section.
//
// The function returns the following values:
//
//   - toT contained in the section, or NULL if an error happened.
func (section *Section) Tot() *TOT {
	var _arg0 *C.GstMpegtsSection // out
	var _cret *C.GstMpegtsTOT     // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_get_tot(_arg0)
	runtime.KeepAlive(section)

	var _toT *TOT // out

	_toT = (*TOT)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _toT
}

// Packetize (i.e. serialize) the section. If the data in section has already
// been packetized, the data pointer is returned immediately. Otherwise,
// the data field is allocated and populated.
//
// The function returns the following values:
//
//   - outputSize to hold the size of the data.
//   - guint8: pointer to section data, or NULL on failure.
func (section *Section) Packetize() (uint, *byte) {
	var _arg0 *C.GstMpegtsSection // out
	var _arg1 C.gsize             // in
	var _cret *C.guint8           // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))

	_cret = C.gst_mpegts_section_packetize(_arg0, &_arg1)
	runtime.KeepAlive(section)

	var _outputSize uint // out
	var _guint8 *byte    // out

	_outputSize = uint(_arg1)
	_guint8 = (*byte)(unsafe.Pointer(_cret))

	return _outputSize, _guint8
}

// SendEvent creates a custom Event with a GstMpegtsSection and send it the
// element Element.
//
// The function takes the following parameters:
//
//   - element to send to section event to.
//
// The function returns the following values:
//
//   - ok: TRUE if the event was sent to the element.
func (section *Section) SendEvent(element gst.Elementer) bool {
	var _arg0 *C.GstMpegtsSection // out
	var _arg1 *C.GstElement       // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GstMpegtsSection)(gextras.StructNative(unsafe.Pointer(section)))
	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.BaseObject(element).Native()))

	_cret = C.gst_mpegts_section_send_event(_arg0, _arg1)
	runtime.KeepAlive(section)
	runtime.KeepAlive(element)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - mgt to create the MpegtsSection from.
//
// The function returns the following values:
//
//   - section: MpegtsSection.
func SectionFromAtscMgt(mgt *AtscMGT) *Section {
	var _arg1 *C.GstMpegtsAtscMGT // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstMpegtsAtscMGT)(gextras.StructNative(unsafe.Pointer(mgt)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(mgt)), nil)

	_cret = C.gst_mpegts_section_from_atsc_mgt(_arg1)
	runtime.KeepAlive(mgt)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

func SectionFromAtscRrt(rrt *AtscRRT) *Section {
	var _arg1 *C.GstMpegtsAtscRRT // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstMpegtsAtscRRT)(gextras.StructNative(unsafe.Pointer(rrt)))

	_cret = C.gst_mpegts_section_from_atsc_rrt(_arg1)
	runtime.KeepAlive(rrt)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

func SectionFromAtscStt(stt *AtscSTT) *Section {
	var _arg1 *C.GstMpegtsAtscSTT // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstMpegtsAtscSTT)(gextras.StructNative(unsafe.Pointer(stt)))

	_cret = C.gst_mpegts_section_from_atsc_stt(_arg1)
	runtime.KeepAlive(stt)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

// SectionFromNit: ownership of nit is taken. The data in nit is managed by the
// MpegtsSection.
//
// The function takes the following parameters:
//
//   - nit to create the MpegtsSection from.
//
// The function returns the following values:
//
//   - section: MpegtsSection.
func SectionFromNit(nit *NIT) *Section {
	var _arg1 *C.GstMpegtsNIT     // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstMpegtsNIT)(gextras.StructNative(unsafe.Pointer(nit)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(nit)), nil)

	_cret = C.gst_mpegts_section_from_nit(_arg1)
	runtime.KeepAlive(nit)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

// SectionFromPmt creates a MpegtsSection from pmt that is bound to pid.
//
// The function takes the following parameters:
//
//   - pmt to create a MpegtsSection from.
//   - pid: PID that the MpegtsPMT belongs to.
//
// The function returns the following values:
//
//   - section: MpegtsSection.
func SectionFromPmt(pmt *PMT, pid uint16) *Section {
	var _arg1 *C.GstMpegtsPMT     // out
	var _arg2 C.guint16           // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstMpegtsPMT)(gextras.StructNative(unsafe.Pointer(pmt)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(pmt)), nil)
	_arg2 = C.guint16(pid)

	_cret = C.gst_mpegts_section_from_pmt(_arg1, _arg2)
	runtime.KeepAlive(pmt)
	runtime.KeepAlive(pid)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

// SectionFromScteSit: ownership of sit is taken. The data in sit is managed by
// the MpegtsSection.
//
// The function takes the following parameters:
//
//   - sit to create the MpegtsSection from.
//   - pid
//
// The function returns the following values:
//
//   - section: MpegtsSection.
func SectionFromScteSit(sit *SCTESIT, pid uint16) *Section {
	var _arg1 *C.GstMpegtsSCTESIT // out
	var _arg2 C.guint16           // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstMpegtsSCTESIT)(gextras.StructNative(unsafe.Pointer(sit)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(sit)), nil)
	_arg2 = C.guint16(pid)

	_cret = C.gst_mpegts_section_from_scte_sit(_arg1, _arg2)
	runtime.KeepAlive(sit)
	runtime.KeepAlive(pid)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

// SectionFromSdt: ownership of sdt is taken. The data in sdt is managed by the
// MpegtsSection.
//
// The function takes the following parameters:
//
//   - sdt to create the MpegtsSection from.
//
// The function returns the following values:
//
//   - section: MpegtsSection.
func SectionFromSdt(sdt *SDT) *Section {
	var _arg1 *C.GstMpegtsSDT     // out
	var _cret *C.GstMpegtsSection // in

	_arg1 = (*C.GstMpegtsSDT)(gextras.StructNative(unsafe.Pointer(sdt)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(sdt)), nil)

	_cret = C.gst_mpegts_section_from_sdt(_arg1)
	runtime.KeepAlive(sdt)

	var _section *Section // out

	_section = (*Section)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_section)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _section
}

// T2DeliverySystemCell: instance of this type is always passed by reference.
type T2DeliverySystemCell struct {
	*t2DeliverySystemCell
}

// t2DeliverySystemCell is the struct that's finalized.
type t2DeliverySystemCell struct {
	native *C.GstMpegtsT2DeliverySystemCell
}

func marshalT2DeliverySystemCell(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &T2DeliverySystemCell{&t2DeliverySystemCell{(*C.GstMpegtsT2DeliverySystemCell)(b)}}, nil
}

// T2DeliverySystemCellExtension: instance of this type is always passed by
// reference.
type T2DeliverySystemCellExtension struct {
	*t2DeliverySystemCellExtension
}

// t2DeliverySystemCellExtension is the struct that's finalized.
type t2DeliverySystemCellExtension struct {
	native *C.GstMpegtsT2DeliverySystemCellExtension
}

func marshalT2DeliverySystemCellExtension(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &T2DeliverySystemCellExtension{&t2DeliverySystemCellExtension{(*C.GstMpegtsT2DeliverySystemCellExtension)(b)}}, nil
}

// NewT2DeliverySystemCellExtension creates a new T2DeliverySystemCellExtension instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewT2DeliverySystemCellExtension(cellIdExtension byte, transposerFrequency uint32) T2DeliverySystemCellExtension {
	var f0 C.guint8 // out
	f0 = C.guint8(cellIdExtension)
	var f1 C.guint32 // out
	f1 = C.guint32(transposerFrequency)

	v := C.GstMpegtsT2DeliverySystemCellExtension{
		cell_id_extension:    f0,
		transposer_frequency: f1,
	}

	return *(*T2DeliverySystemCellExtension)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

// CellIDExtension: id of the sub cell.
func (t *T2DeliverySystemCellExtension) CellIDExtension() byte {
	valptr := &t.native.cell_id_extension
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// TransposerFrequency: centre frequency of the sub cell in Hz.
func (t *T2DeliverySystemCellExtension) TransposerFrequency() uint32 {
	valptr := &t.native.transposer_frequency
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// CellIDExtension: id of the sub cell.
func (t *T2DeliverySystemCellExtension) SetCellIDExtension(cellIdExtension byte) {
	valptr := &t.native.cell_id_extension
	*valptr = C.guint8(cellIdExtension)
}

// TransposerFrequency: centre frequency of the sub cell in Hz.
func (t *T2DeliverySystemCellExtension) SetTransposerFrequency(transposerFrequency uint32) {
	valptr := &t.native.transposer_frequency
	*valptr = C.guint32(transposerFrequency)
}

// T2DeliverySystemDescriptor: describe DVB-T2 transmissions according to EN 302
// 755
//
// An instance of this type is always passed by reference.
type T2DeliverySystemDescriptor struct {
	*t2DeliverySystemDescriptor
}

// t2DeliverySystemDescriptor is the struct that's finalized.
type t2DeliverySystemDescriptor struct {
	native *C.GstMpegtsT2DeliverySystemDescriptor
}

func marshalT2DeliverySystemDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &T2DeliverySystemDescriptor{&t2DeliverySystemDescriptor{(*C.GstMpegtsT2DeliverySystemDescriptor)(b)}}, nil
}

// TOT: time Offset Table (EN 300 468)
//
// An instance of this type is always passed by reference.
type TOT struct {
	*toT
}

// toT is the struct that's finalized.
type toT struct {
	native *C.GstMpegtsTOT
}

func marshalTOT(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TOT{&toT{(*C.GstMpegtsTOT)(b)}}, nil
}

// TerrestrialDeliverySystemDescriptor: terrestrial Delivery System Descriptor
// (EN 300 468 v.1.13.1)
//
// An instance of this type is always passed by reference.
type TerrestrialDeliverySystemDescriptor struct {
	*terrestrialDeliverySystemDescriptor
}

// terrestrialDeliverySystemDescriptor is the struct that's finalized.
type terrestrialDeliverySystemDescriptor struct {
	native *C.GstMpegtsTerrestrialDeliverySystemDescriptor
}

func marshalTerrestrialDeliverySystemDescriptor(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &TerrestrialDeliverySystemDescriptor{&terrestrialDeliverySystemDescriptor{(*C.GstMpegtsTerrestrialDeliverySystemDescriptor)(b)}}, nil
}

// Frequency: frequency in Hz (Hertz).
func (t *TerrestrialDeliverySystemDescriptor) Frequency() uint32 {
	valptr := &t.native.frequency
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Bandwidth: bandwidth in Hz (Hertz).
func (t *TerrestrialDeliverySystemDescriptor) Bandwidth() uint32 {
	valptr := &t.native.bandwidth
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Priority: TRUE High Priority FALSE Low Priority.
func (t *TerrestrialDeliverySystemDescriptor) Priority() bool {
	valptr := &t.native.priority
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// TimeSlicing: TRUE no time slicing FALSE time slicing.
func (t *TerrestrialDeliverySystemDescriptor) TimeSlicing() bool {
	valptr := &t.native.time_slicing
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// MpeFec: TRUE no mpe-fec is used FALSE mpe-fec is use.
func (t *TerrestrialDeliverySystemDescriptor) MpeFec() bool {
	valptr := &t.native.mpe_fec
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// Constellation: constellation.
func (t *TerrestrialDeliverySystemDescriptor) Constellation() ModulationType {
	valptr := &t.native.constellation
	var _v ModulationType // out
	_v = ModulationType(*valptr)
	return _v
}

// Hierarchy: hierarchy.
func (t *TerrestrialDeliverySystemDescriptor) Hierarchy() TerrestrialHierarchy {
	valptr := &t.native.hierarchy
	var _v TerrestrialHierarchy // out
	_v = TerrestrialHierarchy(*valptr)
	return _v
}

func (t *TerrestrialDeliverySystemDescriptor) CodeRateHp() DVBCodeRate {
	valptr := &t.native.code_rate_hp
	var _v DVBCodeRate // out
	_v = DVBCodeRate(*valptr)
	return _v
}

func (t *TerrestrialDeliverySystemDescriptor) CodeRateLp() DVBCodeRate {
	valptr := &t.native.code_rate_lp
	var _v DVBCodeRate // out
	_v = DVBCodeRate(*valptr)
	return _v
}

func (t *TerrestrialDeliverySystemDescriptor) GuardInterval() TerrestrialGuardInterval {
	valptr := &t.native.guard_interval
	var _v TerrestrialGuardInterval // out
	_v = TerrestrialGuardInterval(*valptr)
	return _v
}

func (t *TerrestrialDeliverySystemDescriptor) TransmissionMode() TerrestrialTransmissionMode {
	valptr := &t.native.transmission_mode
	var _v TerrestrialTransmissionMode // out
	_v = TerrestrialTransmissionMode(*valptr)
	return _v
}

// OtherFrequency: TRUE more frequency are use, else not.
func (t *TerrestrialDeliverySystemDescriptor) OtherFrequency() bool {
	valptr := &t.native.other_frequency
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// Frequency: frequency in Hz (Hertz).
func (t *TerrestrialDeliverySystemDescriptor) SetFrequency(frequency uint32) {
	valptr := &t.native.frequency
	*valptr = C.guint32(frequency)
}

// Bandwidth: bandwidth in Hz (Hertz).
func (t *TerrestrialDeliverySystemDescriptor) SetBandwidth(bandwidth uint32) {
	valptr := &t.native.bandwidth
	*valptr = C.guint32(bandwidth)
}

// Priority: TRUE High Priority FALSE Low Priority.
func (t *TerrestrialDeliverySystemDescriptor) SetPriority(priority bool) {
	valptr := &t.native.priority
	if priority {
		*valptr = C.TRUE
	}
}

// TimeSlicing: TRUE no time slicing FALSE time slicing.
func (t *TerrestrialDeliverySystemDescriptor) SetTimeSlicing(timeSlicing bool) {
	valptr := &t.native.time_slicing
	if timeSlicing {
		*valptr = C.TRUE
	}
}

// MpeFec: TRUE no mpe-fec is used FALSE mpe-fec is use.
func (t *TerrestrialDeliverySystemDescriptor) SetMpeFec(mpeFec bool) {
	valptr := &t.native.mpe_fec
	if mpeFec {
		*valptr = C.TRUE
	}
}

// OtherFrequency: TRUE more frequency are use, else not.
func (t *TerrestrialDeliverySystemDescriptor) SetOtherFrequency(otherFrequency bool) {
	valptr := &t.native.other_frequency
	if otherFrequency {
		*valptr = C.TRUE
	}
}
