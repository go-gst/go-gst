// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"fmt"
	"runtime"
	_ "runtime/cgo"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/go-gst/go-gst/pkg/gst"
	"github.com/go-gst/go-gst/pkg/gstsdp"
)

// #cgo pkg-config: gstreamer-rtsp-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtsp/rtsp.h>
// extern GstRTSPResult _gotk4_gstrtsp1_RTSPExtension_ConnectSend(gpointer, gpointer, gpointer, guintptr);
// GstRTSPResult _gotk4_gstrtsp1_RTSPExtension_virtual_after_send(void* fnptr, GstRTSPExtension* arg0, GstRTSPMessage* arg1, GstRTSPMessage* arg2) {
//   return ((GstRTSPResult (*)(GstRTSPExtension*, GstRTSPMessage*, GstRTSPMessage*))(fnptr))(arg0, arg1, arg2);
// };
// GstRTSPResult _gotk4_gstrtsp1_RTSPExtension_virtual_before_send(void* fnptr, GstRTSPExtension* arg0, GstRTSPMessage* arg1) {
//   return ((GstRTSPResult (*)(GstRTSPExtension*, GstRTSPMessage*))(fnptr))(arg0, arg1);
// };
// GstRTSPResult _gotk4_gstrtsp1_RTSPExtension_virtual_parse_sdp(void* fnptr, GstRTSPExtension* arg0, GstSDPMessage* arg1, GstStructure* arg2) {
//   return ((GstRTSPResult (*)(GstRTSPExtension*, GstSDPMessage*, GstStructure*))(fnptr))(arg0, arg1, arg2);
// };
// GstRTSPResult _gotk4_gstrtsp1_RTSPExtension_virtual_receive_request(void* fnptr, GstRTSPExtension* arg0, GstRTSPMessage* arg1) {
//   return ((GstRTSPResult (*)(GstRTSPExtension*, GstRTSPMessage*))(fnptr))(arg0, arg1);
// };
// GstRTSPResult _gotk4_gstrtsp1_RTSPExtension_virtual_send(void* fnptr, GstRTSPExtension* arg0, GstRTSPMessage* arg1, GstRTSPMessage* arg2) {
//   return ((GstRTSPResult (*)(GstRTSPExtension*, GstRTSPMessage*, GstRTSPMessage*))(fnptr))(arg0, arg1, arg2);
// };
// GstRTSPResult _gotk4_gstrtsp1_RTSPExtension_virtual_setup_media(void* fnptr, GstRTSPExtension* arg0, GstSDPMedia* arg1) {
//   return ((GstRTSPResult (*)(GstRTSPExtension*, GstSDPMedia*))(fnptr))(arg0, arg1);
// };
// GstRTSPResult _gotk4_gstrtsp1_RTSPExtension_virtual_stream_select(void* fnptr, GstRTSPExtension* arg0, GstRTSPUrl* arg1) {
//   return ((GstRTSPResult (*)(GstRTSPExtension*, GstRTSPUrl*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstrtsp1_RTSPExtension_virtual_configure_stream(void* fnptr, GstRTSPExtension* arg0, GstCaps* arg1) {
//   return ((gboolean (*)(GstRTSPExtension*, GstCaps*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstrtsp1_RTSPExtension_virtual_detect_server(void* fnptr, GstRTSPExtension* arg0, GstRTSPMessage* arg1) {
//   return ((gboolean (*)(GstRTSPExtension*, GstRTSPMessage*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeRTSPAuthMethod     = coreglib.Type(C.gst_rtsp_auth_method_get_type())
	GTypeRTSPFamily         = coreglib.Type(C.gst_rtsp_family_get_type())
	GTypeRTSPHeaderField    = coreglib.Type(C.gst_rtsp_header_field_get_type())
	GTypeRTSPMsgType        = coreglib.Type(C.gst_rtsp_msg_type_get_type())
	GTypeRTSPRangeUnit      = coreglib.Type(C.gst_rtsp_range_unit_get_type())
	GTypeRTSPResult         = coreglib.Type(C.gst_rtsp_result_get_type())
	GTypeRTSPState          = coreglib.Type(C.gst_rtsp_state_get_type())
	GTypeRTSPStatusCode     = coreglib.Type(C.gst_rtsp_status_code_get_type())
	GTypeRTSPTimeType       = coreglib.Type(C.gst_rtsp_time_type_get_type())
	GTypeRTSPVersion        = coreglib.Type(C.gst_rtsp_version_get_type())
	GTypeRTSPEvent          = coreglib.Type(C.gst_rtsp_event_get_type())
	GTypeRTSPLowerTrans     = coreglib.Type(C.gst_rtsp_lower_trans_get_type())
	GTypeRTSPMethod         = coreglib.Type(C.gst_rtsp_method_get_type())
	GTypeRTSPProfile        = coreglib.Type(C.gst_rtsp_profile_get_type())
	GTypeRTSPTransMode      = coreglib.Type(C.gst_rtsp_trans_mode_get_type())
	GTypeRTSPExtension      = coreglib.Type(C.gst_rtsp_extension_get_type())
	GTypeRTSPAuthCredential = coreglib.Type(C.gst_rtsp_auth_credential_get_type())
	GTypeRTSPAuthParam      = coreglib.Type(C.gst_rtsp_auth_param_get_type())
	GTypeRTSPMessage        = coreglib.Type(C.gst_rtsp_msg_get_type())
	GTypeRTSPURL            = coreglib.Type(C.gst_rtsp_url_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTSPAuthMethod, F: marshalRTSPAuthMethod},
		coreglib.TypeMarshaler{T: GTypeRTSPFamily, F: marshalRTSPFamily},
		coreglib.TypeMarshaler{T: GTypeRTSPHeaderField, F: marshalRTSPHeaderField},
		coreglib.TypeMarshaler{T: GTypeRTSPMsgType, F: marshalRTSPMsgType},
		coreglib.TypeMarshaler{T: GTypeRTSPRangeUnit, F: marshalRTSPRangeUnit},
		coreglib.TypeMarshaler{T: GTypeRTSPResult, F: marshalRTSPResult},
		coreglib.TypeMarshaler{T: GTypeRTSPState, F: marshalRTSPState},
		coreglib.TypeMarshaler{T: GTypeRTSPStatusCode, F: marshalRTSPStatusCode},
		coreglib.TypeMarshaler{T: GTypeRTSPTimeType, F: marshalRTSPTimeType},
		coreglib.TypeMarshaler{T: GTypeRTSPVersion, F: marshalRTSPVersion},
		coreglib.TypeMarshaler{T: GTypeRTSPEvent, F: marshalRTSPEvent},
		coreglib.TypeMarshaler{T: GTypeRTSPLowerTrans, F: marshalRTSPLowerTrans},
		coreglib.TypeMarshaler{T: GTypeRTSPMethod, F: marshalRTSPMethod},
		coreglib.TypeMarshaler{T: GTypeRTSPProfile, F: marshalRTSPProfile},
		coreglib.TypeMarshaler{T: GTypeRTSPTransMode, F: marshalRTSPTransMode},
		coreglib.TypeMarshaler{T: GTypeRTSPExtension, F: marshalRTSPExtension},
		coreglib.TypeMarshaler{T: GTypeRTSPAuthCredential, F: marshalRTSPAuthCredential},
		coreglib.TypeMarshaler{T: GTypeRTSPAuthParam, F: marshalRTSPAuthParam},
		coreglib.TypeMarshaler{T: GTypeRTSPMessage, F: marshalRTSPMessage},
		coreglib.TypeMarshaler{T: GTypeRTSPURL, F: marshalRTSPURL},
	})
}

// RTSP_DEFAULT_PORT (GST_RTSP_DEFAULT_PORT): default RTSP port to connect to.
const RTSP_DEFAULT_PORT = 554

// RTSPAuthMethod (GstRTSPAuthMethod): authentication methods, ordered by
// strength.
type RTSPAuthMethod C.gint

const (
	// RtspAuthNone (GST_RTSP_AUTH_NONE): no authentication.
	RtspAuthNone RTSPAuthMethod = iota
	// RtspAuthBasic (GST_RTSP_AUTH_BASIC): basic authentication.
	RtspAuthBasic
	// RtspAuthDigest (GST_RTSP_AUTH_DIGEST): digest authentication.
	RtspAuthDigest
)

func marshalRTSPAuthMethod(p uintptr) (interface{}, error) {
	return RTSPAuthMethod(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPAuthMethod.
func (r RTSPAuthMethod) String() string {
	switch r {
	case RtspAuthNone:
		return "None"
	case RtspAuthBasic:
		return "Basic"
	case RtspAuthDigest:
		return "Digest"
	default:
		return fmt.Sprintf("RTSPAuthMethod(%d)", r)
	}
}

// RTSPFamily (GstRTSPFamily): possible network families.
type RTSPFamily C.gint

const (
	// RtspFamNone (GST_RTSP_FAM_NONE): unknown network family.
	RtspFamNone RTSPFamily = iota
	// RtspFamInet (GST_RTSP_FAM_INET): internet.
	RtspFamInet
	// RtspFamInet6 (GST_RTSP_FAM_INET6): internet V6.
	RtspFamInet6
)

func marshalRTSPFamily(p uintptr) (interface{}, error) {
	return RTSPFamily(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPFamily.
func (r RTSPFamily) String() string {
	switch r {
	case RtspFamNone:
		return "None"
	case RtspFamInet:
		return "Inet"
	case RtspFamInet6:
		return "Inet6"
	default:
		return fmt.Sprintf("RTSPFamily(%d)", r)
	}
}

// RTSPHeaderField (GstRTSPHeaderField): enumeration of rtsp header fields.
type RTSPHeaderField C.gint

const (
	RtspHdrInvalid RTSPHeaderField = iota
	RtspHdrAccept
	RtspHdrAcceptEncoding
	RtspHdrAcceptLanguage
	RtspHdrAllow
	RtspHdrAuthorization
	RtspHdrBandwidth
	RtspHdrBlocksize
	RtspHdrCacheControl
	RtspHdrConference
	RtspHdrConnection
	RtspHdrContentBase
	RtspHdrContentEncoding
	RtspHdrContentLanguage
	RtspHdrContentLength
	RtspHdrContentLocation
	RtspHdrContentType
	RtspHdrCseq
	RtspHdrDate
	RtspHdrExpires
	RtspHdrFrom
	RtspHdrIfModifiedSince
	RtspHdrLastModified
	RtspHdrProxyAuthenticate
	RtspHdrProxyRequire
	RtspHdrPublic
	RtspHdrRange
	RtspHdrReferer
	RtspHdrRequire
	RtspHdrRetryAfter
	RtspHdrRtpInfo
	RtspHdrScale
	RtspHdrSession
	RtspHdrServer
	RtspHdrSpeed
	RtspHdrTransport
	RtspHdrUnsupported
	RtspHdrUserAgent
	RtspHdrVia
	RtspHdrWwwAuthenticate
	RtspHdrClientChallenge
	RtspHdrRealChallenge1
	RtspHdrRealChallenge2
	RtspHdrRealChallenge3
	RtspHdrSubscribe
	RtspHdrAlert
	RtspHdrClientID
	RtspHdrCompanyID
	RtspHdrGUID
	RtspHdrRegionData
	RtspHdrMaxAsmWidth
	RtspHdrLanguage
	RtspHdrPlayerStartTime
	RtspHdrLocation
	RtspHdrETag
	RtspHdrIfMatch
	RtspHdrAcceptCharset
	RtspHdrSupported
	RtspHdrVary
	RtspHdrXAccelerateStreaming
	RtspHdrXAcceptAuthent
	RtspHdrXAcceptProxyAuthent
	RtspHdrXBroadcastID
	RtspHdrXBurstStreaming
	RtspHdrXNotice
	RtspHdrXPlayerLagTime
	RtspHdrXPlaylist
	RtspHdrXPlaylistChangeNotice
	RtspHdrXPlaylistGenID
	RtspHdrXPlaylistSeekID
	RtspHdrXProxyClientAgent
	RtspHdrXProxyClientVerb
	RtspHdrXRecedingPlaylistchange
	RtspHdrXRtpInfo
	RtspHdrXStartupprofile
	RtspHdrTimestamp
	RtspHdrAuthenticationInfo
	RtspHdrHost
	RtspHdrPragma
	RtspHdrXServerIPAddress
	RtspHdrXSessioncookie
	RtspHdrRtcpInterval
	RtspHdrKeymgmt
	RtspHdrPipelinedRequests
	RtspHdrMediaProperties
	RtspHdrSeekStyle
	RtspHdrAcceptRanges
	RtspHdrFrames
	RtspHdrRateControl
	RtspHdrLast
)

func marshalRTSPHeaderField(p uintptr) (interface{}, error) {
	return RTSPHeaderField(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPHeaderField.
func (r RTSPHeaderField) String() string {
	switch r {
	case RtspHdrInvalid:
		return "Invalid"
	case RtspHdrAccept:
		return "Accept"
	case RtspHdrAcceptEncoding:
		return "AcceptEncoding"
	case RtspHdrAcceptLanguage:
		return "AcceptLanguage"
	case RtspHdrAllow:
		return "Allow"
	case RtspHdrAuthorization:
		return "Authorization"
	case RtspHdrBandwidth:
		return "Bandwidth"
	case RtspHdrBlocksize:
		return "Blocksize"
	case RtspHdrCacheControl:
		return "CacheControl"
	case RtspHdrConference:
		return "Conference"
	case RtspHdrConnection:
		return "Connection"
	case RtspHdrContentBase:
		return "ContentBase"
	case RtspHdrContentEncoding:
		return "ContentEncoding"
	case RtspHdrContentLanguage:
		return "ContentLanguage"
	case RtspHdrContentLength:
		return "ContentLength"
	case RtspHdrContentLocation:
		return "ContentLocation"
	case RtspHdrContentType:
		return "ContentType"
	case RtspHdrCseq:
		return "Cseq"
	case RtspHdrDate:
		return "Date"
	case RtspHdrExpires:
		return "Expires"
	case RtspHdrFrom:
		return "From"
	case RtspHdrIfModifiedSince:
		return "IfModifiedSince"
	case RtspHdrLastModified:
		return "LastModified"
	case RtspHdrProxyAuthenticate:
		return "ProxyAuthenticate"
	case RtspHdrProxyRequire:
		return "ProxyRequire"
	case RtspHdrPublic:
		return "Public"
	case RtspHdrRange:
		return "Range"
	case RtspHdrReferer:
		return "Referer"
	case RtspHdrRequire:
		return "Require"
	case RtspHdrRetryAfter:
		return "RetryAfter"
	case RtspHdrRtpInfo:
		return "RtpInfo"
	case RtspHdrScale:
		return "Scale"
	case RtspHdrSession:
		return "Session"
	case RtspHdrServer:
		return "Server"
	case RtspHdrSpeed:
		return "Speed"
	case RtspHdrTransport:
		return "Transport"
	case RtspHdrUnsupported:
		return "Unsupported"
	case RtspHdrUserAgent:
		return "UserAgent"
	case RtspHdrVia:
		return "Via"
	case RtspHdrWwwAuthenticate:
		return "WwwAuthenticate"
	case RtspHdrClientChallenge:
		return "ClientChallenge"
	case RtspHdrRealChallenge1:
		return "RealChallenge1"
	case RtspHdrRealChallenge2:
		return "RealChallenge2"
	case RtspHdrRealChallenge3:
		return "RealChallenge3"
	case RtspHdrSubscribe:
		return "Subscribe"
	case RtspHdrAlert:
		return "Alert"
	case RtspHdrClientID:
		return "ClientID"
	case RtspHdrCompanyID:
		return "CompanyID"
	case RtspHdrGUID:
		return "GUID"
	case RtspHdrRegionData:
		return "RegionData"
	case RtspHdrMaxAsmWidth:
		return "MaxAsmWidth"
	case RtspHdrLanguage:
		return "Language"
	case RtspHdrPlayerStartTime:
		return "PlayerStartTime"
	case RtspHdrLocation:
		return "Location"
	case RtspHdrETag:
		return "ETag"
	case RtspHdrIfMatch:
		return "IfMatch"
	case RtspHdrAcceptCharset:
		return "AcceptCharset"
	case RtspHdrSupported:
		return "Supported"
	case RtspHdrVary:
		return "Vary"
	case RtspHdrXAccelerateStreaming:
		return "XAccelerateStreaming"
	case RtspHdrXAcceptAuthent:
		return "XAcceptAuthent"
	case RtspHdrXAcceptProxyAuthent:
		return "XAcceptProxyAuthent"
	case RtspHdrXBroadcastID:
		return "XBroadcastID"
	case RtspHdrXBurstStreaming:
		return "XBurstStreaming"
	case RtspHdrXNotice:
		return "XNotice"
	case RtspHdrXPlayerLagTime:
		return "XPlayerLagTime"
	case RtspHdrXPlaylist:
		return "XPlaylist"
	case RtspHdrXPlaylistChangeNotice:
		return "XPlaylistChangeNotice"
	case RtspHdrXPlaylistGenID:
		return "XPlaylistGenID"
	case RtspHdrXPlaylistSeekID:
		return "XPlaylistSeekID"
	case RtspHdrXProxyClientAgent:
		return "XProxyClientAgent"
	case RtspHdrXProxyClientVerb:
		return "XProxyClientVerb"
	case RtspHdrXRecedingPlaylistchange:
		return "XRecedingPlaylistchange"
	case RtspHdrXRtpInfo:
		return "XRtpInfo"
	case RtspHdrXStartupprofile:
		return "XStartupprofile"
	case RtspHdrTimestamp:
		return "Timestamp"
	case RtspHdrAuthenticationInfo:
		return "AuthenticationInfo"
	case RtspHdrHost:
		return "Host"
	case RtspHdrPragma:
		return "Pragma"
	case RtspHdrXServerIPAddress:
		return "XServerIPAddress"
	case RtspHdrXSessioncookie:
		return "XSessioncookie"
	case RtspHdrRtcpInterval:
		return "RtcpInterval"
	case RtspHdrKeymgmt:
		return "Keymgmt"
	case RtspHdrPipelinedRequests:
		return "PipelinedRequests"
	case RtspHdrMediaProperties:
		return "MediaProperties"
	case RtspHdrSeekStyle:
		return "SeekStyle"
	case RtspHdrAcceptRanges:
		return "AcceptRanges"
	case RtspHdrFrames:
		return "Frames"
	case RtspHdrRateControl:
		return "RateControl"
	case RtspHdrLast:
		return "Last"
	default:
		return fmt.Sprintf("RTSPHeaderField(%d)", r)
	}
}

// RTSPMsgType (GstRTSPMsgType): type of a message.
type RTSPMsgType C.gint

const (
	// RtspMessageInvalid (GST_RTSP_MESSAGE_INVALID): invalid message type.
	RtspMessageInvalid RTSPMsgType = iota
	// RtspMessageRequest (GST_RTSP_MESSAGE_REQUEST): RTSP request message.
	RtspMessageRequest
	// RtspMessageResponse (GST_RTSP_MESSAGE_RESPONSE): RTSP response message.
	RtspMessageResponse
	// RtspMessageHTTPRequest (GST_RTSP_MESSAGE_HTTP_REQUEST): HTTP request
	// message.
	RtspMessageHTTPRequest
	// RtspMessageHTTPResponse (GST_RTSP_MESSAGE_HTTP_RESPONSE): HTTP response
	// message.
	RtspMessageHTTPResponse
	// RtspMessageData (GST_RTSP_MESSAGE_DATA): data message.
	RtspMessageData
)

func marshalRTSPMsgType(p uintptr) (interface{}, error) {
	return RTSPMsgType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPMsgType.
func (r RTSPMsgType) String() string {
	switch r {
	case RtspMessageInvalid:
		return "Invalid"
	case RtspMessageRequest:
		return "Request"
	case RtspMessageResponse:
		return "Response"
	case RtspMessageHTTPRequest:
		return "HTTPRequest"
	case RtspMessageHTTPResponse:
		return "HTTPResponse"
	case RtspMessageData:
		return "Data"
	default:
		return fmt.Sprintf("RTSPMsgType(%d)", r)
	}
}

// RTSPRangeUnit (GstRTSPRangeUnit): different possible time range units.
type RTSPRangeUnit C.gint

const (
	// RtspRangeSmpte (GST_RTSP_RANGE_SMPTE): SMPTE timecode.
	RtspRangeSmpte RTSPRangeUnit = iota
	// RtspRangeSmpte30Drop (GST_RTSP_RANGE_SMPTE_30_DROP): 29.97 frames per
	// second.
	RtspRangeSmpte30Drop
	// RtspRangeSmpte25 (GST_RTSP_RANGE_SMPTE_25): 25 frames per second.
	RtspRangeSmpte25
	// RtspRangeNpt (GST_RTSP_RANGE_NPT): normal play time.
	RtspRangeNpt
	// RtspRangeClock (GST_RTSP_RANGE_CLOCK): absolute time expressed as ISO
	// 8601 timestamps.
	RtspRangeClock
)

func marshalRTSPRangeUnit(p uintptr) (interface{}, error) {
	return RTSPRangeUnit(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPRangeUnit.
func (r RTSPRangeUnit) String() string {
	switch r {
	case RtspRangeSmpte:
		return "Smpte"
	case RtspRangeSmpte30Drop:
		return "Smpte30Drop"
	case RtspRangeSmpte25:
		return "Smpte25"
	case RtspRangeNpt:
		return "Npt"
	case RtspRangeClock:
		return "Clock"
	default:
		return fmt.Sprintf("RTSPRangeUnit(%d)", r)
	}
}

// RTSPResult (GstRTSPResult): result codes from the RTSP functions.
type RTSPResult C.gint

const (
	// RtspOK (GST_RTSP_OK): no error.
	RtspOK RTSPResult = 0
	// RtspOKRedirect (GST_RTSP_OK_REDIRECT): RTSP request is successful,
	// but was redirected.
	RtspOKRedirect RTSPResult = 1
	// RtspError (GST_RTSP_ERROR): some unspecified error occurred.
	RtspError RTSPResult = -1
	// RtspEinval (GST_RTSP_EINVAL): invalid arguments were provided to a
	// function.
	RtspEinval RTSPResult = -2
	// RtspEintr (GST_RTSP_EINTR): operation was canceled.
	RtspEintr RTSPResult = -3
	// RtspEnomem (GST_RTSP_ENOMEM): no memory was available for the operation.
	RtspEnomem RTSPResult = -4
	// RtspEresolv (GST_RTSP_ERESOLV): host resolve error occurred.
	RtspEresolv RTSPResult = -5
	// RtspEnotimpl (GST_RTSP_ENOTIMPL): function not implemented.
	RtspEnotimpl RTSPResult = -6
	// RtspEsys (GST_RTSP_ESYS): system error occurred, errno contains more
	// details.
	RtspEsys RTSPResult = -7
	// RtspEparse (GST_RTSP_EPARSE): parsing error occurred.
	RtspEparse RTSPResult = -8
	// RtspEwsastart (GST_RTSP_EWSASTART) windows networking could not start.
	RtspEwsastart RTSPResult = -9
	// RtspEwsaversion (GST_RTSP_EWSAVERSION) windows networking stack has wrong
	// version.
	RtspEwsaversion RTSPResult = -10
	// RtspEeof (GST_RTSP_EEOF): end-of-file was reached.
	RtspEeof RTSPResult = -11
	// RtspEnet (GST_RTSP_ENET): network problem occurred, h_errno contains more
	// details.
	RtspEnet RTSPResult = -12
	// RtspEnotip (GST_RTSP_ENOTIP): host is not an IP host.
	RtspEnotip RTSPResult = -13
	// RtspEtimeout (GST_RTSP_ETIMEOUT): timeout occurred.
	RtspEtimeout RTSPResult = -14
	// RtspEtget (GST_RTSP_ETGET): tunnel GET request has been performed.
	RtspEtget RTSPResult = -15
	// RtspEtpost (GST_RTSP_ETPOST): tunnel POST request has been performed.
	RtspEtpost RTSPResult = -16
	// RtspElast (GST_RTSP_ELAST): last error.
	RtspElast RTSPResult = -17
)

func marshalRTSPResult(p uintptr) (interface{}, error) {
	return RTSPResult(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPResult.
func (r RTSPResult) String() string {
	switch r {
	case RtspOK:
		return "OK"
	case RtspOKRedirect:
		return "OKRedirect"
	case RtspError:
		return "Error"
	case RtspEinval:
		return "Einval"
	case RtspEintr:
		return "Eintr"
	case RtspEnomem:
		return "Enomem"
	case RtspEresolv:
		return "Eresolv"
	case RtspEnotimpl:
		return "Enotimpl"
	case RtspEsys:
		return "Esys"
	case RtspEparse:
		return "Eparse"
	case RtspEwsastart:
		return "Ewsastart"
	case RtspEwsaversion:
		return "Ewsaversion"
	case RtspEeof:
		return "Eeof"
	case RtspEnet:
		return "Enet"
	case RtspEnotip:
		return "Enotip"
	case RtspEtimeout:
		return "Etimeout"
	case RtspEtget:
		return "Etget"
	case RtspEtpost:
		return "Etpost"
	case RtspElast:
		return "Elast"
	default:
		return fmt.Sprintf("RTSPResult(%d)", r)
	}
}

// RTSPState (GstRTSPState): different RTSP states.
type RTSPState C.gint

const (
	// RtspStateInvalid (GST_RTSP_STATE_INVALID): invalid state.
	RtspStateInvalid RTSPState = iota
	// RtspStateInit (GST_RTSP_STATE_INIT): initializing.
	RtspStateInit
	// RtspStateReady (GST_RTSP_STATE_READY): ready for operation.
	RtspStateReady
	// RtspStateSeeking (GST_RTSP_STATE_SEEKING): seeking in progress.
	RtspStateSeeking
	// RtspStatePlaying (GST_RTSP_STATE_PLAYING): playing.
	RtspStatePlaying
	// RtspStateRecording (GST_RTSP_STATE_RECORDING): recording.
	RtspStateRecording
)

func marshalRTSPState(p uintptr) (interface{}, error) {
	return RTSPState(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPState.
func (r RTSPState) String() string {
	switch r {
	case RtspStateInvalid:
		return "Invalid"
	case RtspStateInit:
		return "Init"
	case RtspStateReady:
		return "Ready"
	case RtspStateSeeking:
		return "Seeking"
	case RtspStatePlaying:
		return "Playing"
	case RtspStateRecording:
		return "Recording"
	default:
		return fmt.Sprintf("RTSPState(%d)", r)
	}
}

// RTSPStatusCode (GstRTSPStatusCode): enumeration of rtsp status codes.
type RTSPStatusCode C.gint

const (
	RtspStsInvalid          RTSPStatusCode = 0
	RtspStsContinue         RTSPStatusCode = 100
	RtspStsOK               RTSPStatusCode = 200
	RtspStsCreated          RTSPStatusCode = 201
	RtspStsLowOnStorage     RTSPStatusCode = 250
	RtspStsMultipleChoices  RTSPStatusCode = 300
	RtspStsMovedPermanently RTSPStatusCode = 301
	RtspStsMoveTemporarily  RTSPStatusCode = 302
	RtspStsSeeOther         RTSPStatusCode = 303
	RtspStsNotModified      RTSPStatusCode = 304
	RtspStsUseProxy         RTSPStatusCode = 305
	// RtspStsRedirectTemporarily (GST_RTSP_STS_REDIRECT_TEMPORARILY): RTSP
	// request is temporarily redirected.
	RtspStsRedirectTemporarily RTSPStatusCode = 307
	// RtspStsRedirectPermanently (GST_RTSP_STS_REDIRECT_PERMANENTLY): RTSP
	// request is permanently redirected.
	RtspStsRedirectPermanently            RTSPStatusCode = 308
	RtspStsBadRequest                     RTSPStatusCode = 400
	RtspStsUnauthorized                   RTSPStatusCode = 401
	RtspStsPaymentRequired                RTSPStatusCode = 402
	RtspStsForbidden                      RTSPStatusCode = 403
	RtspStsNotFound                       RTSPStatusCode = 404
	RtspStsMethodNotAllowed               RTSPStatusCode = 405
	RtspStsNotAcceptable                  RTSPStatusCode = 406
	RtspStsProxyAuthRequired              RTSPStatusCode = 407
	RtspStsRequestTimeout                 RTSPStatusCode = 408
	RtspStsGone                           RTSPStatusCode = 410
	RtspStsLengthRequired                 RTSPStatusCode = 411
	RtspStsPreconditionFailed             RTSPStatusCode = 412
	RtspStsRequestEntityTooLarge          RTSPStatusCode = 413
	RtspStsRequestURITooLarge             RTSPStatusCode = 414
	RtspStsUnsupportedMediaType           RTSPStatusCode = 415
	RtspStsParameterNotUnderstood         RTSPStatusCode = 451
	RtspStsConferenceNotFound             RTSPStatusCode = 452
	RtspStsNotEnoughBandwidth             RTSPStatusCode = 453
	RtspStsSessionNotFound                RTSPStatusCode = 454
	RtspStsMethodNotValidInThisState      RTSPStatusCode = 455
	RtspStsHeaderFieldNotValidForResource RTSPStatusCode = 456
	RtspStsInvalidRange                   RTSPStatusCode = 457
	RtspStsParameterIsReadonly            RTSPStatusCode = 458
	RtspStsAggregateOperationNotAllowed   RTSPStatusCode = 459
	RtspStsOnlyAggregateOperationAllowed  RTSPStatusCode = 460
	RtspStsUnsupportedTransport           RTSPStatusCode = 461
	RtspStsDestinationUnreachable         RTSPStatusCode = 462
	RtspStsKeyManagementFailure           RTSPStatusCode = 463
	RtspStsInternalServerError            RTSPStatusCode = 500
	RtspStsNotImplemented                 RTSPStatusCode = 501
	RtspStsBadGateway                     RTSPStatusCode = 502
	RtspStsServiceUnavailable             RTSPStatusCode = 503
	RtspStsGatewayTimeout                 RTSPStatusCode = 504
	RtspStsRtspVersionNotSupported        RTSPStatusCode = 505
	RtspStsOptionNotSupported             RTSPStatusCode = 551
)

func marshalRTSPStatusCode(p uintptr) (interface{}, error) {
	return RTSPStatusCode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPStatusCode.
func (r RTSPStatusCode) String() string {
	switch r {
	case RtspStsInvalid:
		return "Invalid"
	case RtspStsContinue:
		return "Continue"
	case RtspStsOK:
		return "OK"
	case RtspStsCreated:
		return "Created"
	case RtspStsLowOnStorage:
		return "LowOnStorage"
	case RtspStsMultipleChoices:
		return "MultipleChoices"
	case RtspStsMovedPermanently:
		return "MovedPermanently"
	case RtspStsMoveTemporarily:
		return "MoveTemporarily"
	case RtspStsSeeOther:
		return "SeeOther"
	case RtspStsNotModified:
		return "NotModified"
	case RtspStsUseProxy:
		return "UseProxy"
	case RtspStsRedirectTemporarily:
		return "RedirectTemporarily"
	case RtspStsRedirectPermanently:
		return "RedirectPermanently"
	case RtspStsBadRequest:
		return "BadRequest"
	case RtspStsUnauthorized:
		return "Unauthorized"
	case RtspStsPaymentRequired:
		return "PaymentRequired"
	case RtspStsForbidden:
		return "Forbidden"
	case RtspStsNotFound:
		return "NotFound"
	case RtspStsMethodNotAllowed:
		return "MethodNotAllowed"
	case RtspStsNotAcceptable:
		return "NotAcceptable"
	case RtspStsProxyAuthRequired:
		return "ProxyAuthRequired"
	case RtspStsRequestTimeout:
		return "RequestTimeout"
	case RtspStsGone:
		return "Gone"
	case RtspStsLengthRequired:
		return "LengthRequired"
	case RtspStsPreconditionFailed:
		return "PreconditionFailed"
	case RtspStsRequestEntityTooLarge:
		return "RequestEntityTooLarge"
	case RtspStsRequestURITooLarge:
		return "RequestURITooLarge"
	case RtspStsUnsupportedMediaType:
		return "UnsupportedMediaType"
	case RtspStsParameterNotUnderstood:
		return "ParameterNotUnderstood"
	case RtspStsConferenceNotFound:
		return "ConferenceNotFound"
	case RtspStsNotEnoughBandwidth:
		return "NotEnoughBandwidth"
	case RtspStsSessionNotFound:
		return "SessionNotFound"
	case RtspStsMethodNotValidInThisState:
		return "MethodNotValidInThisState"
	case RtspStsHeaderFieldNotValidForResource:
		return "HeaderFieldNotValidForResource"
	case RtspStsInvalidRange:
		return "InvalidRange"
	case RtspStsParameterIsReadonly:
		return "ParameterIsReadonly"
	case RtspStsAggregateOperationNotAllowed:
		return "AggregateOperationNotAllowed"
	case RtspStsOnlyAggregateOperationAllowed:
		return "OnlyAggregateOperationAllowed"
	case RtspStsUnsupportedTransport:
		return "UnsupportedTransport"
	case RtspStsDestinationUnreachable:
		return "DestinationUnreachable"
	case RtspStsKeyManagementFailure:
		return "KeyManagementFailure"
	case RtspStsInternalServerError:
		return "InternalServerError"
	case RtspStsNotImplemented:
		return "NotImplemented"
	case RtspStsBadGateway:
		return "BadGateway"
	case RtspStsServiceUnavailable:
		return "ServiceUnavailable"
	case RtspStsGatewayTimeout:
		return "GatewayTimeout"
	case RtspStsRtspVersionNotSupported:
		return "RtspVersionNotSupported"
	case RtspStsOptionNotSupported:
		return "OptionNotSupported"
	default:
		return fmt.Sprintf("RTSPStatusCode(%d)", r)
	}
}

// RTSPTimeType (GstRTSPTimeType): possible time types.
type RTSPTimeType C.gint

const (
	// RtspTimeSeconds (GST_RTSP_TIME_SECONDS): seconds.
	RtspTimeSeconds RTSPTimeType = iota
	// RtspTimeNow (GST_RTSP_TIME_NOW): now.
	RtspTimeNow
	// RtspTimeEnd (GST_RTSP_TIME_END): end.
	RtspTimeEnd
	// RtspTimeFrames (GST_RTSP_TIME_FRAMES) frames and subframes.
	RtspTimeFrames
	// RtspTimeUTC (GST_RTSP_TIME_UTC): UTC time.
	RtspTimeUTC
)

func marshalRTSPTimeType(p uintptr) (interface{}, error) {
	return RTSPTimeType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPTimeType.
func (r RTSPTimeType) String() string {
	switch r {
	case RtspTimeSeconds:
		return "Seconds"
	case RtspTimeNow:
		return "Now"
	case RtspTimeEnd:
		return "End"
	case RtspTimeFrames:
		return "Frames"
	case RtspTimeUTC:
		return "UTC"
	default:
		return fmt.Sprintf("RTSPTimeType(%d)", r)
	}
}

// RTSPVersion (GstRTSPVersion): supported RTSP versions.
type RTSPVersion C.gint

const (
	// RtspVersionInvalid (GST_RTSP_VERSION_INVALID): unknown/invalid version.
	RtspVersionInvalid RTSPVersion = 0
	// RtspVersion10 (GST_RTSP_VERSION_1_0): version 1.0.
	RtspVersion10 RTSPVersion = 16
	// RtspVersion11 (GST_RTSP_VERSION_1_1): version 1.1.
	RtspVersion11 RTSPVersion = 17
	// RtspVersion20 (GST_RTSP_VERSION_2_0): version 2.0.
	RtspVersion20 RTSPVersion = 32
)

func marshalRTSPVersion(p uintptr) (interface{}, error) {
	return RTSPVersion(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPVersion.
func (r RTSPVersion) String() string {
	switch r {
	case RtspVersionInvalid:
		return "Invalid"
	case RtspVersion10:
		return "10"
	case RtspVersion11:
		return "11"
	case RtspVersion20:
		return "20"
	default:
		return fmt.Sprintf("RTSPVersion(%d)", r)
	}
}

// RTSPVersionAsText (gst_rtsp_version_as_text): convert version to a string.
//
// The function takes the following parameters:
//
//   - version: RTSPVersion.
//
// The function returns the following values:
//
//   - utf8: string representation of version.
func RTSPVersionAsText(version RTSPVersion) string {
	var _arg1 C.GstRTSPVersion // out
	var _cret *C.gchar         // in

	_arg1 = C.GstRTSPVersion(version)

	_cret = C.gst_rtsp_version_as_text(_arg1)
	runtime.KeepAlive(version)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// RTSPEvent (GstRTSPEvent): possible events for the connection.
type RTSPEvent C.guint

const (
	// RtspEvRead (GST_RTSP_EV_READ): connection is readable.
	RtspEvRead RTSPEvent = 0b1
	// RtspEvWrite (GST_RTSP_EV_WRITE): connection is writable.
	RtspEvWrite RTSPEvent = 0b10
)

func marshalRTSPEvent(p uintptr) (interface{}, error) {
	return RTSPEvent(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RTSPEvent.
func (r RTSPEvent) String() string {
	if r == 0 {
		return "RTSPEvent(0)"
	}

	var builder strings.Builder
	builder.Grow(22)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RtspEvRead:
			builder.WriteString("Read|")
		case RtspEvWrite:
			builder.WriteString("Write|")
		default:
			builder.WriteString(fmt.Sprintf("RTSPEvent(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RTSPEvent) Has(other RTSPEvent) bool {
	return (r & other) == other
}

// RTSPLowerTrans (GstRTSPLowerTrans): different transport methods.
type RTSPLowerTrans C.guint

const (
	// RtspLowerTransUnknown (GST_RTSP_LOWER_TRANS_UNKNOWN): invalid transport
	// flag.
	RtspLowerTransUnknown RTSPLowerTrans = 0b0
	// RtspLowerTransUDP (GST_RTSP_LOWER_TRANS_UDP): stream data over UDP.
	RtspLowerTransUDP RTSPLowerTrans = 0b1
	// RtspLowerTransUDPMcast (GST_RTSP_LOWER_TRANS_UDP_MCAST): stream data over
	// UDP multicast.
	RtspLowerTransUDPMcast RTSPLowerTrans = 0b10
	// RtspLowerTransTCP (GST_RTSP_LOWER_TRANS_TCP): stream data over TCP.
	RtspLowerTransTCP RTSPLowerTrans = 0b100
	// RtspLowerTransHTTP (GST_RTSP_LOWER_TRANS_HTTP): stream data tunneled over
	// HTTP.
	RtspLowerTransHTTP RTSPLowerTrans = 0b10000
	// RtspLowerTransTLS (GST_RTSP_LOWER_TRANS_TLS): encrypt TCP and HTTP with
	// TLS.
	RtspLowerTransTLS RTSPLowerTrans = 0b100000
)

func marshalRTSPLowerTrans(p uintptr) (interface{}, error) {
	return RTSPLowerTrans(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RTSPLowerTrans.
func (r RTSPLowerTrans) String() string {
	if r == 0 {
		return "RTSPLowerTrans(0)"
	}

	var builder strings.Builder
	builder.Grow(117)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RtspLowerTransUnknown:
			builder.WriteString("Unknown|")
		case RtspLowerTransUDP:
			builder.WriteString("UDP|")
		case RtspLowerTransUDPMcast:
			builder.WriteString("UDPMcast|")
		case RtspLowerTransTCP:
			builder.WriteString("TCP|")
		case RtspLowerTransHTTP:
			builder.WriteString("HTTP|")
		case RtspLowerTransTLS:
			builder.WriteString("TLS|")
		default:
			builder.WriteString(fmt.Sprintf("RTSPLowerTrans(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RTSPLowerTrans) Has(other RTSPLowerTrans) bool {
	return (r & other) == other
}

// RTSPMethod (GstRTSPMethod): different supported RTSP methods.
type RTSPMethod C.guint

const (
	// RtspInvalid (GST_RTSP_INVALID): invalid method.
	RtspInvalid RTSPMethod = 0b0
	// RtspDescribe (GST_RTSP_DESCRIBE): DESCRIBE method.
	RtspDescribe RTSPMethod = 0b1
	// RtspAnnounce (GST_RTSP_ANNOUNCE): ANNOUNCE method.
	RtspAnnounce RTSPMethod = 0b10
	// RtspGetParameter (GST_RTSP_GET_PARAMETER): GET_PARAMETER method.
	RtspGetParameter RTSPMethod = 0b100
	// RtspOptions (GST_RTSP_OPTIONS): OPTIONS method.
	RtspOptions RTSPMethod = 0b1000
	// RtspPause (GST_RTSP_PAUSE): PAUSE method.
	RtspPause RTSPMethod = 0b10000
	// RtspPlay (GST_RTSP_PLAY): PLAY method.
	RtspPlay RTSPMethod = 0b100000
	// RtspRecord (GST_RTSP_RECORD): RECORD method.
	RtspRecord RTSPMethod = 0b1000000
	// RtspRedirect (GST_RTSP_REDIRECT): REDIRECT method.
	RtspRedirect RTSPMethod = 0b10000000
	// RtspSetup (GST_RTSP_SETUP): SETUP method.
	RtspSetup RTSPMethod = 0b100000000
	// RtspSetParameter (GST_RTSP_SET_PARAMETER): SET_PARAMETER method.
	RtspSetParameter RTSPMethod = 0b1000000000
	// RtspTeardown (GST_RTSP_TEARDOWN): TEARDOWN method.
	RtspTeardown RTSPMethod = 0b10000000000
	// RtspGet (GST_RTSP_GET): GET method (HTTP).
	RtspGet RTSPMethod = 0b100000000000
	// RtspPost (GST_RTSP_POST): POST method (HTTP).
	RtspPost RTSPMethod = 0b1000000000000
)

func marshalRTSPMethod(p uintptr) (interface{}, error) {
	return RTSPMethod(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RTSPMethod.
func (r RTSPMethod) String() string {
	if r == 0 {
		return "RTSPMethod(0)"
	}

	var builder strings.Builder
	builder.Grow(166)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RtspInvalid:
			builder.WriteString("Invalid|")
		case RtspDescribe:
			builder.WriteString("Describe|")
		case RtspAnnounce:
			builder.WriteString("Announce|")
		case RtspGetParameter:
			builder.WriteString("GetParameter|")
		case RtspOptions:
			builder.WriteString("Options|")
		case RtspPause:
			builder.WriteString("Pause|")
		case RtspPlay:
			builder.WriteString("Play|")
		case RtspRecord:
			builder.WriteString("Record|")
		case RtspRedirect:
			builder.WriteString("Redirect|")
		case RtspSetup:
			builder.WriteString("Setup|")
		case RtspSetParameter:
			builder.WriteString("SetParameter|")
		case RtspTeardown:
			builder.WriteString("Teardown|")
		case RtspGet:
			builder.WriteString("Get|")
		case RtspPost:
			builder.WriteString("Post|")
		default:
			builder.WriteString(fmt.Sprintf("RTSPMethod(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RTSPMethod) Has(other RTSPMethod) bool {
	return (r & other) == other
}

// RTSPMethodAsText (gst_rtsp_method_as_text): convert method to a string.
//
// The function takes the following parameters:
//
//   - method: RTSPMethod.
//
// The function returns the following values:
//
//   - utf8 (optional): string representation of method.
func RTSPMethodAsText(method RTSPMethod) string {
	var _arg1 C.GstRTSPMethod // out
	var _cret *C.gchar        // in

	_arg1 = C.GstRTSPMethod(method)

	_cret = C.gst_rtsp_method_as_text(_arg1)
	runtime.KeepAlive(method)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// RTSPProfile (GstRTSPProfile): transfer profile to use.
type RTSPProfile C.guint

const (
	// RtspProfileUnknown (GST_RTSP_PROFILE_UNKNOWN): invalid profile.
	RtspProfileUnknown RTSPProfile = 0b0
	// RtspProfileAvp (GST_RTSP_PROFILE_AVP): audio/Visual profile (RFC 3551).
	RtspProfileAvp RTSPProfile = 0b1
	// RtspProfileSavp (GST_RTSP_PROFILE_SAVP): secure Audio/Visual profile (RFC
	// 3711).
	RtspProfileSavp RTSPProfile = 0b10
	// RtspProfileAvpf (GST_RTSP_PROFILE_AVPF): audio/Visual profile with
	// feedback (RFC 4585).
	RtspProfileAvpf RTSPProfile = 0b100
	// RtspProfileSavpf (GST_RTSP_PROFILE_SAVPF): secure Audio/Visual profile
	// with feedback (RFC 5124).
	RtspProfileSavpf RTSPProfile = 0b1000
)

func marshalRTSPProfile(p uintptr) (interface{}, error) {
	return RTSPProfile(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RTSPProfile.
func (r RTSPProfile) String() string {
	if r == 0 {
		return "RTSPProfile(0)"
	}

	var builder strings.Builder
	builder.Grow(82)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RtspProfileUnknown:
			builder.WriteString("Unknown|")
		case RtspProfileAvp:
			builder.WriteString("Avp|")
		case RtspProfileSavp:
			builder.WriteString("Savp|")
		case RtspProfileAvpf:
			builder.WriteString("Avpf|")
		case RtspProfileSavpf:
			builder.WriteString("Savpf|")
		default:
			builder.WriteString(fmt.Sprintf("RTSPProfile(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RTSPProfile) Has(other RTSPProfile) bool {
	return (r & other) == other
}

// RTSPTransMode (GstRTSPTransMode): transfer mode to use.
type RTSPTransMode C.guint

const (
	// RtspTransUnknown (GST_RTSP_TRANS_UNKNOWN): invalid tansport mode.
	RtspTransUnknown RTSPTransMode = 0b0
	// RtspTransRtp (GST_RTSP_TRANS_RTP): transfer RTP data.
	RtspTransRtp RTSPTransMode = 0b1
	// RtspTransRdt (GST_RTSP_TRANS_RDT): transfer RDT (RealMedia) data.
	RtspTransRdt RTSPTransMode = 0b10
)

func marshalRTSPTransMode(p uintptr) (interface{}, error) {
	return RTSPTransMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RTSPTransMode.
func (r RTSPTransMode) String() string {
	if r == 0 {
		return "RTSPTransMode(0)"
	}

	var builder strings.Builder
	builder.Grow(42)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RtspTransUnknown:
			builder.WriteString("Unknown|")
		case RtspTransRtp:
			builder.WriteString("Rtp|")
		case RtspTransRdt:
			builder.WriteString("Rdt|")
		default:
			builder.WriteString(fmt.Sprintf("RTSPTransMode(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RTSPTransMode) Has(other RTSPTransMode) bool {
	return (r & other) == other
}

type RTSPConnectionAcceptCertificateFunc func(conn gio.TLSConnectioner, peerCert gio.TLSCertificater, errors gio.TLSCertificateFlags) (ok bool)

// RtspFindHeaderField (gst_rtsp_find_header_field): convert header to a
// RTSPHeaderField.
//
// The function takes the following parameters:
//
//   - header string.
//
// The function returns the following values:
//
//   - rtspHeaderField for header or T_RTSP_HDR_INVALID if the header field is
//     unknown.
func RtspFindHeaderField(header string) RTSPHeaderField {
	var _arg1 *C.gchar             // out
	var _cret C.GstRTSPHeaderField // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_find_header_field(_arg1)
	runtime.KeepAlive(header)

	var _rtspHeaderField RTSPHeaderField // out

	_rtspHeaderField = RTSPHeaderField(_cret)

	return _rtspHeaderField
}

// RtspFindMethod (gst_rtsp_find_method): convert method to a RTSPMethod.
//
// The function takes the following parameters:
//
//   - method: method.
//
// The function returns the following values:
//
//   - rtspMethod for method or T_RTSP_INVALID if the method is unknown.
func RtspFindMethod(method string) RTSPMethod {
	var _arg1 *C.gchar        // out
	var _cret C.GstRTSPMethod // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(method)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_find_method(_arg1)
	runtime.KeepAlive(method)

	var _rtspMethod RTSPMethod // out

	_rtspMethod = RTSPMethod(_cret)

	return _rtspMethod
}

// RtspGenerateDigestAuthResponse (gst_rtsp_generate_digest_auth_response)
// calculates the digest auth response from the values given by the server and
// the username and password. See RFC2069 for details.
//
// Currently only supported algorithm "md5".
//
// The function takes the following parameters:
//
//   - algorithm (optional): hash algorithm to use, or NULL for MD5.
//   - method: request method, e.g. PLAY.
//   - realm: realm.
//   - username: username.
//   - password: password.
//   - uri: original request URI.
//   - nonce: nonce.
//
// The function returns the following values:
//
//   - utf8 (optional): authentication response or NULL if unsupported.
func RtspGenerateDigestAuthResponse(algorithm, method, realm, username, password, uri, nonce string) string {
	var _arg1 *C.gchar // out
	var _arg2 *C.gchar // out
	var _arg3 *C.gchar // out
	var _arg4 *C.gchar // out
	var _arg5 *C.gchar // out
	var _arg6 *C.gchar // out
	var _arg7 *C.gchar // out
	var _cret *C.gchar // in

	if algorithm != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(algorithm)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(method)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(realm)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(username)))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.gchar)(unsafe.Pointer(C.CString(password)))
	defer C.free(unsafe.Pointer(_arg5))
	_arg6 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg6))
	_arg7 = (*C.gchar)(unsafe.Pointer(C.CString(nonce)))
	defer C.free(unsafe.Pointer(_arg7))

	_cret = C.gst_rtsp_generate_digest_auth_response(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(algorithm)
	runtime.KeepAlive(method)
	runtime.KeepAlive(realm)
	runtime.KeepAlive(username)
	runtime.KeepAlive(password)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(nonce)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// RtspGenerateDigestAuthResponseFromMD5
// (gst_rtsp_generate_digest_auth_response_from_md5) calculates the digest auth
// response from the values given by the server and the md5sum. See RFC2069 for
// details.
//
// This function is useful when the passwords are not stored in clear text,
// but instead in the same format as the .htdigest file.
//
// Currently only supported algorithm "md5".
//
// The function takes the following parameters:
//
//   - algorithm (optional): hash algorithm to use, or NULL for MD5.
//   - method: request method, e.g. PLAY.
//   - md5 sum of username:realm:password.
//   - uri: original request URI.
//   - nonce: nonce.
//
// The function returns the following values:
//
//   - utf8 (optional): authentication response or NULL if unsupported.
func RtspGenerateDigestAuthResponseFromMD5(algorithm, method, md5, uri, nonce string) string {
	var _arg1 *C.gchar // out
	var _arg2 *C.gchar // out
	var _arg3 *C.gchar // out
	var _arg4 *C.gchar // out
	var _arg5 *C.gchar // out
	var _cret *C.gchar // in

	if algorithm != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(algorithm)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(method)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(md5)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.gchar)(unsafe.Pointer(C.CString(nonce)))
	defer C.free(unsafe.Pointer(_arg5))

	_cret = C.gst_rtsp_generate_digest_auth_response_from_md5(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(algorithm)
	runtime.KeepAlive(method)
	runtime.KeepAlive(md5)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(nonce)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// RtspHeaderAllowMultiple (gst_rtsp_header_allow_multiple): check whether field
// may appear multiple times in a message.
//
// The function takes the following parameters:
//
//   - field: RTSPHeaderField.
//
// The function returns the following values:
//
//   - ok: TRUE if multiple headers are allowed.
func RtspHeaderAllowMultiple(field RTSPHeaderField) bool {
	var _arg1 C.GstRTSPHeaderField // out
	var _cret C.gboolean           // in

	_arg1 = C.GstRTSPHeaderField(field)

	_cret = C.gst_rtsp_header_allow_multiple(_arg1)
	runtime.KeepAlive(field)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RtspHeaderAsText (gst_rtsp_header_as_text): convert field to a string.
//
// The function takes the following parameters:
//
//   - field: RTSPHeaderField.
//
// The function returns the following values:
//
//   - utf8 (optional): string representation of field.
func RtspHeaderAsText(field RTSPHeaderField) string {
	var _arg1 C.GstRTSPHeaderField // out
	var _cret *C.gchar             // in

	_arg1 = C.GstRTSPHeaderField(field)

	_cret = C.gst_rtsp_header_as_text(_arg1)
	runtime.KeepAlive(field)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// NewRtspMessage (gst_rtsp_message_new): create a new initialized RTSPMessage.
// Free with gst_rtsp_message_free().
//
// The function returns the following values:
//
//   - msg: location for the new RTSPMessage.
//   - rtspResult: RTSPResult.
func NewRtspMessage() (*RTSPMessage, RTSPResult) {
	var _arg1 *C.GstRTSPMessage // in
	var _cret C.GstRTSPResult   // in

	_cret = C.gst_rtsp_message_new(&_arg1)

	var _msg *RTSPMessage      // out
	var _rtspResult RTSPResult // out

	_msg = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _msg, _rtspResult
}

// RtspMessageNewData (gst_rtsp_message_new_data): create a new data
// RTSPMessage with channel and store the result message in msg. Free with
// gst_rtsp_message_free().
//
// The function takes the following parameters:
//
//   - channel: channel.
//
// The function returns the following values:
//
//   - msg: location for the new RTSPMessage.
//   - rtspResult: RTSPResult.
func RtspMessageNewData(channel byte) (*RTSPMessage, RTSPResult) {
	var _arg1 *C.GstRTSPMessage // in
	var _arg2 C.guint8          // out
	var _cret C.GstRTSPResult   // in

	_arg2 = C.guint8(channel)

	_cret = C.gst_rtsp_message_new_data(&_arg1, _arg2)
	runtime.KeepAlive(channel)

	var _msg *RTSPMessage      // out
	var _rtspResult RTSPResult // out

	_msg = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _msg, _rtspResult
}

// RtspMessageNewRequest (gst_rtsp_message_new_request): create a new
// RTSPMessage with method and uri and store the result request message in msg.
// Free with gst_rtsp_message_free().
//
// The function takes the following parameters:
//
//   - method: request method to use.
//   - uri of the request.
//
// The function returns the following values:
//
//   - msg: location for the new RTSPMessage.
//   - rtspResult: RTSPResult.
func RtspMessageNewRequest(method RTSPMethod, uri string) (*RTSPMessage, RTSPResult) {
	var _arg1 *C.GstRTSPMessage // in
	var _arg2 C.GstRTSPMethod   // out
	var _arg3 *C.gchar          // out
	var _cret C.GstRTSPResult   // in

	_arg2 = C.GstRTSPMethod(method)
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gst_rtsp_message_new_request(&_arg1, _arg2, _arg3)
	runtime.KeepAlive(method)
	runtime.KeepAlive(uri)

	var _msg *RTSPMessage      // out
	var _rtspResult RTSPResult // out

	_msg = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _msg, _rtspResult
}

// RtspMessageNewResponse (gst_rtsp_message_new_response): create a new response
// RTSPMessage with code and reason and store the result message in msg.
// Free with gst_rtsp_message_free().
//
// When reason is NULL, the default reason for code will be used.
//
// When request is not NULL, the relevant headers will be copied to the new
// response message.
//
// The function takes the following parameters:
//
//   - code status code.
//   - reason (optional) status reason or NULL.
//   - request (optional) that triggered the response or NULL.
//
// The function returns the following values:
//
//   - msg: location for the new RTSPMessage.
//   - rtspResult: RTSPResult.
func RtspMessageNewResponse(code RTSPStatusCode, reason string, request *RTSPMessage) (*RTSPMessage, RTSPResult) {
	var _arg1 *C.GstRTSPMessage   // in
	var _arg2 C.GstRTSPStatusCode // out
	var _arg3 *C.gchar            // out
	var _arg4 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg2 = C.GstRTSPStatusCode(code)
	if reason != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(reason)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	if request != nil {
		_arg4 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(request)))
	}

	_cret = C.gst_rtsp_message_new_response(&_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(code)
	runtime.KeepAlive(reason)
	runtime.KeepAlive(request)

	var _msg *RTSPMessage      // out
	var _rtspResult RTSPResult // out

	_msg = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _msg, _rtspResult
}

// RtspOptionsAsText (gst_rtsp_options_as_text): convert options to a string.
//
// The function takes the following parameters:
//
//   - options: one or more RTSPMethod.
//
// The function returns the following values:
//
//   - utf8: new string of options. g_free() after usage.
func RtspOptionsAsText(options RTSPMethod) string {
	var _arg1 C.GstRTSPMethod // out
	var _cret *C.gchar        // in

	_arg1 = C.GstRTSPMethod(options)

	_cret = C.gst_rtsp_options_as_text(_arg1)
	runtime.KeepAlive(options)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RtspOptionsFromText (gst_rtsp_options_from_text): convert the comma separated
// list options to a RTSPMethod bitwise or of methods. This functions is the
// reverse of gst_rtsp_options_as_text().
//
// The function takes the following parameters:
//
//   - options: comma separated list of options.
//
// The function returns the following values:
//
//   - rtspMethod: RTSPMethod.
func RtspOptionsFromText(options string) RTSPMethod {
	var _arg1 *C.gchar        // out
	var _cret C.GstRTSPMethod // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(options)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_options_from_text(_arg1)
	runtime.KeepAlive(options)

	var _rtspMethod RTSPMethod // out

	_rtspMethod = RTSPMethod(_cret)

	return _rtspMethod
}

// RtspStatusAsText (gst_rtsp_status_as_text): convert code to a string.
//
// The function takes the following parameters:
//
//   - code: RTSPStatusCode.
//
// The function returns the following values:
//
//   - utf8: string representation of code.
func RtspStatusAsText(code RTSPStatusCode) string {
	var _arg1 C.GstRTSPStatusCode // out
	var _cret *C.gchar            // in

	_arg1 = C.GstRTSPStatusCode(code)

	_cret = C.gst_rtsp_status_as_text(_arg1)
	runtime.KeepAlive(code)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// RtspStrresult (gst_rtsp_strresult): convert result in a human readable
// string.
//
// The function takes the following parameters:
//
//   - result: RTSPResult.
//
// The function returns the following values:
//
//   - utf8: newly allocated string. g_free() after usage.
func RtspStrresult(result RTSPResult) string {
	var _arg1 C.GstRTSPResult // out
	var _cret *C.gchar        // in

	_arg1 = C.GstRTSPResult(result)

	_cret = C.gst_rtsp_strresult(_arg1)
	runtime.KeepAlive(result)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RTSPExtension (GstRTSPExtension): this interface is implemented e.g. by the
// Windows Media Streaming RTSP exentension (rtspwms) and the RealMedia RTSP
// extension (rtspreal).
//
// RTSPExtension wraps an interface. This means the user can get the
// underlying type by calling Cast().
type RTSPExtension struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*RTSPExtension)(nil)
)

// RTSPExtensioner describes types inherited from RTSPExtension.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type RTSPExtensioner interface {
	coreglib.Objector

	AfterSend(req, resp *RTSPMessage) RTSPResult
	BeforeSend(req *RTSPMessage) RTSPResult
	ConfigureStream(caps *gst.Caps) bool
	DetectServer(resp *RTSPMessage) bool
	ParseSdp(sdp *gstsdp.SDPMessage, s *gst.Structure) RTSPResult
	ReceiveRequest(req *RTSPMessage) RTSPResult
	Send(req, resp *RTSPMessage) RTSPResult
	SetupMedia(media *gstsdp.SDPMedia) RTSPResult
	StreamSelect(url *RTSPURL) RTSPResult

	ConnectSend(func(object, p0 unsafe.Pointer) (rtspResult RTSPResult)) coreglib.SignalHandle
}

var _ RTSPExtensioner = (*RTSPExtension)(nil)

func wrapRTSPExtension(obj *coreglib.Object) *RTSPExtension {
	return &RTSPExtension{
		Object: obj,
	}
}

func marshalRTSPExtension(p uintptr) (interface{}, error) {
	return wrapRTSPExtension(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (ext *RTSPExtension) ConnectSend(f func(object, p0 unsafe.Pointer) (rtspResult RTSPResult)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(ext, "send", false, unsafe.Pointer(C._gotk4_gstrtsp1_RTSPExtension_ConnectSend), f)
}

// The function takes the following parameters:
//
//   - req
//   - resp
func (ext *RTSPExtension) AfterSend(req, resp *RTSPMessage) RTSPResult {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _arg2 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(req)))
	_arg2 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(resp)))

	_cret = C.gst_rtsp_extension_after_send(_arg0, _arg1, _arg2)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(req)
	runtime.KeepAlive(resp)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) BeforeSend(req *RTSPMessage) RTSPResult {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(req)))

	_cret = C.gst_rtsp_extension_before_send(_arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(req)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) ConfigureStream(caps *gst.Caps) bool {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstCaps          // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_rtsp_extension_configure_stream(_arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(caps)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (ext *RTSPExtension) DetectServer(resp *RTSPMessage) bool {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(resp)))

	_cret = C.gst_rtsp_extension_detect_server(_arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(resp)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - sdp
//   - s
func (ext *RTSPExtension) ParseSdp(sdp *gstsdp.SDPMessage, s *gst.Structure) RTSPResult {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstSDPMessage    // out
	var _arg2 *C.GstStructure     // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(sdp)))
	_arg2 = (*C.GstStructure)(gextras.StructNative(unsafe.Pointer(s)))

	_cret = C.gst_rtsp_extension_parse_sdp(_arg0, _arg1, _arg2)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(sdp)
	runtime.KeepAlive(s)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) ReceiveRequest(req *RTSPMessage) RTSPResult {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(req)))

	_cret = C.gst_rtsp_extension_receive_request(_arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(req)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// The function takes the following parameters:
//
//   - req
//   - resp
func (ext *RTSPExtension) Send(req, resp *RTSPMessage) RTSPResult {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _arg2 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(req)))
	_arg2 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(resp)))

	_cret = C.gst_rtsp_extension_send(_arg0, _arg1, _arg2)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(req)
	runtime.KeepAlive(resp)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) SetupMedia(media *gstsdp.SDPMedia) RTSPResult {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstSDPMedia      // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_rtsp_extension_setup_media(_arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(media)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) StreamSelect(url *RTSPURL) RTSPResult {
	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPUrl       // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_extension_stream_select(_arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(url)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// The function takes the following parameters:
//
//   - req
//   - resp
func (ext *RTSPExtension) afterSend(req, resp *RTSPMessage) RTSPResult {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.after_send

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _arg2 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(req)))
	_arg2 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(resp)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_after_send(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(req)
	runtime.KeepAlive(resp)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) beforeSend(req *RTSPMessage) RTSPResult {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.before_send

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(req)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_before_send(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(req)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) configureStream(caps *gst.Caps) bool {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.configure_stream

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstCaps          // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_configure_stream(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(caps)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (ext *RTSPExtension) detectServer(resp *RTSPMessage) bool {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.detect_server

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(resp)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_detect_server(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(resp)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - sdp
//   - s
func (ext *RTSPExtension) parseSdp(sdp *gstsdp.SDPMessage, s *gst.Structure) RTSPResult {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.parse_sdp

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstSDPMessage    // out
	var _arg2 *C.GstStructure     // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(sdp)))
	_arg2 = (*C.GstStructure)(gextras.StructNative(unsafe.Pointer(s)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_parse_sdp(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(sdp)
	runtime.KeepAlive(s)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) receiveRequest(req *RTSPMessage) RTSPResult {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.receive_request

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(req)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_receive_request(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(req)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// The function takes the following parameters:
//
//   - req
//   - resp
func (ext *RTSPExtension) send(req, resp *RTSPMessage) RTSPResult {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.send

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPMessage   // out
	var _arg2 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(req)))
	_arg2 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(resp)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_send(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(req)
	runtime.KeepAlive(resp)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) setupMedia(media *gstsdp.SDPMedia) RTSPResult {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.setup_media

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstSDPMedia      // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_setup_media(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(media)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

func (ext *RTSPExtension) streamSelect(url *RTSPURL) RTSPResult {
	gclass := (*C.GstRTSPExtensionInterface)(coreglib.PeekParentClass(ext))
	fnarg := gclass.stream_select

	var _arg0 *C.GstRTSPExtension // out
	var _arg1 *C.GstRTSPUrl       // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPExtension)(unsafe.Pointer(coreglib.BaseObject(ext).Native()))
	_arg1 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C._gotk4_gstrtsp1_RTSPExtension_virtual_stream_select(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(url)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// RTSPAuthCredential (GstRTSPAuthCredential): RTSP Authentication credentials
//
// An instance of this type is always passed by reference.
type RTSPAuthCredential struct {
	*rtspAuthCredential
}

// rtspAuthCredential is the struct that's finalized.
type rtspAuthCredential struct {
	native *C.GstRTSPAuthCredential
}

func marshalRTSPAuthCredential(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &RTSPAuthCredential{&rtspAuthCredential{(*C.GstRTSPAuthCredential)(b)}}, nil
}

// Scheme: RTSPAuthMethod.
func (r *RTSPAuthCredential) Scheme() RTSPAuthMethod {
	valptr := &r.native.scheme
	var _v RTSPAuthMethod // out
	_v = RTSPAuthMethod(*valptr)
	return _v
}

// Params: NULL-terminated array of RTSPAuthParam.
func (r *RTSPAuthCredential) Params() *RTSPAuthParam {
	valptr := &r.native.params
	var _v *RTSPAuthParam // out
	_v = (*RTSPAuthParam)(gextras.NewStructNative(unsafe.Pointer((**valptr))))
	return _v
}

// Authorization: authorization for the basic schem.
func (r *RTSPAuthCredential) Authorization() string {
	valptr := &r.native.authorization
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// RTSPAuthParam (GstRTSPAuthParam): RTSP Authentication parameter
//
// An instance of this type is always passed by reference.
type RTSPAuthParam struct {
	*rtspAuthParam
}

// rtspAuthParam is the struct that's finalized.
type rtspAuthParam struct {
	native *C.GstRTSPAuthParam
}

func marshalRTSPAuthParam(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &RTSPAuthParam{&rtspAuthParam{(*C.GstRTSPAuthParam)(b)}}, nil
}

// Name: name of the parameter.
func (r *RTSPAuthParam) Name() string {
	valptr := &r.native.name
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Value: value of the parameter.
func (r *RTSPAuthParam) Value() string {
	valptr := &r.native.value
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

func (param *RTSPAuthParam) Copy() *RTSPAuthParam {
	var _arg0 *C.GstRTSPAuthParam // out
	var _cret *C.GstRTSPAuthParam // in

	_arg0 = (*C.GstRTSPAuthParam)(gextras.StructNative(unsafe.Pointer(param)))

	_cret = C.gst_rtsp_auth_param_copy(_arg0)
	runtime.KeepAlive(param)

	var _rtspAuthParam *RTSPAuthParam // out

	_rtspAuthParam = (*RTSPAuthParam)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_rtspAuthParam)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_auth_param_free((*C.GstRTSPAuthParam)(intern.C))
		},
	)

	return _rtspAuthParam
}

// RTSPExtensionInterface (GstRTSPExtensionInterface): interface representing
// RTSP extensions.
//
// An instance of this type is always passed by reference.
type RTSPExtensionInterface struct {
	*rtspExtensionInterface
}

// rtspExtensionInterface is the struct that's finalized.
type rtspExtensionInterface struct {
	native *C.GstRTSPExtensionInterface
}

// RTSPMessage (GstRTSPMessage) provides methods for creating and parsing
// request, response and data messages.
//
// An instance of this type is always passed by reference.
type RTSPMessage struct {
	*rtspMessage
}

// rtspMessage is the struct that's finalized.
type rtspMessage struct {
	native *C.GstRTSPMessage
}

func marshalRTSPMessage(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &RTSPMessage{&rtspMessage{(*C.GstRTSPMessage)(b)}}, nil
}

// AddHeader (gst_rtsp_message_add_header): add a header with key field and
// value to msg. This function takes a copy of value.
//
// The function takes the following parameters:
//
//   - field: RTSPHeaderField.
//   - value of the header.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) AddHeader(field RTSPHeaderField, value string) RTSPResult {
	var _arg0 *C.GstRTSPMessage    // out
	var _arg1 C.GstRTSPHeaderField // out
	var _arg2 *C.gchar             // out
	var _cret C.GstRTSPResult      // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_rtsp_message_add_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)
	runtime.KeepAlive(value)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// AddHeaderByName (gst_rtsp_message_add_header_by_name): add a header with key
// header and value to msg. This function takes a copy of value.
//
// The function takes the following parameters:
//
//   - header string.
//   - value of the header.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) AddHeaderByName(header string, value string) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_rtsp_message_add_header_by_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(header)
	runtime.KeepAlive(value)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// Copy (gst_rtsp_message_copy): allocate a new copy of msg and store the result
// in copy. The value in copy should be release with gst_rtsp_message_free
// function.
//
// The function returns the following values:
//
//   - copy (optional): pointer to new RTSPMessage.
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) Copy() (*RTSPMessage, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstRTSPMessage // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_copy(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _copy *RTSPMessage     // out
	var _rtspResult RTSPResult // out

	if _arg1 != nil {
		_copy = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_copy)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
			},
		)
	}
	_rtspResult = RTSPResult(_cret)

	return _copy, _rtspResult
}

// Dump (gst_rtsp_message_dump) the contents of msg to stdout.
//
// The function returns the following values:
//
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) Dump() RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_dump(_arg0)
	runtime.KeepAlive(msg)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// Body (gst_rtsp_message_get_body): get the body of msg. data remains valid for
// as long as msg is valid and unchanged.
//
// If the message body was set as a Buffer before this will cause the data to
// be copied and stored in the message. The Buffer will no longer be kept in the
// message.
//
// The function returns the following values:
//
//   - data: location for the data.
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) Body() ([]byte, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.guint8         // in
	var _arg2 C.guint           // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_get_body(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(msg)

	var _data []byte           // out
	var _rtspResult RTSPResult // out

	_data = make([]byte, _arg2)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(_arg1)), _arg2))
	_rtspResult = RTSPResult(_cret)

	return _data, _rtspResult
}

// BodyBuffer (gst_rtsp_message_get_body_buffer): get the body of msg. buffer
// remains valid for as long as msg is valid and unchanged.
//
// If body data was set from raw memory instead of a Buffer this function will
// always return NULL. The caller can check if there is a body buffer by calling
// gst_rtsp_message_has_body_buffer().
//
// The function returns the following values:
//
//   - buffer: location for the buffer.
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) BodyBuffer() (*gst.Buffer, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstBuffer      // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_get_body_buffer(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _buffer *gst.Buffer    // out
	var _rtspResult RTSPResult // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	C.gst_mini_object_ref((*C.GstMiniObject)(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mini_object_unref((*C.GstMiniObject)(intern.C))
		})
	_rtspResult = RTSPResult(_cret)

	return _buffer, _rtspResult
}

// Header (gst_rtsp_message_get_header): get the indx header value with key
// field from msg. The result in value stays valid as long as it remains present
// in msg.
//
// The function takes the following parameters:
//
//   - field: RTSPHeaderField.
//   - indx: index of the header.
//
// The function returns the following values:
//
//   - value (optional): pointer to hold the result.
//   - rtspResult when field was found, T_RTSP_ENOTIMPL if the key was not
//     found.
func (msg *RTSPMessage) Header(field RTSPHeaderField, indx int) (string, RTSPResult) {
	var _arg0 *C.GstRTSPMessage    // out
	var _arg1 C.GstRTSPHeaderField // out
	var _arg2 *C.gchar             // in
	var _arg3 C.gint               // out
	var _cret C.GstRTSPResult      // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)
	_arg3 = C.gint(indx)

	_cret = C.gst_rtsp_message_get_header(_arg0, _arg1, &_arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)
	runtime.KeepAlive(indx)

	var _value string          // out
	var _rtspResult RTSPResult // out

	if _arg2 != nil {
		_value = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	}
	_rtspResult = RTSPResult(_cret)

	return _value, _rtspResult
}

// HeaderByName (gst_rtsp_message_get_header_by_name): get the index header
// value with key header from msg. The result in value stays valid as long as it
// remains present in msg.
//
// The function takes the following parameters:
//
//   - header: RTSPHeaderField.
//   - index of the header.
//
// The function returns the following values:
//
//   - value (optional): pointer to hold the result.
//   - rtspResult when field was found, T_RTSP_ENOTIMPL if the key was not
//     found.
func (msg *RTSPMessage) HeaderByName(header string, index int) (string, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // in
	var _arg3 C.gint            // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = C.gint(index)

	_cret = C.gst_rtsp_message_get_header_by_name(_arg0, _arg1, &_arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(header)
	runtime.KeepAlive(index)

	var _value string          // out
	var _rtspResult RTSPResult // out

	if _arg2 != nil {
		_value = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	}
	_rtspResult = RTSPResult(_cret)

	return _value, _rtspResult
}

// Type (gst_rtsp_message_get_type): get the message type of msg.
//
// The function returns the following values:
//
//   - rtspMsgType: message type.
func (msg *RTSPMessage) Type() RTSPMsgType {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.GstRTSPMsgType  // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_get_type(_arg0)
	runtime.KeepAlive(msg)

	var _rtspMsgType RTSPMsgType // out

	_rtspMsgType = RTSPMsgType(_cret)

	return _rtspMsgType
}

// HasBodyBuffer (gst_rtsp_message_has_body_buffer) checks if msg has a body and
// the body is stored as Buffer.
//
// The function returns the following values:
//
//   - ok: TRUE if msg has a body and it's stored as Buffer, FALSE otherwise.
func (msg *RTSPMessage) HasBodyBuffer() bool {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_has_body_buffer(_arg0)
	runtime.KeepAlive(msg)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Init (gst_rtsp_message_init): initialize msg. This function is mostly
// used when msg is allocated on the stack. The reverse operation of this is
// gst_rtsp_message_unset().
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) Init() RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_init(_arg0)
	runtime.KeepAlive(msg)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// InitData (gst_rtsp_message_init_data): initialize a new data RTSPMessage for
// channel.
//
// The function takes the following parameters:
//
//   - channel: channel.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) InitData(channel byte) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 C.guint8          // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint8(channel)

	_cret = C.gst_rtsp_message_init_data(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(channel)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// InitRequest (gst_rtsp_message_init_request): initialize msg as
// a request message with method and uri. To clear msg again, use
// gst_rtsp_message_unset().
//
// The function takes the following parameters:
//
//   - method: request method to use.
//   - uri of the request.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) InitRequest(method RTSPMethod, uri string) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 C.GstRTSPMethod   // out
	var _arg2 *C.gchar          // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPMethod(method)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_rtsp_message_init_request(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(method)
	runtime.KeepAlive(uri)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// InitResponse (gst_rtsp_message_init_response): initialize msg with code and
// reason.
//
// When reason is NULL, the default reason for code will be used.
//
// When request is not NULL, the relevant headers will be copied to the new
// response message.
//
// The function takes the following parameters:
//
//   - code status code.
//   - reason (optional) status reason or NULL.
//   - request (optional) that triggered the response or NULL.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) InitResponse(code RTSPStatusCode, reason string, request *RTSPMessage) RTSPResult {
	var _arg0 *C.GstRTSPMessage   // out
	var _arg1 C.GstRTSPStatusCode // out
	var _arg2 *C.gchar            // out
	var _arg3 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPStatusCode(code)
	if reason != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(reason)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if request != nil {
		_arg3 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(request)))
	}

	_cret = C.gst_rtsp_message_init_response(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(code)
	runtime.KeepAlive(reason)
	runtime.KeepAlive(request)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// ParseAuthCredentials (gst_rtsp_message_parse_auth_credentials) parses the
// credentials given in a WWW-Authenticate or Authorization header.
//
// The function takes the following parameters:
//
//   - field: RTSPHeaderField.
//
// The function returns the following values:
//
//   - rtspAuthCredentials: NULL-terminated array of GstRTSPAuthCredential or
//     NULL.
func (msg *RTSPMessage) ParseAuthCredentials(field RTSPHeaderField) []*RTSPAuthCredential {
	var _arg0 *C.GstRTSPMessage         // out
	var _arg1 C.GstRTSPHeaderField      // out
	var _cret **C.GstRTSPAuthCredential // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)

	_cret = C.gst_rtsp_message_parse_auth_credentials(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)

	var _rtspAuthCredentials []*RTSPAuthCredential // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.GstRTSPAuthCredential
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_rtspAuthCredentials = make([]*RTSPAuthCredential, i)
		for i := range src {
			_rtspAuthCredentials[i] = (*RTSPAuthCredential)(gextras.NewStructNative(unsafe.Pointer(src[i])))
			runtime.SetFinalizer(
				gextras.StructIntern(unsafe.Pointer(_rtspAuthCredentials[i])),
				func(intern *struct{ C unsafe.Pointer }) {
					C.free(intern.C)
				},
			)
		}
	}

	return _rtspAuthCredentials
}

// ParseData (gst_rtsp_message_parse_data): parse the data message msg and store
// the channel in channel.
//
// The function returns the following values:
//
//   - channel (optional): location to hold the channel.
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) ParseData() (byte, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 C.guint8          // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_parse_data(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _channel byte          // out
	var _rtspResult RTSPResult // out

	_channel = byte(_arg1)
	_rtspResult = RTSPResult(_cret)

	return _channel, _rtspResult
}

// ParseRequest (gst_rtsp_message_parse_request): parse the request message msg
// and store the values method, uri and version. The result locations can be
// NULL if one is not interested in its value.
//
// uri remains valid for as long as msg is valid and unchanged.
//
// The function returns the following values:
//
//   - method (optional): location to hold the method.
//   - uri (optional): location to hold the uri.
//   - version (optional): location to hold the version.
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) ParseRequest() (RTSPMethod, string, RTSPVersion, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 C.GstRTSPMethod   // in
	var _arg2 *C.gchar          // in
	var _arg3 C.GstRTSPVersion  // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_parse_request(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(msg)

	var _method RTSPMethod     // out
	var _uri string            // out
	var _version RTSPVersion   // out
	var _rtspResult RTSPResult // out

	_method = RTSPMethod(_arg1)
	if _arg2 != nil {
		_uri = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	}
	_version = RTSPVersion(_arg3)
	_rtspResult = RTSPResult(_cret)

	return _method, _uri, _version, _rtspResult
}

// ParseResponse (gst_rtsp_message_parse_response): parse the response message
// msg and store the values code, reason and version. The result locations can
// be NULL if one is not interested in its value.
//
// reason remains valid for as long as msg is valid and unchanged.
//
// The function returns the following values:
//
//   - code (optional): location to hold the status code.
//   - reason (optional): location to hold the status reason.
//   - version (optional): location to hold the version.
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) ParseResponse() (RTSPStatusCode, string, RTSPVersion, RTSPResult) {
	var _arg0 *C.GstRTSPMessage   // out
	var _arg1 C.GstRTSPStatusCode // in
	var _arg2 *C.gchar            // in
	var _arg3 C.GstRTSPVersion    // in
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_parse_response(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(msg)

	var _code RTSPStatusCode   // out
	var _reason string         // out
	var _version RTSPVersion   // out
	var _rtspResult RTSPResult // out

	_code = RTSPStatusCode(_arg1)
	if _arg2 != nil {
		_reason = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	}
	_version = RTSPVersion(_arg3)
	_rtspResult = RTSPResult(_cret)

	return _code, _reason, _version, _rtspResult
}

// RemoveHeader (gst_rtsp_message_remove_header): remove the indx header with
// key field from msg. If indx equals -1, all headers will be removed.
//
// The function takes the following parameters:
//
//   - field: RTSPHeaderField.
//   - indx: index of the header.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) RemoveHeader(field RTSPHeaderField, indx int) RTSPResult {
	var _arg0 *C.GstRTSPMessage    // out
	var _arg1 C.GstRTSPHeaderField // out
	var _arg2 C.gint               // out
	var _cret C.GstRTSPResult      // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)
	_arg2 = C.gint(indx)

	_cret = C.gst_rtsp_message_remove_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)
	runtime.KeepAlive(indx)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// RemoveHeaderByName (gst_rtsp_message_remove_header_by_name): remove the index
// header with key header from msg. If index equals -1, all matching headers
// will be removed.
//
// The function takes the following parameters:
//
//   - header string.
//   - index of the header.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) RemoveHeaderByName(header string, index int) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.gchar          // out
	var _arg2 C.gint            // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(index)

	_cret = C.gst_rtsp_message_remove_header_by_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(header)
	runtime.KeepAlive(index)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// SetBody (gst_rtsp_message_set_body): set the body of msg to a copy of data.
// Any existing body or body buffer will be replaced by the new body.
//
// The function takes the following parameters:
//
//   - data: data.
//
// The function returns the following values:
//
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) SetBody(data []byte) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.guint8         // out
	var _arg2 C.guint
	var _cret C.GstRTSPResult // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg2 = (C.guint)(len(data))
	if len(data) > 0 {
		_arg1 = (*C.guint8)(unsafe.Pointer(&data[0]))
	}

	_cret = C.gst_rtsp_message_set_body(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(data)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// SetBodyBuffer (gst_rtsp_message_set_body_buffer): set the body of msg to
// buffer. Any existing body or body buffer will be replaced by the new body.
//
// The function takes the following parameters:
//
//   - buffer: Buffer.
//
// The function returns the following values:
//
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) SetBodyBuffer(buffer *gst.Buffer) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstBuffer      // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))

	_cret = C.gst_rtsp_message_set_body_buffer(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(buffer)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// StealBody (gst_rtsp_message_steal_body): take the body of msg and store it
// in data and size. After this method, the body and size of msg will be set to
// NULL and 0 respectively.
//
// The function returns the following values:
//
//   - data: location for the data.
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) StealBody() ([]byte, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.guint8         // in
	var _arg2 C.guint           // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_steal_body(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(msg)

	var _data []byte           // out
	var _rtspResult RTSPResult // out

	defer C.free(unsafe.Pointer(_arg1))
	_data = make([]byte, _arg2)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(_arg1)), _arg2))
	_rtspResult = RTSPResult(_cret)

	return _data, _rtspResult
}

// StealBodyBuffer (gst_rtsp_message_steal_body_buffer): take the body of msg
// and store it in buffer. After this method, the body and size of msg will be
// set to NULL and 0 respectively.
//
// If body data was set from raw memory instead of a Buffer this function will
// always return NULL. The caller can check if there is a body buffer by calling
// gst_rtsp_message_has_body_buffer().
//
// The function returns the following values:
//
//   - buffer: location for the buffer.
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) StealBodyBuffer() (*gst.Buffer, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstBuffer      // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_steal_body_buffer(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _buffer *gst.Buffer    // out
	var _rtspResult RTSPResult // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mini_object_unref((*C.GstMiniObject)(intern.C))
		})
	_rtspResult = RTSPResult(_cret)

	return _buffer, _rtspResult
}

// TakeBody (gst_rtsp_message_take_body): set the body of msg to data and size.
// This method takes ownership of data. Any existing body or body buffer will be
// replaced by the new body.
//
// The function takes the following parameters:
//
//   - data: data.
//
// The function returns the following values:
//
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) TakeBody(data []byte) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.guint8         // out
	var _arg2 C.guint
	var _cret C.GstRTSPResult // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg2 = (C.guint)(len(data))
	_arg1 = (*C.guint8)(C.calloc(C.size_t(len(data)), C.size_t(C.sizeof_guint8)))
	copy(unsafe.Slice((*byte)(_arg1), len(data)), data)

	_cret = C.gst_rtsp_message_take_body(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(data)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// TakeBodyBuffer (gst_rtsp_message_take_body_buffer): set the body of msg to
// buffer. This method takes ownership of buffer. Any existing body or body
// buffer will be replaced by the new body.
//
// The function takes the following parameters:
//
//   - buffer: Buffer.
//
// The function returns the following values:
//
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) TakeBodyBuffer(buffer *gst.Buffer) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstBuffer      // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(buffer)), nil)

	_cret = C.gst_rtsp_message_take_body_buffer(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(buffer)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// TakeHeader (gst_rtsp_message_take_header): add a header with key field and
// value to msg. This function takes ownership of value.
//
// The function takes the following parameters:
//
//   - field: RTSPHeaderField.
//   - value of the header.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) TakeHeader(field RTSPHeaderField, value string) RTSPResult {
	var _arg0 *C.GstRTSPMessage    // out
	var _arg1 C.GstRTSPHeaderField // out
	var _arg2 *C.gchar             // out
	var _cret C.GstRTSPResult      // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))

	_cret = C.gst_rtsp_message_take_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)
	runtime.KeepAlive(value)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// TakeHeaderByName (gst_rtsp_message_take_header_by_name): add a header with
// key header and value to msg. This function takes ownership of value, but not
// of header.
//
// The function takes the following parameters:
//
//   - header string.
//   - value of the header.
//
// The function returns the following values:
//
//   - rtspResult: RTSPResult.
func (msg *RTSPMessage) TakeHeaderByName(header string, value string) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))

	_cret = C.gst_rtsp_message_take_header_by_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(header)
	runtime.KeepAlive(value)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// Unset (gst_rtsp_message_unset) the contents of msg so that it becomes an
// uninitialized RTSPMessage again. This function is mostly used in combination
// with gst_rtsp_message_init_request(), gst_rtsp_message_init_response() and
// gst_rtsp_message_init_data() on stack allocated RTSPMessage structures.
//
// The function returns the following values:
//
//   - rtspResult: T_RTSP_OK.
func (msg *RTSPMessage) Unset() RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_unset(_arg0)
	runtime.KeepAlive(msg)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// RTSPRange (GstRTSPRange) provides helper functions to deal with time ranges.
//
// An instance of this type is always passed by reference.
type RTSPRange struct {
	*rtspRange
}

// rtspRange is the struct that's finalized.
type rtspRange struct {
	native *C.GstRTSPRange
}

// NewRTSPRange creates a new RTSPRange instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewRTSPRange(min, max int) RTSPRange {
	var f0 C.gint // out
	f0 = C.gint(min)
	var f1 C.gint // out
	f1 = C.gint(max)

	v := C.GstRTSPRange{
		min: f0,
		max: f1,
	}

	return *(*RTSPRange)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

// Min: minimum value of the range.
func (r *RTSPRange) Min() int {
	valptr := &r.native.min
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Max: maximum value of the range.
func (r *RTSPRange) Max() int {
	valptr := &r.native.max
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Min: minimum value of the range.
func (r *RTSPRange) SetMin(min int) {
	valptr := &r.native.min
	*valptr = C.gint(min)
}

// Max: maximum value of the range.
func (r *RTSPRange) SetMax(max int) {
	valptr := &r.native.max
	*valptr = C.gint(max)
}

// RTSPRangeConvertUnits (gst_rtsp_range_convert_units) converts the range
// in-place between different types of units. Ranges containing the special
// value T_RTSP_TIME_NOW can not be converted as these are only valid for
// T_RTSP_RANGE_NPT.
//
// The function takes the following parameters:
//
//   - range: RTSPTimeRange.
//   - unit to convert the range into.
//
// The function returns the following values:
//
//   - ok: TRUE if the range could be converted.
func RTSPRangeConvertUnits(_range *RTSPTimeRange, unit RTSPRangeUnit) bool {
	var _arg1 *C.GstRTSPTimeRange // out
	var _arg2 C.GstRTSPRangeUnit  // out
	var _cret C.gboolean          // in

	_arg1 = (*C.GstRTSPTimeRange)(gextras.StructNative(unsafe.Pointer(_range)))
	_arg2 = C.GstRTSPRangeUnit(unit)

	_cret = C.gst_rtsp_range_convert_units(_arg1, _arg2)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(unit)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RTSPRangeGetTimes (gst_rtsp_range_get_times): retrieve the minimum and
// maximum values from range converted to ClockTime in min and max.
//
// A value of GST_CLOCK_TIME_NONE will be used to signal T_RTSP_TIME_NOW and
// T_RTSP_TIME_END for min and max respectively.
//
// UTC times will be converted to nanoseconds since 1900.
//
// The function takes the following parameters:
//
//   - range: RTSPTimeRange.
//
// The function returns the following values:
//
//   - min: result minimum ClockTime.
//   - max: result maximum ClockTime.
//   - ok: TRUE on success.
func RTSPRangeGetTimes(_range *RTSPTimeRange) (min, max gst.ClockTime, ok bool) {
	var _arg1 *C.GstRTSPTimeRange // out
	var _arg2 C.GstClockTime      // in
	var _arg3 C.GstClockTime      // in
	var _cret C.gboolean          // in

	_arg1 = (*C.GstRTSPTimeRange)(gextras.StructNative(unsafe.Pointer(_range)))

	_cret = C.gst_rtsp_range_get_times(_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(_range)

	var _min gst.ClockTime // out
	var _max gst.ClockTime // out
	var _ok bool           // out

	_min = gst.ClockTime(_arg2)
	_max = gst.ClockTime(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _min, _max, _ok
}

// RTSPRangeParse (gst_rtsp_range_parse): parse rangestr to a RTSPTimeRange.
//
// The function takes the following parameters:
//
//   - rangestr: range string to parse.
//
// The function returns the following values:
//
//   - _range: location to hold the RTSPTimeRange result.
//   - rtspResult on success.
func RTSPRangeParse(rangestr string) (*RTSPTimeRange, RTSPResult) {
	var _arg1 *C.gchar            // out
	var _arg2 *C.GstRTSPTimeRange // in
	var _cret C.GstRTSPResult     // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(rangestr)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_range_parse(_arg1, &_arg2)
	runtime.KeepAlive(rangestr)

	var __range *RTSPTimeRange // out
	var _rtspResult RTSPResult // out

	__range = (*RTSPTimeRange)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(__range)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	_rtspResult = RTSPResult(_cret)

	return __range, _rtspResult
}

// RTSPRangeToString (gst_rtsp_range_to_string): convert range into a string
// representation.
//
// The function takes the following parameters:
//
//   - range: RTSPTimeRange.
//
// The function returns the following values:
//
//   - utf8: string representation of range. g_free() after usage.
func RTSPRangeToString(_range *RTSPTimeRange) string {
	var _arg1 *C.GstRTSPTimeRange // out
	var _cret *C.gchar            // in

	_arg1 = (*C.GstRTSPTimeRange)(gextras.StructNative(unsafe.Pointer(_range)))

	_cret = C.gst_rtsp_range_to_string(_arg1)
	runtime.KeepAlive(_range)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RTSPTime (GstRTSPTime): time indication.
//
// An instance of this type is always passed by reference.
type RTSPTime struct {
	*rtspTime
}

// rtspTime is the struct that's finalized.
type rtspTime struct {
	native *C.GstRTSPTime
}

// Type: time of the time.
func (r *RTSPTime) Type() RTSPTimeType {
	valptr := &r.native._type
	var _v RTSPTimeType // out
	_v = RTSPTimeType(*valptr)
	return _v
}

// Seconds seconds when type is GST_RTSP_TIME_SECONDS, GST_RTSP_TIME_UTC and
// GST_RTSP_TIME_FRAMES.
func (r *RTSPTime) Seconds() float64 {
	valptr := &r.native.seconds
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Seconds seconds when type is GST_RTSP_TIME_SECONDS, GST_RTSP_TIME_UTC and
// GST_RTSP_TIME_FRAMES.
func (r *RTSPTime) SetSeconds(seconds float64) {
	valptr := &r.native.seconds
	*valptr = C.gdouble(seconds)
}

// RTSPTime2 (GstRTSPTime2): extra fields for a time indication.
//
// An instance of this type is always passed by reference.
type RTSPTime2 struct {
	*rtspTime2
}

// rtspTime2 is the struct that's finalized.
type rtspTime2 struct {
	native *C.GstRTSPTime2
}

// NewRTSPTime2 creates a new RTSPTime2 instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewRTSPTime2(frames float64, year, month, day uint) RTSPTime2 {
	var f0 C.gdouble // out
	f0 = C.gdouble(frames)
	var f1 C.guint // out
	f1 = C.guint(year)
	var f2 C.guint // out
	f2 = C.guint(month)
	var f3 C.guint // out
	f3 = C.guint(day)

	v := C.GstRTSPTime2{
		frames: f0,
		year:   f1,
		month:  f2,
		day:    f3,
	}

	return *(*RTSPTime2)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

// Frames frames and subframes when type in GstRTSPTime is GST_RTSP_TIME_FRAMES.
func (r *RTSPTime2) Frames() float64 {
	valptr := &r.native.frames
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Year: year when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) Year() uint {
	valptr := &r.native.year
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Month: month when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) Month() uint {
	valptr := &r.native.month
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Day: day when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) Day() uint {
	valptr := &r.native.day
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Frames frames and subframes when type in GstRTSPTime is GST_RTSP_TIME_FRAMES.
func (r *RTSPTime2) SetFrames(frames float64) {
	valptr := &r.native.frames
	*valptr = C.gdouble(frames)
}

// Year: year when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) SetYear(year uint) {
	valptr := &r.native.year
	*valptr = C.guint(year)
}

// Month: month when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) SetMonth(month uint) {
	valptr := &r.native.month
	*valptr = C.guint(month)
}

// Day: day when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) SetDay(day uint) {
	valptr := &r.native.day
	*valptr = C.guint(day)
}

// RTSPTimeRange (GstRTSPTimeRange): time range.
//
// An instance of this type is always passed by reference.
type RTSPTimeRange struct {
	*rtspTimeRange
}

// rtspTimeRange is the struct that's finalized.
type rtspTimeRange struct {
	native *C.GstRTSPTimeRange
}

// Unit: time units used.
func (r *RTSPTimeRange) Unit() RTSPRangeUnit {
	valptr := &r.native.unit
	var _v RTSPRangeUnit // out
	_v = RTSPRangeUnit(*valptr)
	return _v
}

// Min: minimum interval.
func (r *RTSPTimeRange) Min() *RTSPTime {
	valptr := &r.native.min
	var _v *RTSPTime // out
	_v = (*RTSPTime)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Max: maximum interval.
func (r *RTSPTimeRange) Max() *RTSPTime {
	valptr := &r.native.max
	var _v *RTSPTime // out
	_v = (*RTSPTime)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Min2: extra fields in the minimum interval (Since: 1.2).
func (r *RTSPTimeRange) Min2() *RTSPTime2 {
	valptr := &r.native.min2
	var _v *RTSPTime2 // out
	_v = (*RTSPTime2)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Max2: extra fields in the maximum interval (Since: 1.2).
func (r *RTSPTimeRange) Max2() *RTSPTime2 {
	valptr := &r.native.max2
	var _v *RTSPTime2 // out
	_v = (*RTSPTime2)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// RTSPTransport (GstRTSPTransport) provides helper functions to deal with RTSP
// transport strings.
//
// An instance of this type is always passed by reference.
type RTSPTransport struct {
	*rtspTransport
}

// rtspTransport is the struct that's finalized.
type rtspTransport struct {
	native *C.GstRTSPTransport
}

// Trans: transport mode.
func (r *RTSPTransport) Trans() RTSPTransMode {
	valptr := &r.native.trans
	var _v RTSPTransMode // out
	_v = RTSPTransMode(*valptr)
	return _v
}

// Profile: tansport profile.
func (r *RTSPTransport) Profile() RTSPProfile {
	valptr := &r.native.profile
	var _v RTSPProfile // out
	_v = RTSPProfile(*valptr)
	return _v
}

// LowerTransport: lower transport.
func (r *RTSPTransport) LowerTransport() RTSPLowerTrans {
	valptr := &r.native.lower_transport
	var _v RTSPLowerTrans // out
	_v = RTSPLowerTrans(*valptr)
	return _v
}

// Destination: destination ip/hostname.
func (r *RTSPTransport) Destination() string {
	valptr := &r.native.destination
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Source: source ip/hostname.
func (r *RTSPTransport) Source() string {
	valptr := &r.native.source
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Layers: number of layers.
func (r *RTSPTransport) Layers() uint {
	valptr := &r.native.layers
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// ModePlay: if play mode was selected.
func (r *RTSPTransport) ModePlay() bool {
	valptr := &r.native.mode_play
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// ModeRecord: if record mode was selected.
func (r *RTSPTransport) ModeRecord() bool {
	valptr := &r.native.mode_record
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// Append is append mode was selected.
func (r *RTSPTransport) Append() bool {
	valptr := &r.native.append
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// Interleaved: interleave range.
func (r *RTSPTransport) Interleaved() *RTSPRange {
	valptr := &r.native.interleaved
	var _v *RTSPRange // out
	_v = (*RTSPRange)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// TTL: time to live for multicast UDP.
func (r *RTSPTransport) TTL() uint {
	valptr := &r.native.ttl
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Port: port pair for multicast sessions.
func (r *RTSPTransport) Port() *RTSPRange {
	valptr := &r.native.port
	var _v *RTSPRange // out
	_v = (*RTSPRange)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// ClientPort: client port pair for receiving data. For TCP based transports,
// applications can use this field to store the sender and receiver ports of the
// client.
func (r *RTSPTransport) ClientPort() *RTSPRange {
	valptr := &r.native.client_port
	var _v *RTSPRange // out
	_v = (*RTSPRange)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// ServerPort: server port pair for receiving data. For TCP based transports,
// applications can use this field to store the sender and receiver ports of the
// server.
func (r *RTSPTransport) ServerPort() *RTSPRange {
	valptr := &r.native.server_port
	var _v *RTSPRange // out
	_v = (*RTSPRange)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Ssrc: ssrc that the sender/receiver will use.
func (r *RTSPTransport) Ssrc() uint {
	valptr := &r.native.ssrc
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Layers: number of layers.
func (r *RTSPTransport) SetLayers(layers uint) {
	valptr := &r.native.layers
	*valptr = C.guint(layers)
}

// ModePlay: if play mode was selected.
func (r *RTSPTransport) SetModePlay(modePlay bool) {
	valptr := &r.native.mode_play
	if modePlay {
		*valptr = C.TRUE
	}
}

// ModeRecord: if record mode was selected.
func (r *RTSPTransport) SetModeRecord(modeRecord bool) {
	valptr := &r.native.mode_record
	if modeRecord {
		*valptr = C.TRUE
	}
}

// Append is append mode was selected.
func (r *RTSPTransport) SetAppend(append bool) {
	valptr := &r.native.append
	if append {
		*valptr = C.TRUE
	}
}

// TTL: time to live for multicast UDP.
func (r *RTSPTransport) SetTTL(ttl uint) {
	valptr := &r.native.ttl
	*valptr = C.guint(ttl)
}

// Ssrc: ssrc that the sender/receiver will use.
func (r *RTSPTransport) SetSsrc(ssrc uint) {
	valptr := &r.native.ssrc
	*valptr = C.guint(ssrc)
}

// AsText (gst_rtsp_transport_as_text): convert transport into a string that can
// be used to signal the transport in an RTSP SETUP response.
//
// The function returns the following values:
//
//   - utf8 (optional): string describing the RTSP transport or NULL when the
//     transport is invalid.
func (transport *RTSPTransport) AsText() string {
	var _arg0 *C.GstRTSPTransport // out
	var _cret *C.gchar            // in

	_arg0 = (*C.GstRTSPTransport)(gextras.StructNative(unsafe.Pointer(transport)))

	_cret = C.gst_rtsp_transport_as_text(_arg0)
	runtime.KeepAlive(transport)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// MediaType (gst_rtsp_transport_get_media_type): get the media type of
// transport. This media type is typically used to generate Caps events.
//
// The function returns the following values:
//
//   - mediaType: media type of transport.
//   - rtspResult: T_RTSP_OK.
func (transport *RTSPTransport) MediaType() (string, RTSPResult) {
	var _arg0 *C.GstRTSPTransport // out
	var _arg1 *C.gchar            // in
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPTransport)(gextras.StructNative(unsafe.Pointer(transport)))

	_cret = C.gst_rtsp_transport_get_media_type(_arg0, &_arg1)
	runtime.KeepAlive(transport)

	var _mediaType string      // out
	var _rtspResult RTSPResult // out

	_mediaType = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
	_rtspResult = RTSPResult(_cret)

	return _mediaType, _rtspResult
}

// RTSPTransportGetManager (gst_rtsp_transport_get_manager): get the Element
// that can handle the buffers transported over trans.
//
// It is possible that there are several managers available, use option to
// selected one.
//
// manager will contain an element name or NULL when no manager is
// needed/available for trans.
//
// The function takes the following parameters:
//
//   - trans: RTSPTransMode.
//   - option index.
//
// The function returns the following values:
//
//   - manager (optional): location to hold the result.
//   - rtspResult: T_RTSP_OK.
func RTSPTransportGetManager(trans RTSPTransMode, option uint) (string, RTSPResult) {
	var _arg1 C.GstRTSPTransMode // out
	var _arg2 *C.gchar           // in
	var _arg3 C.guint            // out
	var _cret C.GstRTSPResult    // in

	_arg1 = C.GstRTSPTransMode(trans)
	_arg3 = C.guint(option)

	_cret = C.gst_rtsp_transport_get_manager(_arg1, &_arg2, _arg3)
	runtime.KeepAlive(trans)
	runtime.KeepAlive(option)

	var _manager string        // out
	var _rtspResult RTSPResult // out

	if _arg2 != nil {
		_manager = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	}
	_rtspResult = RTSPResult(_cret)

	return _manager, _rtspResult
}

// RTSPTransportGetMIME (gst_rtsp_transport_get_mime): get the mime type of
// the transport mode trans. This mime type is typically used to generate Caps
// events.
//
// Deprecated: This functions only deals with the GstRTSPTransMode
// and only returns the mime type for T_RTSP_PROFILE_AVP. Use
// gst_rtsp_transport_get_media_type() instead.
//
// The function takes the following parameters:
//
//   - trans: RTSPTransMode.
//
// The function returns the following values:
//
//   - mime: location to hold the result.
//   - rtspResult: T_RTSP_OK.
func RTSPTransportGetMIME(trans RTSPTransMode) (string, RTSPResult) {
	var _arg1 C.GstRTSPTransMode // out
	var _arg2 *C.gchar           // in
	var _cret C.GstRTSPResult    // in

	_arg1 = C.GstRTSPTransMode(trans)

	_cret = C.gst_rtsp_transport_get_mime(_arg1, &_arg2)
	runtime.KeepAlive(trans)

	var _mime string           // out
	var _rtspResult RTSPResult // out

	_mime = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	_rtspResult = RTSPResult(_cret)

	return _mime, _rtspResult
}

// RTSPTransportInit (gst_rtsp_transport_init): initialize transport so that it
// can be used.
//
// The function returns the following values:
//
//   - transport: RTSPTransport.
//   - rtspResult: T_RTSP_OK.
func RTSPTransportInit() (*RTSPTransport, RTSPResult) {
	var _arg1 C.GstRTSPTransport // in
	var _cret C.GstRTSPResult    // in

	_cret = C.gst_rtsp_transport_init(&_arg1)

	var _transport *RTSPTransport // out
	var _rtspResult RTSPResult    // out

	_transport = (*RTSPTransport)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	_rtspResult = RTSPResult(_cret)

	return _transport, _rtspResult
}

// NewRTSPTransport (gst_rtsp_transport_new): allocate a new initialized
// RTSPTransport. Use gst_rtsp_transport_free() after usage.
//
// The function returns the following values:
//
//   - transport: location to hold the new RTSPTransport.
//   - rtspResult: RTSPResult.
func NewRTSPTransport() (*RTSPTransport, RTSPResult) {
	var _arg1 *C.GstRTSPTransport // in
	var _cret C.GstRTSPResult     // in

	_cret = C.gst_rtsp_transport_new(&_arg1)

	var _transport *RTSPTransport // out
	var _rtspResult RTSPResult    // out

	_transport = (*RTSPTransport)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_transport)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_transport_free((*C.GstRTSPTransport)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _transport, _rtspResult
}

// RTSPTransportParse (gst_rtsp_transport_parse): parse the RTSP transport
// string str into transport.
//
// The function takes the following parameters:
//
//   - str: transport string.
//
// The function returns the following values:
//
//   - transport: RTSPTransport.
//   - rtspResult: RTSPResult.
func RTSPTransportParse(str string) (*RTSPTransport, RTSPResult) {
	var _arg1 *C.gchar           // out
	var _arg2 C.GstRTSPTransport // in
	var _cret C.GstRTSPResult    // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_transport_parse(_arg1, &_arg2)
	runtime.KeepAlive(str)

	var _transport *RTSPTransport // out
	var _rtspResult RTSPResult    // out

	_transport = (*RTSPTransport)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))
	_rtspResult = RTSPResult(_cret)

	return _transport, _rtspResult
}

// RTSPURL (GstRTSPUrl) provides helper functions to handle RTSP urls.
//
// An instance of this type is always passed by reference.
type RTSPURL struct {
	*rtspurL
}

// rtspurL is the struct that's finalized.
type rtspurL struct {
	native *C.GstRTSPUrl
}

func marshalRTSPURL(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &RTSPURL{&rtspurL{(*C.GstRTSPUrl)(b)}}, nil
}

// Transports transports allowed.
func (r *RTSPURL) Transports() RTSPLowerTrans {
	valptr := &r.native.transports
	var _v RTSPLowerTrans // out
	_v = RTSPLowerTrans(*valptr)
	return _v
}

// Family: family.
func (r *RTSPURL) Family() RTSPFamily {
	valptr := &r.native.family
	var _v RTSPFamily // out
	_v = RTSPFamily(*valptr)
	return _v
}

// User: user.
func (r *RTSPURL) User() string {
	valptr := &r.native.user
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Passwd: password.
func (r *RTSPURL) Passwd() string {
	valptr := &r.native.passwd
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Host: host.
func (r *RTSPURL) Host() string {
	valptr := &r.native.host
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Abspath: absolute path.
func (r *RTSPURL) Abspath() string {
	valptr := &r.native.abspath
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Query: additional query parameters.
func (r *RTSPURL) Query() string {
	valptr := &r.native.query
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Copy (gst_rtsp_url_copy): make a copy of url.
//
// The function returns the following values:
//
//   - rtspUrl: copy of url. Free with gst_rtsp_url_free () after usage.
func (url *RTSPURL) Copy() *RTSPURL {
	var _arg0 *C.GstRTSPUrl // out
	var _cret *C.GstRTSPUrl // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_url_copy(_arg0)
	runtime.KeepAlive(url)

	var _rtspUrl *RTSPURL // out

	_rtspUrl = (*RTSPURL)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_rtspUrl)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_url_free((*C.GstRTSPUrl)(intern.C))
		},
	)

	return _rtspUrl
}

// DecodePathComponents (gst_rtsp_url_decode_path_components) splits the path of
// url on '/' boundaries, decoding the resulting components,
//
// The decoding performed by this routine is "URI decoding", as defined in RFC
// 3986, commonly known as percent-decoding. For example, a string "foo\2fbar"
// will decode to "foo/bar" -- the \2f being replaced by the corresponding byte
// with hex value 0x2f. Note that there is no guarantee that the resulting
// byte sequence is valid in any given encoding. As a special case, \00 is not
// unescaped to NUL, as that would prematurely terminate the string.
//
// Also note that since paths usually start with a slash, the first component
// will usually be the empty string.
//
// The function returns the following values:
//
//   - utf8s: NULL-terminated array of URL components. Free with g_strfreev()
//     when no longer needed.
func (url *RTSPURL) DecodePathComponents() []string {
	var _arg0 *C.GstRTSPUrl // out
	var _cret **C.gchar     // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_url_decode_path_components(_arg0)
	runtime.KeepAlive(url)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// Port (gst_rtsp_url_get_port): get the port number of url.
//
// The function returns the following values:
//
//   - port: location to hold the port.
//   - rtspResult: T_RTSP_OK.
func (url *RTSPURL) Port() (uint16, RTSPResult) {
	var _arg0 *C.GstRTSPUrl   // out
	var _arg1 C.guint16       // in
	var _cret C.GstRTSPResult // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_url_get_port(_arg0, &_arg1)
	runtime.KeepAlive(url)

	var _port uint16           // out
	var _rtspResult RTSPResult // out

	_port = uint16(_arg1)
	_rtspResult = RTSPResult(_cret)

	return _port, _rtspResult
}

// RequestURI (gst_rtsp_url_get_request_uri): get a newly allocated string
// describing the request URI for url.
//
// The function returns the following values:
//
//   - utf8: string with the request URI. g_free() after usage.
func (url *RTSPURL) RequestURI() string {
	var _arg0 *C.GstRTSPUrl // out
	var _cret *C.gchar      // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_url_get_request_uri(_arg0)
	runtime.KeepAlive(url)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RequestURIWithControl (gst_rtsp_url_get_request_uri_with_control): get a
// newly allocated string describing the request URI for url combined with the
// control path for control_path.
//
// The function takes the following parameters:
//
//   - controlPath: RTSP aggregate control path.
//
// The function returns the following values:
//
//   - utf8: string with the request URI combined with the control path.
//     g_free() after usage.
func (url *RTSPURL) RequestURIWithControl(controlPath string) string {
	var _arg0 *C.GstRTSPUrl // out
	var _arg1 *C.gchar      // out
	var _cret *C.gchar      // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(controlPath)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_url_get_request_uri_with_control(_arg0, _arg1)
	runtime.KeepAlive(url)
	runtime.KeepAlive(controlPath)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetPort (gst_rtsp_url_set_port): set the port number in url to port.
//
// The function takes the following parameters:
//
//   - port: port.
//
// The function returns the following values:
//
//   - rtspResult: T_RTSP_OK.
func (url *RTSPURL) SetPort(port uint16) RTSPResult {
	var _arg0 *C.GstRTSPUrl   // out
	var _arg1 C.guint16       // out
	var _cret C.GstRTSPResult // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))
	_arg1 = C.guint16(port)

	_cret = C.gst_rtsp_url_set_port(_arg0, _arg1)
	runtime.KeepAlive(url)
	runtime.KeepAlive(port)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// RTSPURLParse (gst_rtsp_url_parse): parse the RTSP urlstr into a newly
// allocated RTSPUrl. Free after usage with gst_rtsp_url_free().
//
// The function takes the following parameters:
//
//   - urlstr: url string to parse.
//
// The function returns the following values:
//
//   - url (optional): location to hold the result.
//   - rtspResult: RTSPResult.
func RTSPURLParse(urlstr string) (*RTSPURL, RTSPResult) {
	var _arg1 *C.gchar        // out
	var _arg2 *C.GstRTSPUrl   // in
	var _cret C.GstRTSPResult // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(urlstr)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_url_parse(_arg1, &_arg2)
	runtime.KeepAlive(urlstr)

	var _url *RTSPURL          // out
	var _rtspResult RTSPResult // out

	if _arg2 != nil {
		_url = (*RTSPURL)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_url)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gst_rtsp_url_free((*C.GstRTSPUrl)(intern.C))
			},
		)
	}
	_rtspResult = RTSPResult(_cret)

	return _url, _rtspResult
}

// RTSPWatchFuncs (GstRTSPWatchFuncs): callback functions from a RTSPWatch.
//
// An instance of this type is always passed by reference.
type RTSPWatchFuncs struct {
	*rtspWatchFuncs
}

// rtspWatchFuncs is the struct that's finalized.
type rtspWatchFuncs struct {
	native *C.GstRTSPWatchFuncs
}
