// Code generated by girgen. DO NOT EDIT.

package gstcontroller

import (
	"fmt"
	"runtime"
	_ "runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/go-gst/go-gst/pkg/gst"
)

// #cgo pkg-config: gstreamer-controller-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/controller/controller.h>
// extern void _gotk4_gstcontroller1_TimedValueControlSource_ConnectValueRemoved(gpointer, GstControlPoint*, guintptr);
// extern void _gotk4_gstcontroller1_TimedValueControlSource_ConnectValueChanged(gpointer, GstControlPoint*, guintptr);
// extern void _gotk4_gstcontroller1_TimedValueControlSource_ConnectValueAdded(gpointer, GstControlPoint*, guintptr);
import "C"

// GType values.
var (
	GTypeInterpolationMode          = coreglib.Type(C.gst_interpolation_mode_get_type())
	GTypeLFOWaveform                = coreglib.Type(C.gst_lfo_waveform_get_type())
	GTypeARGBControlBinding         = coreglib.Type(C.gst_argb_control_binding_get_type())
	GTypeDirectControlBinding       = coreglib.Type(C.gst_direct_control_binding_get_type())
	GTypeInterpolationControlSource = coreglib.Type(C.gst_interpolation_control_source_get_type())
	GTypeLFOControlSource           = coreglib.Type(C.gst_lfo_control_source_get_type())
	GTypeProxyControlBinding        = coreglib.Type(C.gst_proxy_control_binding_get_type())
	GTypeTimedValueControlSource    = coreglib.Type(C.gst_timed_value_control_source_get_type())
	GTypeTriggerControlSource       = coreglib.Type(C.gst_trigger_control_source_get_type())
	GTypeControlPoint               = coreglib.Type(C.gst_control_point_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInterpolationMode, F: marshalInterpolationMode},
		coreglib.TypeMarshaler{T: GTypeLFOWaveform, F: marshalLFOWaveform},
		coreglib.TypeMarshaler{T: GTypeARGBControlBinding, F: marshalARGBControlBinding},
		coreglib.TypeMarshaler{T: GTypeDirectControlBinding, F: marshalDirectControlBinding},
		coreglib.TypeMarshaler{T: GTypeInterpolationControlSource, F: marshalInterpolationControlSource},
		coreglib.TypeMarshaler{T: GTypeLFOControlSource, F: marshalLFOControlSource},
		coreglib.TypeMarshaler{T: GTypeProxyControlBinding, F: marshalProxyControlBinding},
		coreglib.TypeMarshaler{T: GTypeTimedValueControlSource, F: marshalTimedValueControlSource},
		coreglib.TypeMarshaler{T: GTypeTriggerControlSource, F: marshalTriggerControlSource},
		coreglib.TypeMarshaler{T: GTypeControlPoint, F: marshalControlPoint},
	})
}

// InterpolationMode various interpolation modes available.
type InterpolationMode C.gint

const (
	// InterpolationModeNone: steps-like interpolation, default.
	InterpolationModeNone InterpolationMode = iota
	// InterpolationModeLinear: linear interpolation.
	InterpolationModeLinear
	// InterpolationModeCubic: cubic interpolation (natural), may overshoot the
	// min or max values set by the control point, but is more 'curvy'.
	InterpolationModeCubic
	// InterpolationModeCubicMonotonic: monotonic cubic interpolation, will not
	// produce any values outside of the min-max range set by the control points
	// (Since: 1.8).
	InterpolationModeCubicMonotonic
)

func marshalInterpolationMode(p uintptr) (interface{}, error) {
	return InterpolationMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for InterpolationMode.
func (i InterpolationMode) String() string {
	switch i {
	case InterpolationModeNone:
		return "None"
	case InterpolationModeLinear:
		return "Linear"
	case InterpolationModeCubic:
		return "Cubic"
	case InterpolationModeCubicMonotonic:
		return "CubicMonotonic"
	default:
		return fmt.Sprintf("InterpolationMode(%d)", i)
	}
}

// LFOWaveform various waveform modes available.
type LFOWaveform C.gint

const (
	// LfoWaveformSine: sine waveform.
	LfoWaveformSine LFOWaveform = iota
	// LfoWaveformSquare: square waveform.
	LfoWaveformSquare
	// LfoWaveformSaw: saw waveform.
	LfoWaveformSaw
	// LfoWaveformReverseSaw: reverse saw waveform.
	LfoWaveformReverseSaw
	// LfoWaveformTriangle: triangle waveform.
	LfoWaveformTriangle
)

func marshalLFOWaveform(p uintptr) (interface{}, error) {
	return LFOWaveform(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for LFOWaveform.
func (l LFOWaveform) String() string {
	switch l {
	case LfoWaveformSine:
		return "Sine"
	case LfoWaveformSquare:
		return "Square"
	case LfoWaveformSaw:
		return "Saw"
	case LfoWaveformReverseSaw:
		return "ReverseSaw"
	case LfoWaveformTriangle:
		return "Triangle"
	default:
		return fmt.Sprintf("LFOWaveform(%d)", l)
	}
}

// TimedValueControlInvalidateCache: reset the controlled value cache.
//
// The function takes the following parameters:
//
//   - self: TimedValueControlSource.
func TimedValueControlInvalidateCache(self TimedValueControlSourcer) {
	var _arg1 *C.GstTimedValueControlSource // out

	_arg1 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.gst_timed_value_control_invalidate_cache(_arg1)
	runtime.KeepAlive(self)
}

// ARGBControlBindingOverrides contains methods that are overridable.
type ARGBControlBindingOverrides struct {
}

func defaultARGBControlBindingOverrides(v *ARGBControlBinding) ARGBControlBindingOverrides {
	return ARGBControlBindingOverrides{}
}

// ARGBControlBinding: value mapping object that attaches multiple control
// sources to a guint gobject properties representing a color. A control value
// of 0.0 will turn the color component off and a value of 1.0 will be the color
// level.
type ARGBControlBinding struct {
	_ [0]func() // equal guard
	gst.ControlBinding
}

var (
	_ gst.ControlBindinger = (*ARGBControlBinding)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ARGBControlBinding, *ARGBControlBindingClass, ARGBControlBindingOverrides](
		GTypeARGBControlBinding,
		initARGBControlBindingClass,
		wrapARGBControlBinding,
		defaultARGBControlBindingOverrides,
	)
}

func initARGBControlBindingClass(gclass unsafe.Pointer, overrides ARGBControlBindingOverrides, classInitFunc func(*ARGBControlBindingClass)) {
	if classInitFunc != nil {
		class := (*ARGBControlBindingClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapARGBControlBinding(obj *coreglib.Object) *ARGBControlBinding {
	return &ARGBControlBinding{
		ControlBinding: gst.ControlBinding{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalARGBControlBinding(p uintptr) (interface{}, error) {
	return wrapARGBControlBinding(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewARGBControlBinding: create a new control-binding that attaches the given
// ControlSource to the #GObject property.
//
// The function takes the following parameters:
//
//   - object of the property.
//   - propertyName: property-name to attach the control source.
//   - csA: control source for the alpha channel.
//   - csR: control source for the red channel.
//   - csG: control source for the green channel.
//   - csB: control source for the blue channel.
//
// The function returns the following values:
//
//   - argbControlBinding: new ARGBControlBinding.
func NewARGBControlBinding(object gst.GstObjector, propertyName string, csA, csR, csG, csB gst.ControlSourcer) *ARGBControlBinding {
	var _arg1 *C.GstObject         // out
	var _arg2 *C.gchar             // out
	var _arg3 *C.GstControlSource  // out
	var _arg4 *C.GstControlSource  // out
	var _arg5 *C.GstControlSource  // out
	var _arg6 *C.GstControlSource  // out
	var _cret *C.GstControlBinding // in

	_arg1 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GstControlSource)(unsafe.Pointer(coreglib.InternObject(csA).Native()))
	_arg4 = (*C.GstControlSource)(unsafe.Pointer(coreglib.InternObject(csR).Native()))
	_arg5 = (*C.GstControlSource)(unsafe.Pointer(coreglib.InternObject(csG).Native()))
	_arg6 = (*C.GstControlSource)(unsafe.Pointer(coreglib.InternObject(csB).Native()))

	_cret = C.gst_argb_control_binding_new(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(object)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(csA)
	runtime.KeepAlive(csR)
	runtime.KeepAlive(csG)
	runtime.KeepAlive(csB)

	var _argbControlBinding *ARGBControlBinding // out

	_argbControlBinding = wrapARGBControlBinding(coreglib.Take(unsafe.Pointer(_cret)))

	return _argbControlBinding
}

// DirectControlBindingOverrides contains methods that are overridable.
type DirectControlBindingOverrides struct {
}

func defaultDirectControlBindingOverrides(v *DirectControlBinding) DirectControlBindingOverrides {
	return DirectControlBindingOverrides{}
}

// DirectControlBinding: value mapping object that attaches control sources
// to gobject properties. It will map the control values directly to the
// target property range. If a non-absolute direct control binding is used,
// the value range [0.0 ... 1.0] is mapped to full target property range,
// and all values outside the range will be clipped. An absolute control binding
// will not do any value transformations.
type DirectControlBinding struct {
	_ [0]func() // equal guard
	gst.ControlBinding
}

var (
	_ gst.ControlBindinger = (*DirectControlBinding)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DirectControlBinding, *DirectControlBindingClass, DirectControlBindingOverrides](
		GTypeDirectControlBinding,
		initDirectControlBindingClass,
		wrapDirectControlBinding,
		defaultDirectControlBindingOverrides,
	)
}

func initDirectControlBindingClass(gclass unsafe.Pointer, overrides DirectControlBindingOverrides, classInitFunc func(*DirectControlBindingClass)) {
	if classInitFunc != nil {
		class := (*DirectControlBindingClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDirectControlBinding(obj *coreglib.Object) *DirectControlBinding {
	return &DirectControlBinding{
		ControlBinding: gst.ControlBinding{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalDirectControlBinding(p uintptr) (interface{}, error) {
	return wrapDirectControlBinding(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewDirectControlBinding: create a new control-binding that attaches the
// ControlSource to the #GObject property. It will map the control source range
// [0.0 ... 1.0] to the full target property range, and clip all values outside
// this range.
//
// The function takes the following parameters:
//
//   - object of the property.
//   - propertyName: property-name to attach the control source.
//   - cs: control source.
//
// The function returns the following values:
//
//   - directControlBinding: new DirectControlBinding.
func NewDirectControlBinding(object gst.GstObjector, propertyName string, cs gst.ControlSourcer) *DirectControlBinding {
	var _arg1 *C.GstObject         // out
	var _arg2 *C.gchar             // out
	var _arg3 *C.GstControlSource  // out
	var _cret *C.GstControlBinding // in

	_arg1 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GstControlSource)(unsafe.Pointer(coreglib.InternObject(cs).Native()))

	_cret = C.gst_direct_control_binding_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(object)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(cs)

	var _directControlBinding *DirectControlBinding // out

	_directControlBinding = wrapDirectControlBinding(coreglib.Take(unsafe.Pointer(_cret)))

	return _directControlBinding
}

// NewDirectControlBindingAbsolute: create a new control-binding that attaches
// the ControlSource to the #GObject property. It will directly map the control
// source values to the target property range without any transformations.
//
// The function takes the following parameters:
//
//   - object of the property.
//   - propertyName: property-name to attach the control source.
//   - cs: control source.
//
// The function returns the following values:
//
//   - directControlBinding: new DirectControlBinding.
func NewDirectControlBindingAbsolute(object gst.GstObjector, propertyName string, cs gst.ControlSourcer) *DirectControlBinding {
	var _arg1 *C.GstObject         // out
	var _arg2 *C.gchar             // out
	var _arg3 *C.GstControlSource  // out
	var _cret *C.GstControlBinding // in

	_arg1 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GstControlSource)(unsafe.Pointer(coreglib.InternObject(cs).Native()))

	_cret = C.gst_direct_control_binding_new_absolute(_arg1, _arg2, _arg3)
	runtime.KeepAlive(object)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(cs)

	var _directControlBinding *DirectControlBinding // out

	_directControlBinding = wrapDirectControlBinding(coreglib.Take(unsafe.Pointer(_cret)))

	return _directControlBinding
}

// InterpolationControlSourceOverrides contains methods that are overridable.
type InterpolationControlSourceOverrides struct {
}

func defaultInterpolationControlSourceOverrides(v *InterpolationControlSource) InterpolationControlSourceOverrides {
	return InterpolationControlSourceOverrides{}
}

// InterpolationControlSource is a ControlSource, that interpolates values
// between user-given control points. It supports several interpolation modes
// and property types.
//
// To use InterpolationControlSource get a new instance by calling
// gst_interpolation_control_source_new(), bind it to a Spec and set some
// control points by calling gst_timed_value_control_source_set().
//
// All functions are MT-safe.
type InterpolationControlSource struct {
	_ [0]func() // equal guard
	TimedValueControlSource
}

var (
	_ TimedValueControlSourcer = (*InterpolationControlSource)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*InterpolationControlSource, *InterpolationControlSourceClass, InterpolationControlSourceOverrides](
		GTypeInterpolationControlSource,
		initInterpolationControlSourceClass,
		wrapInterpolationControlSource,
		defaultInterpolationControlSourceOverrides,
	)
}

func initInterpolationControlSourceClass(gclass unsafe.Pointer, overrides InterpolationControlSourceOverrides, classInitFunc func(*InterpolationControlSourceClass)) {
	if classInitFunc != nil {
		class := (*InterpolationControlSourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapInterpolationControlSource(obj *coreglib.Object) *InterpolationControlSource {
	return &InterpolationControlSource{
		TimedValueControlSource: TimedValueControlSource{
			ControlSource: gst.ControlSource{
				GstObject: gst.GstObject{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalInterpolationControlSource(p uintptr) (interface{}, error) {
	return wrapInterpolationControlSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewInterpolationControlSource: this returns a new, unbound
// InterpolationControlSource.
//
// The function returns the following values:
//
//   - interpolationControlSource: new, unbound InterpolationControlSource.
func NewInterpolationControlSource() *InterpolationControlSource {
	var _cret *C.GstControlSource // in

	_cret = C.gst_interpolation_control_source_new()

	var _interpolationControlSource *InterpolationControlSource // out

	_interpolationControlSource = wrapInterpolationControlSource(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _interpolationControlSource
}

// LFOControlSourceOverrides contains methods that are overridable.
type LFOControlSourceOverrides struct {
}

func defaultLFOControlSourceOverrides(v *LFOControlSource) LFOControlSourceOverrides {
	return LFOControlSourceOverrides{}
}

// LFOControlSource is a ControlSource, that provides several periodic waveforms
// as control values.
//
// To use LFOControlSource get a new instance by calling
// gst_lfo_control_source_new(), bind it to a Spec and set the relevant
// properties.
//
// All functions are MT-safe.
type LFOControlSource struct {
	_ [0]func() // equal guard
	gst.ControlSource
}

var (
	_ gst.ControlSourcer = (*LFOControlSource)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*LFOControlSource, *LFOControlSourceClass, LFOControlSourceOverrides](
		GTypeLFOControlSource,
		initLFOControlSourceClass,
		wrapLFOControlSource,
		defaultLFOControlSourceOverrides,
	)
}

func initLFOControlSourceClass(gclass unsafe.Pointer, overrides LFOControlSourceOverrides, classInitFunc func(*LFOControlSourceClass)) {
	if classInitFunc != nil {
		class := (*LFOControlSourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapLFOControlSource(obj *coreglib.Object) *LFOControlSource {
	return &LFOControlSource{
		ControlSource: gst.ControlSource{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalLFOControlSource(p uintptr) (interface{}, error) {
	return wrapLFOControlSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewLFOControlSource: this returns a new, unbound LFOControlSource.
//
// The function returns the following values:
//
//   - lfoControlSource: new, unbound LFOControlSource.
func NewLFOControlSource() *LFOControlSource {
	var _cret *C.GstControlSource // in

	_cret = C.gst_lfo_control_source_new()

	var _lfoControlSource *LFOControlSource // out

	_lfoControlSource = wrapLFOControlSource(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _lfoControlSource
}

// ProxyControlBindingOverrides contains methods that are overridable.
type ProxyControlBindingOverrides struct {
}

func defaultProxyControlBindingOverrides(v *ProxyControlBinding) ProxyControlBindingOverrides {
	return ProxyControlBindingOverrides{}
}

// ProxyControlBinding that forwards requests to another ControlBinding.
type ProxyControlBinding struct {
	_ [0]func() // equal guard
	gst.ControlBinding
}

var (
	_ gst.ControlBindinger = (*ProxyControlBinding)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ProxyControlBinding, *ProxyControlBindingClass, ProxyControlBindingOverrides](
		GTypeProxyControlBinding,
		initProxyControlBindingClass,
		wrapProxyControlBinding,
		defaultProxyControlBindingOverrides,
	)
}

func initProxyControlBindingClass(gclass unsafe.Pointer, overrides ProxyControlBindingOverrides, classInitFunc func(*ProxyControlBindingClass)) {
	if classInitFunc != nil {
		class := (*ProxyControlBindingClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapProxyControlBinding(obj *coreglib.Object) *ProxyControlBinding {
	return &ProxyControlBinding{
		ControlBinding: gst.ControlBinding{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalProxyControlBinding(p uintptr) (interface{}, error) {
	return wrapProxyControlBinding(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewProxyControlBinding forwards all access to data or sync_values() requests
// from property_name on object to the control binding at ref_property_name on
// ref_object.
//
// The function takes the following parameters:
//
//   - object: Object.
//   - propertyName: property name in object to control.
//   - refObject to forward all ControlBinding requests to.
//   - refPropertyName: property_name in ref_object to control.
//
// The function returns the following values:
//
//   - proxyControlBinding: new ControlBinding that proxies the control
//     interface between properties on different Object's.
func NewProxyControlBinding(object gst.GstObjector, propertyName string, refObject gst.GstObjector, refPropertyName string) *ProxyControlBinding {
	var _arg1 *C.GstObject         // out
	var _arg2 *C.gchar             // out
	var _arg3 *C.GstObject         // out
	var _arg4 *C.gchar             // out
	var _cret *C.GstControlBinding // in

	_arg1 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(refObject).Native()))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(refPropertyName)))
	defer C.free(unsafe.Pointer(_arg4))

	_cret = C.gst_proxy_control_binding_new(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(object)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(refObject)
	runtime.KeepAlive(refPropertyName)

	var _proxyControlBinding *ProxyControlBinding // out

	_proxyControlBinding = wrapProxyControlBinding(coreglib.Take(unsafe.Pointer(_cret)))

	return _proxyControlBinding
}

// TimedValueControlSourceOverrides contains methods that are overridable.
type TimedValueControlSourceOverrides struct {
}

func defaultTimedValueControlSourceOverrides(v *TimedValueControlSource) TimedValueControlSourceOverrides {
	return TimedValueControlSourceOverrides{}
}

// TimedValueControlSource: base class for ControlSource that use time-stamped
// values.
//
// When overriding bind, chain up first to give this bind implementation a
// chance to setup things.
//
// All functions are MT-safe.
type TimedValueControlSource struct {
	_ [0]func() // equal guard
	gst.ControlSource
}

var (
	_ gst.ControlSourcer = (*TimedValueControlSource)(nil)
)

// TimedValueControlSourcer describes types inherited from class TimedValueControlSource.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type TimedValueControlSourcer interface {
	coreglib.Objector
	baseTimedValueControlSource() *TimedValueControlSource
}

var _ TimedValueControlSourcer = (*TimedValueControlSource)(nil)

func init() {
	coreglib.RegisterClassInfo[*TimedValueControlSource, *TimedValueControlSourceClass, TimedValueControlSourceOverrides](
		GTypeTimedValueControlSource,
		initTimedValueControlSourceClass,
		wrapTimedValueControlSource,
		defaultTimedValueControlSourceOverrides,
	)
}

func initTimedValueControlSourceClass(gclass unsafe.Pointer, overrides TimedValueControlSourceOverrides, classInitFunc func(*TimedValueControlSourceClass)) {
	if classInitFunc != nil {
		class := (*TimedValueControlSourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTimedValueControlSource(obj *coreglib.Object) *TimedValueControlSource {
	return &TimedValueControlSource{
		ControlSource: gst.ControlSource{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalTimedValueControlSource(p uintptr) (interface{}, error) {
	return wrapTimedValueControlSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *TimedValueControlSource) baseTimedValueControlSource() *TimedValueControlSource {
	return self
}

// BaseTimedValueControlSource returns the underlying base object.
func BaseTimedValueControlSource(obj TimedValueControlSourcer) *TimedValueControlSource {
	return obj.baseTimedValueControlSource()
}

// ConnectValueAdded is emitted right after the new value has been added to
// self.
func (self *TimedValueControlSource) ConnectValueAdded(f func(timedValue *ControlPoint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "value-added", false, unsafe.Pointer(C._gotk4_gstcontroller1_TimedValueControlSource_ConnectValueAdded), f)
}

// ConnectValueChanged is emitted right after the new value has been set on
// timed_signals.
func (self *TimedValueControlSource) ConnectValueChanged(f func(timedValue *ControlPoint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "value-changed", false, unsafe.Pointer(C._gotk4_gstcontroller1_TimedValueControlSource_ConnectValueChanged), f)
}

// ConnectValueRemoved is emitted when timed_value is removed from self.
func (self *TimedValueControlSource) ConnectValueRemoved(f func(timedValue *ControlPoint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "value-removed", false, unsafe.Pointer(C._gotk4_gstcontroller1_TimedValueControlSource_ConnectValueRemoved), f)
}

// All returns a read-only copy of the list of TimedValue for the given
// property. Free the list after done with it.
//
// The function returns the following values:
//
//   - list: copy of the list, or NULL if the property isn't handled by the
//     controller.
func (self *TimedValueControlSource) All() []*gst.TimedValue {
	var _arg0 *C.GstTimedValueControlSource // out
	var _cret *C.GList                      // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gst_timed_value_control_source_get_all(_arg0)
	runtime.KeepAlive(self)

	var _list []*gst.TimedValue // out

	_list = make([]*gst.TimedValue, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstTimedValue)(v)
		var dst *gst.TimedValue // out
		dst = (*gst.TimedValue)(gextras.NewStructNative(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// Count: get the number of control points that are set.
//
// The function returns the following values:
//
//   - gint: number of control points that are set.
func (self *TimedValueControlSource) Count() int {
	var _arg0 *C.GstTimedValueControlSource // out
	var _cret C.gint                        // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gst_timed_value_control_source_get_count(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Set the value of given controller-handled property at a certain time.
//
// The function takes the following parameters:
//
//   - timestamp: time the control-change is scheduled for.
//   - value: control-value.
//
// The function returns the following values:
//
//   - ok: FALSE if the values couldn't be set, TRUE otherwise.
func (self *TimedValueControlSource) Set(timestamp gst.ClockTime, value float64) bool {
	var _arg0 *C.GstTimedValueControlSource // out
	var _arg1 C.GstClockTime                // out
	var _arg2 C.gdouble                     // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.GstClockTime(timestamp)
	_arg2 = C.gdouble(value)

	_cret = C.gst_timed_value_control_source_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(timestamp)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetFromList sets multiple timed values at once.
//
// The function takes the following parameters:
//
//   - timedvalues: list with TimedValue items.
//
// The function returns the following values:
//
//   - ok: FALSE if the values couldn't be set, TRUE otherwise.
func (self *TimedValueControlSource) SetFromList(timedvalues []*gst.TimedValue) bool {
	var _arg0 *C.GstTimedValueControlSource // out
	var _arg1 *C.GSList                     // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	for i := len(timedvalues) - 1; i >= 0; i-- {
		src := timedvalues[i]
		var dst *C.GstTimedValue // out
		dst = (*C.GstTimedValue)(gextras.StructNative(unsafe.Pointer(src)))
		_arg1 = C.g_slist_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
	}
	defer C.g_slist_free(_arg1)

	_cret = C.gst_timed_value_control_source_set_from_list(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(timedvalues)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Unset: used to remove the value of given controller-handled property at a
// certain time.
//
// The function takes the following parameters:
//
//   - timestamp: time the control-change should be removed from.
//
// The function returns the following values:
//
//   - ok: FALSE if the value couldn't be unset (i.e. not found, TRUE otherwise.
func (self *TimedValueControlSource) Unset(timestamp gst.ClockTime) bool {
	var _arg0 *C.GstTimedValueControlSource // out
	var _arg1 C.GstClockTime                // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.GstClockTime(timestamp)

	_cret = C.gst_timed_value_control_source_unset(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(timestamp)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UnsetAll: used to remove all time-stamped values of given controller-handled
// property.
func (self *TimedValueControlSource) UnsetAll() {
	var _arg0 *C.GstTimedValueControlSource // out

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.gst_timed_value_control_source_unset_all(_arg0)
	runtime.KeepAlive(self)
}

// TriggerControlSourceOverrides contains methods that are overridable.
type TriggerControlSourceOverrides struct {
}

func defaultTriggerControlSourceOverrides(v *TriggerControlSource) TriggerControlSourceOverrides {
	return TriggerControlSourceOverrides{}
}

// TriggerControlSource is a ControlSource, that returns values from user-given
// control points. It allows for a tolerance on the time-stamps.
//
// To use TriggerControlSource get a new instance by calling
// gst_trigger_control_source_new(), bind it to a Spec and set some control
// points by calling gst_timed_value_control_source_set().
//
// All functions are MT-safe.
type TriggerControlSource struct {
	_ [0]func() // equal guard
	TimedValueControlSource
}

var (
	_ TimedValueControlSourcer = (*TriggerControlSource)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TriggerControlSource, *TriggerControlSourceClass, TriggerControlSourceOverrides](
		GTypeTriggerControlSource,
		initTriggerControlSourceClass,
		wrapTriggerControlSource,
		defaultTriggerControlSourceOverrides,
	)
}

func initTriggerControlSourceClass(gclass unsafe.Pointer, overrides TriggerControlSourceOverrides, classInitFunc func(*TriggerControlSourceClass)) {
	if classInitFunc != nil {
		class := (*TriggerControlSourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTriggerControlSource(obj *coreglib.Object) *TriggerControlSource {
	return &TriggerControlSource{
		TimedValueControlSource: TimedValueControlSource{
			ControlSource: gst.ControlSource{
				GstObject: gst.GstObject{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalTriggerControlSource(p uintptr) (interface{}, error) {
	return wrapTriggerControlSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewTriggerControlSource: this returns a new, unbound TriggerControlSource.
//
// The function returns the following values:
//
//   - triggerControlSource: new, unbound TriggerControlSource.
func NewTriggerControlSource() *TriggerControlSource {
	var _cret *C.GstControlSource // in

	_cret = C.gst_trigger_control_source_new()

	var _triggerControlSource *TriggerControlSource // out

	_triggerControlSource = wrapTriggerControlSource(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _triggerControlSource
}

// ARGBControlBindingClass class structure of ARGBControlBinding.
//
// An instance of this type is always passed by reference.
type ARGBControlBindingClass struct {
	*argbControlBindingClass
}

// argbControlBindingClass is the struct that's finalized.
type argbControlBindingClass struct {
	native *C.GstARGBControlBindingClass
}

// ParentClass: parent class.
func (a *ARGBControlBindingClass) ParentClass() *gst.ControlBindingClass {
	valptr := &a.native.parent_class
	var _v *gst.ControlBindingClass // out
	_v = (*gst.ControlBindingClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// ControlPoint: internal structure for value+time and various temporary values
// used for interpolation. This "inherits" from GstTimedValue.
//
// An instance of this type is always passed by reference.
type ControlPoint struct {
	*controlPoint
}

// controlPoint is the struct that's finalized.
type controlPoint struct {
	native *C.GstControlPoint
}

func marshalControlPoint(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &ControlPoint{&controlPoint{(*C.GstControlPoint)(b)}}, nil
}

// Timestamp: timestamp of the value change.
func (c *ControlPoint) Timestamp() gst.ClockTime {
	valptr := &c.native.timestamp
	var _v gst.ClockTime // out
	_v = gst.ClockTime(*valptr)
	return _v
}

// Value: new value.
func (c *ControlPoint) Value() float64 {
	valptr := &c.native.value
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Value: new value.
func (c *ControlPoint) SetValue(value float64) {
	valptr := &c.native.value
	*valptr = C.gdouble(value)
}

// Copy copies a ControlPoint.
//
// The function returns the following values:
//
//   - controlPoint: copy of cp.
func (cp *ControlPoint) Copy() *ControlPoint {
	var _arg0 *C.GstControlPoint // out
	var _cret *C.GstControlPoint // in

	_arg0 = (*C.GstControlPoint)(gextras.StructNative(unsafe.Pointer(cp)))

	_cret = C.gst_control_point_copy(_arg0)
	runtime.KeepAlive(cp)

	var _controlPoint *ControlPoint // out

	_controlPoint = (*ControlPoint)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_controlPoint)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_control_point_free((*C.GstControlPoint)(intern.C))
		},
	)

	return _controlPoint
}

// DirectControlBindingClass class structure of DirectControlBinding.
//
// An instance of this type is always passed by reference.
type DirectControlBindingClass struct {
	*directControlBindingClass
}

// directControlBindingClass is the struct that's finalized.
type directControlBindingClass struct {
	native *C.GstDirectControlBindingClass
}

// ParentClass: parent class.
func (d *DirectControlBindingClass) ParentClass() *gst.ControlBindingClass {
	valptr := &d.native.parent_class
	var _v *gst.ControlBindingClass // out
	_v = (*gst.ControlBindingClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// InterpolationControlSourceClass: instance of this type is always passed by
// reference.
type InterpolationControlSourceClass struct {
	*interpolationControlSourceClass
}

// interpolationControlSourceClass is the struct that's finalized.
type interpolationControlSourceClass struct {
	native *C.GstInterpolationControlSourceClass
}

func (i *InterpolationControlSourceClass) ParentClass() *TimedValueControlSourceClass {
	valptr := &i.native.parent_class
	var _v *TimedValueControlSourceClass // out
	_v = (*TimedValueControlSourceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// LFOControlSourceClass: instance of this type is always passed by reference.
type LFOControlSourceClass struct {
	*lfoControlSourceClass
}

// lfoControlSourceClass is the struct that's finalized.
type lfoControlSourceClass struct {
	native *C.GstLFOControlSourceClass
}

func (l *LFOControlSourceClass) ParentClass() *gst.ControlSourceClass {
	valptr := &l.native.parent_class
	var _v *gst.ControlSourceClass // out
	_v = (*gst.ControlSourceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// ProxyControlBindingClass: opaque ProxyControlBindingClass struct
//
// An instance of this type is always passed by reference.
type ProxyControlBindingClass struct {
	*proxyControlBindingClass
}

// proxyControlBindingClass is the struct that's finalized.
type proxyControlBindingClass struct {
	native *C.GstProxyControlBindingClass
}

// TimedValueControlSourceClass: instance of this type is always passed by
// reference.
type TimedValueControlSourceClass struct {
	*timedValueControlSourceClass
}

// timedValueControlSourceClass is the struct that's finalized.
type timedValueControlSourceClass struct {
	native *C.GstTimedValueControlSourceClass
}

func (t *TimedValueControlSourceClass) ParentClass() *gst.ControlSourceClass {
	valptr := &t.native.parent_class
	var _v *gst.ControlSourceClass // out
	_v = (*gst.ControlSourceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// TriggerControlSourceClass: instance of this type is always passed by
// reference.
type TriggerControlSourceClass struct {
	*triggerControlSourceClass
}

// triggerControlSourceClass is the struct that's finalized.
type triggerControlSourceClass struct {
	native *C.GstTriggerControlSourceClass
}

func (t *TriggerControlSourceClass) ParentClass() *TimedValueControlSourceClass {
	valptr := &t.native.parent_class
	var _v *TimedValueControlSourceClass // out
	_v = (*TimedValueControlSourceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
