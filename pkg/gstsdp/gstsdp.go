// Code generated by girgen. DO NOT EDIT.

package gstsdp

import (
	"fmt"
	"runtime"
	_ "runtime/cgo"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/go-gst/go-gst/pkg/gst"
)

// #cgo pkg-config: gstreamer-sdp-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/sdp/sdp.h>
import "C"

// GType values.
var (
	GTypeMIKEYMessage = coreglib.Type(C.gst_mikey_message_get_type())
	GTypeMIKEYPayload = coreglib.Type(C.gst_mikey_payload_get_type())
	GTypeSDPMessage   = coreglib.Type(C.gst_sdp_message_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMIKEYMessage, F: marshalMIKEYMessage},
		coreglib.TypeMarshaler{T: GTypeMIKEYPayload, F: marshalMIKEYPayload},
		coreglib.TypeMarshaler{T: GTypeSDPMessage, F: marshalSDPMessage},
	})
}

// MIKEY_VERSION (GST_MIKEY_VERSION): supported MIKEY version 1.
const MIKEY_VERSION = 1

// SDP_BWTYPE_AS (GST_SDP_BWTYPE_AS): application-Specific Maximum bandwidth
// modifier.
const SDP_BWTYPE_AS = "AS"

// SDP_BWTYPE_CT (GST_SDP_BWTYPE_CT): conference Total bandwidth modifier.
const SDP_BWTYPE_CT = "CT"

// SDP_BWTYPE_EXT_PREFIX (GST_SDP_BWTYPE_EXT_PREFIX): extension prefix bandwidth
// modifier.
const SDP_BWTYPE_EXT_PREFIX = "X-"

// SDP_BWTYPE_RR (GST_SDP_BWTYPE_RR): RTCP bandwidth allocated to data receivers
// (RFC 3556).
const SDP_BWTYPE_RR = "RR"

// SDP_BWTYPE_RS (GST_SDP_BWTYPE_RS): RTCP bandwidth allocated to active data
// senders (RFC 3556).
const SDP_BWTYPE_RS = "RS"

// SDP_BWTYPE_TIAS (GST_SDP_BWTYPE_TIAS): transport Independent Application
// Specific Maximum bandwidth (RFC 3890).
const SDP_BWTYPE_TIAS = "TIAS"

// MIKEYCacheType (GstMIKEYCacheType): different cache types.
type MIKEYCacheType C.gint

const (
	// MikeyCacheNone (GST_MIKEY_CACHE_NONE): envelope key MUST NOT be cached.
	MikeyCacheNone MIKEYCacheType = iota
	// MikeyCacheAlways (GST_MIKEY_CACHE_ALWAYS): envelope key MUST be cached.
	MikeyCacheAlways
	// MikeyCacheForCsb (GST_MIKEY_CACHE_FOR_CSB): envelope key MUST be cached,
	// but only to be used for the specific CSB.
	MikeyCacheForCsb
)

// String returns the name in string for MIKEYCacheType.
func (m MIKEYCacheType) String() string {
	switch m {
	case MikeyCacheNone:
		return "None"
	case MikeyCacheAlways:
		return "Always"
	case MikeyCacheForCsb:
		return "ForCsb"
	default:
		return fmt.Sprintf("MIKEYCacheType(%d)", m)
	}
}

// MIKEYEncAlg (GstMIKEYEncAlg): encryption algorithm used to encrypt the Encr
// data field.
type MIKEYEncAlg C.gint

const (
	// MikeyEncNull (GST_MIKEY_ENC_NULL): no encryption.
	MikeyEncNull MIKEYEncAlg = 0
	// MikeyEncAesCm128 (GST_MIKEY_ENC_AES_CM_128): AES-CM using a 128-bit key.
	MikeyEncAesCm128 MIKEYEncAlg = 1
	// MikeyEncAesKw128 (GST_MIKEY_ENC_AES_KW_128): AES Key Wrap using a 128-bit
	// key.
	MikeyEncAesKw128 MIKEYEncAlg = 2
	// MikeyEncAesGcm128 (GST_MIKEY_ENC_AES_GCM_128): AES-GCM using a 128-bit
	// key (Since: 1.16).
	MikeyEncAesGcm128 MIKEYEncAlg = 6
)

// String returns the name in string for MIKEYEncAlg.
func (m MIKEYEncAlg) String() string {
	switch m {
	case MikeyEncNull:
		return "Null"
	case MikeyEncAesCm128:
		return "AesCm128"
	case MikeyEncAesKw128:
		return "AesKw128"
	case MikeyEncAesGcm128:
		return "AesGcm128"
	default:
		return fmt.Sprintf("MIKEYEncAlg(%d)", m)
	}
}

// MIKEYKVType (GstMIKEYKVType): key validity type.
type MIKEYKVType C.gint

const (
	// MikeyKvNull (GST_MIKEY_KV_NULL): no specific usage rule.
	MikeyKvNull MIKEYKVType = iota
	// MikeyKvSpi (GST_MIKEY_KV_SPI): key is associated with the SPI/MKI.
	MikeyKvSpi
	// MikeyKvInterval (GST_MIKEY_KV_INTERVAL): key has a start and expiration
	// time.
	MikeyKvInterval
)

// String returns the name in string for MIKEYKVType.
func (m MIKEYKVType) String() string {
	switch m {
	case MikeyKvNull:
		return "Null"
	case MikeyKvSpi:
		return "Spi"
	case MikeyKvInterval:
		return "Interval"
	default:
		return fmt.Sprintf("MIKEYKVType(%d)", m)
	}
}

// MIKEYKeyDataType (GstMIKEYKeyDataType): type of key.
type MIKEYKeyDataType C.gint

const (
	// MikeyKdTgk (GST_MIKEY_KD_TGK): TEK Generation Key.
	MikeyKdTgk MIKEYKeyDataType = 0
	// MikeyKdTek (GST_MIKEY_KD_TEK): traffic-Encrypting Key.
	MikeyKdTek MIKEYKeyDataType = 2
)

// String returns the name in string for MIKEYKeyDataType.
func (m MIKEYKeyDataType) String() string {
	switch m {
	case MikeyKdTgk:
		return "Tgk"
	case MikeyKdTek:
		return "Tek"
	default:
		return fmt.Sprintf("MIKEYKeyDataType(%d)", m)
	}
}

// MIKEYMacAlg (GstMIKEYMacAlg) specifies the authentication algorithm used.
type MIKEYMacAlg C.gint

const (
	// MikeyMacNull (GST_MIKEY_MAC_NULL): no authentication.
	MikeyMacNull MIKEYMacAlg = iota
	// MikeyMacHMACSHA1160 (GST_MIKEY_MAC_HMAC_SHA_1_160): HMAC-SHA-1-160.
	MikeyMacHMACSHA1160
)

// String returns the name in string for MIKEYMacAlg.
func (m MIKEYMacAlg) String() string {
	switch m {
	case MikeyMacNull:
		return "Null"
	case MikeyMacHMACSHA1160:
		return "HMACSHA1160"
	default:
		return fmt.Sprintf("MIKEYMacAlg(%d)", m)
	}
}

// MIKEYMapType (GstMIKEYMapType) specifies the method of uniquely mapping
// Crypto Sessions to the security protocol sessions.
type MIKEYMapType C.gint

const (
	// MikeyMapTypeSrtp (GST_MIKEY_MAP_TYPE_SRTP): SRTP.
	MikeyMapTypeSrtp MIKEYMapType = iota
)

// String returns the name in string for MIKEYMapType.
func (m MIKEYMapType) String() string {
	switch m {
	case MikeyMapTypeSrtp:
		return "MikeyMapTypeSrtp"
	default:
		return fmt.Sprintf("MIKEYMapType(%d)", m)
	}
}

// MIKEYPRFFunc (GstMIKEYPRFFunc): PRF function that has been/will be used for
// key derivation.
type MIKEYPRFFunc C.gint

const (
	// MikeyPrfMikey1 (GST_MIKEY_PRF_MIKEY_1): MIKEY-1 PRF function.
	MikeyPrfMikey1 MIKEYPRFFunc = iota
)

// String returns the name in string for MIKEYPRFFunc.
func (m MIKEYPRFFunc) String() string {
	switch m {
	case MikeyPrfMikey1:
		return "MikeyPrfMikey1"
	default:
		return fmt.Sprintf("MIKEYPRFFunc(%d)", m)
	}
}

// MIKEYPayloadType (GstMIKEYPayloadType): different MIKEY Payload types.
type MIKEYPayloadType C.gint

const (
	// MikeyPtLast (GST_MIKEY_PT_LAST): last payload.
	MikeyPtLast MIKEYPayloadType = 0
	// MikeyPtKemac (GST_MIKEY_PT_KEMAC): key data transport payload.
	MikeyPtKemac MIKEYPayloadType = 1
	// MikeyPtPke (GST_MIKEY_PT_PKE): envelope data payload.
	MikeyPtPke MIKEYPayloadType = 2
	// MikeyPtDh (GST_MIKEY_PT_DH): DH data payload.
	MikeyPtDh MIKEYPayloadType = 3
	// MikeyPtSign (GST_MIKEY_PT_SIGN): signature payload.
	MikeyPtSign MIKEYPayloadType = 4
	// MikeyPtT (GST_MIKEY_PT_T): timestamp payload.
	MikeyPtT MIKEYPayloadType = 5
	// MikeyPtID (GST_MIKEY_PT_ID): ID payload.
	MikeyPtID MIKEYPayloadType = 6
	// MikeyPtCert (GST_MIKEY_PT_CERT): certificate Payload.
	MikeyPtCert MIKEYPayloadType = 7
	// MikeyPtChash (GST_MIKEY_PT_CHASH): cert hash payload.
	MikeyPtChash MIKEYPayloadType = 8
	// MikeyPtV (GST_MIKEY_PT_V): verification message payload.
	MikeyPtV MIKEYPayloadType = 9
	// MikeyPtSp (GST_MIKEY_PT_SP): security Policy payload.
	MikeyPtSp MIKEYPayloadType = 10
	// MikeyPtRand (GST_MIKEY_PT_RAND): RAND payload.
	MikeyPtRand MIKEYPayloadType = 11
	// MikeyPtErr (GST_MIKEY_PT_ERR): error payload.
	MikeyPtErr MIKEYPayloadType = 12
	// MikeyPtKeyData (GST_MIKEY_PT_KEY_DATA): key data sub-payload.
	MikeyPtKeyData MIKEYPayloadType = 20
	// MikeyPtGenExt (GST_MIKEY_PT_GEN_EXT): general Extension Payload.
	MikeyPtGenExt MIKEYPayloadType = 21
)

// String returns the name in string for MIKEYPayloadType.
func (m MIKEYPayloadType) String() string {
	switch m {
	case MikeyPtLast:
		return "Last"
	case MikeyPtKemac:
		return "Kemac"
	case MikeyPtPke:
		return "Pke"
	case MikeyPtDh:
		return "Dh"
	case MikeyPtSign:
		return "Sign"
	case MikeyPtT:
		return "T"
	case MikeyPtID:
		return "ID"
	case MikeyPtCert:
		return "Cert"
	case MikeyPtChash:
		return "Chash"
	case MikeyPtV:
		return "V"
	case MikeyPtSp:
		return "Sp"
	case MikeyPtRand:
		return "Rand"
	case MikeyPtErr:
		return "Err"
	case MikeyPtKeyData:
		return "KeyData"
	case MikeyPtGenExt:
		return "GenExt"
	default:
		return fmt.Sprintf("MIKEYPayloadType(%d)", m)
	}
}

// MIKEYSecProto (GstMIKEYSecProto) specifies the security protocol.
type MIKEYSecProto C.gint

const (
	// MikeySecProtoSrtp (GST_MIKEY_SEC_PROTO_SRTP): SRTP.
	MikeySecProtoSrtp MIKEYSecProto = iota
)

// String returns the name in string for MIKEYSecProto.
func (m MIKEYSecProto) String() string {
	switch m {
	case MikeySecProtoSrtp:
		return "MikeySecProtoSrtp"
	default:
		return fmt.Sprintf("MIKEYSecProto(%d)", m)
	}
}

// MIKEYSecSRTP (GstMIKEYSecSRTP): this policy specifies the parameters for SRTP
// and SRTCP.
type MIKEYSecSRTP C.gint

const (
	// MikeySpSrtpEncAlg (GST_MIKEY_SP_SRTP_ENC_ALG): encryption algorithm.
	MikeySpSrtpEncAlg MIKEYSecSRTP = 0
	// MikeySpSrtpEncKeyLen (GST_MIKEY_SP_SRTP_ENC_KEY_LEN): session Encr.
	// key length.
	MikeySpSrtpEncKeyLen MIKEYSecSRTP = 1
	// MikeySpSrtpAuthAlg (GST_MIKEY_SP_SRTP_AUTH_ALG): authentication
	// algorithm.
	MikeySpSrtpAuthAlg MIKEYSecSRTP = 2
	// MikeySpSrtpAuthKeyLen (GST_MIKEY_SP_SRTP_AUTH_KEY_LEN): session Auth.
	// key length.
	MikeySpSrtpAuthKeyLen MIKEYSecSRTP = 3
	// MikeySpSrtpSaltKeyLen (GST_MIKEY_SP_SRTP_SALT_KEY_LEN): session Salt key
	// length.
	MikeySpSrtpSaltKeyLen MIKEYSecSRTP = 4
	// MikeySpSrtpPrf (GST_MIKEY_SP_SRTP_PRF): SRTP Pseudo Random Function.
	MikeySpSrtpPrf MIKEYSecSRTP = 5
	// MikeySpSrtpKeyDerivRate (GST_MIKEY_SP_SRTP_KEY_DERIV_RATE): key
	// derivation rate.
	MikeySpSrtpKeyDerivRate MIKEYSecSRTP = 6
	// MikeySpSrtpSrtpEnc (GST_MIKEY_SP_SRTP_SRTP_ENC): SRTP encryption off/on,
	// 0 if off, 1 if on.
	MikeySpSrtpSrtpEnc MIKEYSecSRTP = 7
	// MikeySpSrtpSrtcpEnc (GST_MIKEY_SP_SRTP_SRTCP_ENC): SRTCP encryption
	// off/on, 0 if off, 1 if on.
	MikeySpSrtpSrtcpEnc MIKEYSecSRTP = 8
	// MikeySpSrtpFecOrder (GST_MIKEY_SP_SRTP_FEC_ORDER) sender's FEC order.
	MikeySpSrtpFecOrder MIKEYSecSRTP = 9
	// MikeySpSrtpSrtpAuth (GST_MIKEY_SP_SRTP_SRTP_AUTH): SRTP authentication
	// off/on, 0 if off, 1 if on.
	MikeySpSrtpSrtpAuth MIKEYSecSRTP = 10
	// MikeySpSrtpAuthTagLen (GST_MIKEY_SP_SRTP_AUTH_TAG_LEN): authentication
	// tag length.
	MikeySpSrtpAuthTagLen MIKEYSecSRTP = 11
	// MikeySpSrtpSrtpPrefixLen (GST_MIKEY_SP_SRTP_SRTP_PREFIX_LEN): SRTP prefix
	// length.
	MikeySpSrtpSrtpPrefixLen MIKEYSecSRTP = 12
	// MikeySpSrtpAeadAuthTagLen (GST_MIKEY_SP_SRTP_AEAD_AUTH_TAG_LEN): AEAD
	// authentication tag length (Since: 1.16).
	MikeySpSrtpAeadAuthTagLen MIKEYSecSRTP = 20
)

// String returns the name in string for MIKEYSecSRTP.
func (m MIKEYSecSRTP) String() string {
	switch m {
	case MikeySpSrtpEncAlg:
		return "EncAlg"
	case MikeySpSrtpEncKeyLen:
		return "EncKeyLen"
	case MikeySpSrtpAuthAlg:
		return "AuthAlg"
	case MikeySpSrtpAuthKeyLen:
		return "AuthKeyLen"
	case MikeySpSrtpSaltKeyLen:
		return "SaltKeyLen"
	case MikeySpSrtpPrf:
		return "Prf"
	case MikeySpSrtpKeyDerivRate:
		return "KeyDerivRate"
	case MikeySpSrtpSrtpEnc:
		return "SrtpEnc"
	case MikeySpSrtpSrtcpEnc:
		return "SrtcpEnc"
	case MikeySpSrtpFecOrder:
		return "FecOrder"
	case MikeySpSrtpSrtpAuth:
		return "SrtpAuth"
	case MikeySpSrtpAuthTagLen:
		return "AuthTagLen"
	case MikeySpSrtpSrtpPrefixLen:
		return "SrtpPrefixLen"
	case MikeySpSrtpAeadAuthTagLen:
		return "AeadAuthTagLen"
	default:
		return fmt.Sprintf("MIKEYSecSRTP(%d)", m)
	}
}

// MIKEYTSType (GstMIKEYTSType) specifies the timestamp type.
type MIKEYTSType C.gint

const (
	// MikeyTsTypeNtpUTC (GST_MIKEY_TS_TYPE_NTP_UTC): NTP time in UTC timezone.
	MikeyTsTypeNtpUTC MIKEYTSType = iota
	// MikeyTsTypeNtp (GST_MIKEY_TS_TYPE_NTP): NTP time.
	MikeyTsTypeNtp
	// MikeyTsTypeCounter (GST_MIKEY_TS_TYPE_COUNTER): counter.
	MikeyTsTypeCounter
)

// String returns the name in string for MIKEYTSType.
func (m MIKEYTSType) String() string {
	switch m {
	case MikeyTsTypeNtpUTC:
		return "NtpUTC"
	case MikeyTsTypeNtp:
		return "Ntp"
	case MikeyTsTypeCounter:
		return "Counter"
	default:
		return fmt.Sprintf("MIKEYTSType(%d)", m)
	}
}

// MIKEYType (GstMIKEYType): different MIKEY data types.
type MIKEYType C.gint

const (
	// MikeyTypeInvalid (GST_MIKEY_TYPE_INVALID): invalid type.
	MikeyTypeInvalid MIKEYType = -1
	// MikeyTypePskInit (GST_MIKEY_TYPE_PSK_INIT) initiator's pre-shared key
	// message.
	MikeyTypePskInit MIKEYType = 0
	// MikeyTypePskVerify (GST_MIKEY_TYPE_PSK_VERIFY): verification message of a
	// Pre-shared key message.
	MikeyTypePskVerify MIKEYType = 1
	// MikeyTypePkInit (GST_MIKEY_TYPE_PK_INIT) initiator's public-key transport
	// message.
	MikeyTypePkInit MIKEYType = 2
	// MikeyTypePkVerify (GST_MIKEY_TYPE_PK_VERIFY): verification message of a
	// public-key message.
	MikeyTypePkVerify MIKEYType = 3
	// MikeyTypeDhInit (GST_MIKEY_TYPE_DH_INIT) initiator's DH exchange message.
	MikeyTypeDhInit MIKEYType = 4
	// MikeyTypeDhResp (GST_MIKEY_TYPE_DH_RESP) responder's DH exchange message.
	MikeyTypeDhResp MIKEYType = 5
	// MikeyTypeError (GST_MIKEY_TYPE_ERROR): error message.
	MikeyTypeError MIKEYType = 6
)

// String returns the name in string for MIKEYType.
func (m MIKEYType) String() string {
	switch m {
	case MikeyTypeInvalid:
		return "Invalid"
	case MikeyTypePskInit:
		return "PskInit"
	case MikeyTypePskVerify:
		return "PskVerify"
	case MikeyTypePkInit:
		return "PkInit"
	case MikeyTypePkVerify:
		return "PkVerify"
	case MikeyTypeDhInit:
		return "DhInit"
	case MikeyTypeDhResp:
		return "DhResp"
	case MikeyTypeError:
		return "Error"
	default:
		return fmt.Sprintf("MIKEYType(%d)", m)
	}
}

// SDPResult (GstSDPResult): return values for the SDP functions.
type SDPResult C.gint

const (
	// SdpOK (GST_SDP_OK): successful return value.
	SdpOK SDPResult = 0
	// SdpEinval (GST_SDP_EINVAL): function was given invalid parameters.
	SdpEinval SDPResult = -1
)

// String returns the name in string for SDPResult.
func (s SDPResult) String() string {
	switch s {
	case SdpOK:
		return "OK"
	case SdpEinval:
		return "Einval"
	default:
		return fmt.Sprintf("SDPResult(%d)", s)
	}
}

// SdpAddressIsMulticast (gst_sdp_address_is_multicast): check if the given addr
// is a multicast address.
//
// The function takes the following parameters:
//
//   - nettype: network type.
//   - addrtype address type.
//   - addr: address.
//
// The function returns the following values:
//
//   - ok: TRUE when addr is multicast.
func SdpAddressIsMulticast(nettype, addrtype, addr string) bool {
	var _arg1 *C.gchar   // out
	var _arg2 *C.gchar   // out
	var _arg3 *C.gchar   // out
	var _cret C.gboolean // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(nettype)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(addrtype)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(addr)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gst_sdp_address_is_multicast(_arg1, _arg2, _arg3)
	runtime.KeepAlive(nettype)
	runtime.KeepAlive(addrtype)
	runtime.KeepAlive(addr)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SdpMakeKeymgmt (gst_sdp_make_keymgmt) makes key management data.
//
// The function takes the following parameters:
//
//   - uri: #gchar URI.
//   - base64 base64-encoded key data.
//
// The function returns the following values:
//
//   - utf8 key-mgmt data,.
func SdpMakeKeymgmt(uri, base64 string) string {
	var _arg1 *C.gchar // out
	var _arg2 *C.gchar // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(base64)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_make_keymgmt(_arg1, _arg2)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(base64)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// MIKEYMapSRTP (GstMIKEYMapSRTP): security policy Map item for SRTP
//
// An instance of this type is always passed by reference.
type MIKEYMapSRTP struct {
	*mikeyMapSRTP
}

// mikeyMapSRTP is the struct that's finalized.
type mikeyMapSRTP struct {
	native *C.GstMIKEYMapSRTP
}

// NewMIKEYMapSRTP creates a new MIKEYMapSRTP instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewMIKEYMapSRTP(policy byte, ssrc, roc uint32) MIKEYMapSRTP {
	var f0 C.guint8 // out
	f0 = C.guint8(policy)
	var f1 C.guint32 // out
	f1 = C.guint32(ssrc)
	var f2 C.guint32 // out
	f2 = C.guint32(roc)

	v := C.GstMIKEYMapSRTP{
		policy: f0,
		ssrc:   f1,
		roc:    f2,
	}

	return *(*MIKEYMapSRTP)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

// Policy: security policy applied for the stream with ssrc.
func (m *MIKEYMapSRTP) Policy() byte {
	valptr := &m.native.policy
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Ssrc: SSRC that must be used for the stream.
func (m *MIKEYMapSRTP) Ssrc() uint32 {
	valptr := &m.native.ssrc
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Roc: current rollover counter.
func (m *MIKEYMapSRTP) Roc() uint32 {
	valptr := &m.native.roc
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// Policy: security policy applied for the stream with ssrc.
func (m *MIKEYMapSRTP) SetPolicy(policy byte) {
	valptr := &m.native.policy
	*valptr = C.guint8(policy)
}

// Ssrc: SSRC that must be used for the stream.
func (m *MIKEYMapSRTP) SetSsrc(ssrc uint32) {
	valptr := &m.native.ssrc
	*valptr = C.guint32(ssrc)
}

// Roc: current rollover counter.
func (m *MIKEYMapSRTP) SetRoc(roc uint32) {
	valptr := &m.native.roc
	*valptr = C.guint32(roc)
}

// MIKEYMessage (GstMIKEYMessage): structure holding the information of the
// MIKEY message
//
// An instance of this type is always passed by reference.
type MIKEYMessage struct {
	*mikeyMessage
}

// mikeyMessage is the struct that's finalized.
type mikeyMessage struct {
	native *C.GstMIKEYMessage
}

func marshalMIKEYMessage(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &MIKEYMessage{&mikeyMessage{(*C.GstMIKEYMessage)(b)}}, nil
}

// NewMIKEYMessage constructs a struct MIKEYMessage.
func NewMIKEYMessage() *MIKEYMessage {
	var _cret *C.GstMIKEYMessage // in

	_cret = C.gst_mikey_message_new()

	var _mikeyMessage *MIKEYMessage // out

	_mikeyMessage = (*MIKEYMessage)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_mikeyMessage)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _mikeyMessage
}

// NewMIKEYMessageFromCaps constructs a struct MIKEYMessage.
func NewMIKEYMessageFromCaps(caps *gst.Caps) *MIKEYMessage {
	var _arg1 *C.GstCaps         // out
	var _cret *C.GstMIKEYMessage // in

	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_mikey_message_new_from_caps(_arg1)
	runtime.KeepAlive(caps)

	var _mikeyMessage *MIKEYMessage // out

	if _cret != nil {
		_mikeyMessage = (*MIKEYMessage)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_mikeyMessage)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.free(intern.C)
			},
		)
	}

	return _mikeyMessage
}

// Version: version.
func (m *MIKEYMessage) Version() byte {
	valptr := &m.native.version
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Type message type.
func (m *MIKEYMessage) Type() MIKEYType {
	valptr := &m.native._type
	var _v MIKEYType // out
	_v = MIKEYType(*valptr)
	return _v
}

// V: verify flag.
func (m *MIKEYMessage) V() bool {
	valptr := &m.native.V
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// PrfFunc: MIKEYPRFFunc.
func (m *MIKEYMessage) PrfFunc() MIKEYPRFFunc {
	valptr := &m.native.prf_func
	var _v MIKEYPRFFunc // out
	_v = MIKEYPRFFunc(*valptr)
	return _v
}

// CSBID identifies the Crypto Session Bundle.
func (m *MIKEYMessage) CSBID() uint32 {
	valptr := &m.native.CSB_id
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// MapType: MIKEYMapType.
func (m *MIKEYMessage) MapType() MIKEYMapType {
	valptr := &m.native.map_type
	var _v MIKEYMapType // out
	_v = MIKEYMapType(*valptr)
	return _v
}

// Version: version.
func (m *MIKEYMessage) SetVersion(version byte) {
	valptr := &m.native.version
	*valptr = C.guint8(version)
}

// V: verify flag.
func (m *MIKEYMessage) SetV(V bool) {
	valptr := &m.native.V
	if V {
		*valptr = C.TRUE
	}
}

// CSBID identifies the Crypto Session Bundle.
func (m *MIKEYMessage) SetCSBID(CSBId uint32) {
	valptr := &m.native.CSB_id
	*valptr = C.guint32(CSBId)
}

// AddCsSrtp (gst_mikey_message_add_cs_srtp): add a Crypto policy for SRTP to
// msg.
//
// The function takes the following parameters:
//
//   - policy: security policy applied for the stream with ssrc.
//   - ssrc: SSRC that must be used for the stream.
//   - roc: current rollover counter.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) AddCsSrtp(policy byte, ssrc uint32, roc uint32) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.guint8           // out
	var _arg2 C.guint32          // out
	var _arg3 C.guint32          // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint8(policy)
	_arg2 = C.guint32(ssrc)
	_arg3 = C.guint32(roc)

	_cret = C.gst_mikey_message_add_cs_srtp(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(policy)
	runtime.KeepAlive(ssrc)
	runtime.KeepAlive(roc)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AddPayload (gst_mikey_message_add_payload): add a new payload to msg.
//
// The function takes the following parameters:
//
//   - payload: MIKEYPayload.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) AddPayload(payload *MIKEYPayload) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 *C.GstMIKEYPayload // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(payload)), nil)

	_cret = C.gst_mikey_message_add_payload(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(payload)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AddPke (gst_mikey_message_add_pke): add a new PKE payload to msg with the
// given parameters.
//
// The function takes the following parameters:
//
//   - C: envelope key cache indicator.
//   - data: encrypted envelope key.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) AddPke(C MIKEYCacheType, data []byte) bool {
	var _arg0 *C.GstMIKEYMessage  // out
	var _arg1 C.GstMIKEYCacheType // out
	var _arg3 *C.guint8           // out
	var _arg2 C.guint16
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstMIKEYCacheType(C)
	_arg2 = (C.guint16)(len(data))
	if len(data) > 0 {
		_arg3 = (*C.guint8)(unsafe.Pointer(&data[0]))
	}

	_cret = C.gst_mikey_message_add_pke(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(C)
	runtime.KeepAlive(data)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AddRand (gst_mikey_message_add_rand): add a new RAND payload to msg with the
// given parameters.
//
// The function takes the following parameters:
//
//   - rand: random data.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) AddRand(rand []byte) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg2 *C.guint8          // out
	var _arg1 C.guint8
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (C.guint8)(len(rand))
	if len(rand) > 0 {
		_arg2 = (*C.guint8)(unsafe.Pointer(&rand[0]))
	}

	_cret = C.gst_mikey_message_add_rand(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(rand)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AddRandLen (gst_mikey_message_add_rand_len): add a new RAND payload to msg
// with len random bytes.
//
// The function takes the following parameters:
//
//   - len: length.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) AddRandLen(len byte) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.guint8           // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint8(len)

	_cret = C.gst_mikey_message_add_rand_len(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(len)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AddTNowNtpUTC (gst_mikey_message_add_t_now_ntp_utc): add a new T payload to
// msg that contains the current time in NTP-UTC format.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) AddTNowNtpUTC() bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_mikey_message_add_t_now_ntp_utc(_arg0)
	runtime.KeepAlive(msg)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - utf8 base64-encoded data.
func (msg *MIKEYMessage) Base64Encode() string {
	var _arg0 *C.GstMIKEYMessage // out
	var _cret *C.gchar           // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_mikey_message_base64_encode(_arg0)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// FindPayload (gst_mikey_message_find_payload): find the nth occurrence of the
// payload with type in msg.
//
// The function takes the following parameters:
//
//   - typ: MIKEYPayloadType.
//   - nth: payload to find.
//
// The function returns the following values:
//
//   - mikeyPayload (optional): nth MIKEYPayload of type.
func (msg *MIKEYMessage) FindPayload(typ MIKEYPayloadType, nth uint) *MIKEYPayload {
	var _arg0 *C.GstMIKEYMessage    // out
	var _arg1 C.GstMIKEYPayloadType // out
	var _arg2 C.guint               // out
	var _cret *C.GstMIKEYPayload    // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstMIKEYPayloadType(typ)
	_arg2 = C.guint(nth)

	_cret = C.gst_mikey_message_find_payload(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(nth)

	var _mikeyPayload *MIKEYPayload // out

	if _cret != nil {
		_mikeyPayload = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _mikeyPayload
}

// CsSrtp (gst_mikey_message_get_cs_srtp): get the policy information of msg at
// idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - mikeyMapSRTP (optional): MIKEYMapSRTP.
func (msg *MIKEYMessage) CsSrtp(idx uint) *MIKEYMapSRTP {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.guint            // out
	var _cret *C.GstMIKEYMapSRTP // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mikey_message_get_cs_srtp(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _mikeyMapSRTP *MIKEYMapSRTP // out

	if _cret != nil {
		_mikeyMapSRTP = (*MIKEYMapSRTP)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _mikeyMapSRTP
}

// NCs (gst_mikey_message_get_n_cs): get the number of crypto sessions in msg.
//
// The function returns the following values:
//
//   - guint: number of crypto sessions.
func (msg *MIKEYMessage) NCs() uint {
	var _arg0 *C.GstMIKEYMessage // out
	var _cret C.guint            // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_mikey_message_get_n_cs(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// NPayloads (gst_mikey_message_get_n_payloads): get the number of payloads in
// msg.
//
// The function returns the following values:
//
//   - guint: number of payloads in msg.
func (msg *MIKEYMessage) NPayloads() uint {
	var _arg0 *C.GstMIKEYMessage // out
	var _cret C.guint            // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_mikey_message_get_n_payloads(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Payload (gst_mikey_message_get_payload): get the MIKEYPayload at idx in msg.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - mikeyPayload (optional) at idx. The payload remains valid for as long as
//     it is part of msg.
func (msg *MIKEYMessage) Payload(idx uint) *MIKEYPayload {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.guint            // out
	var _cret *C.GstMIKEYPayload // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mikey_message_get_payload(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _mikeyPayload *MIKEYPayload // out

	if _cret != nil {
		_mikeyPayload = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _mikeyPayload
}

// InsertCsSrtp (gst_mikey_message_insert_cs_srtp): insert a Crypto Session map
// for SRTP in msg at idx
//
// When idx is -1, the policy will be appended.
//
// The function takes the following parameters:
//
//   - idx: index to insert at.
//   - map info.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) InsertCsSrtp(idx int, _map *MIKEYMapSRTP) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.gint             // out
	var _arg2 *C.GstMIKEYMapSRTP // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstMIKEYMapSRTP)(gextras.StructNative(unsafe.Pointer(_map)))

	_cret = C.gst_mikey_message_insert_cs_srtp(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(_map)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// InsertPayload (gst_mikey_message_insert_payload): insert the payload at index
// idx in msg. If idx is -1, the payload will be appended to msg.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - payload: MIKEYPayload.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) InsertPayload(idx uint, payload *MIKEYPayload) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.guint            // out
	var _arg2 *C.GstMIKEYPayload // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(payload)), nil)

	_cret = C.gst_mikey_message_insert_payload(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(payload)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveCsSrtp (gst_mikey_message_remove_cs_srtp): remove the SRTP policy at
// idx.
//
// The function takes the following parameters:
//
//   - idx: index to remove.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) RemoveCsSrtp(idx int) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.gint             // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)

	_cret = C.gst_mikey_message_remove_cs_srtp(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemovePayload (gst_mikey_message_remove_payload): remove the payload in msg
// at idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) RemovePayload(idx uint) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.guint            // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mikey_message_remove_payload(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ReplaceCsSrtp (gst_mikey_message_replace_cs_srtp): replace a Crypto Session
// map for SRTP in msg at idx with map.
//
// The function takes the following parameters:
//
//   - idx: index to insert at.
//   - map info.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) ReplaceCsSrtp(idx int, _map *MIKEYMapSRTP) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.gint             // out
	var _arg2 *C.GstMIKEYMapSRTP // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstMIKEYMapSRTP)(gextras.StructNative(unsafe.Pointer(_map)))

	_cret = C.gst_mikey_message_replace_cs_srtp(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(_map)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ReplacePayload (gst_mikey_message_replace_payload): replace the payload at
// idx in msg with payload.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - payload: MIKEYPayload.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) ReplacePayload(idx uint, payload *MIKEYPayload) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.guint            // out
	var _arg2 *C.GstMIKEYPayload // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(payload)), nil)

	_cret = C.gst_mikey_message_replace_payload(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(payload)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetInfo (gst_mikey_message_set_info): set the information in msg.
//
// The function takes the following parameters:
//
//   - version: version.
//   - typ: MIKEYType.
//   - V: verify flag.
//   - prfFunc function to use.
//   - CSBId: crypto Session Bundle id.
//   - mapType: MIKEYMapType.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) SetInfo(version byte, typ MIKEYType, V bool, prfFunc MIKEYPRFFunc, CSBId uint32, mapType MIKEYMapType) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 C.guint8           // out
	var _arg2 C.GstMIKEYType     // out
	var _arg3 C.gboolean         // out
	var _arg4 C.GstMIKEYPRFFunc  // out
	var _arg5 C.guint32          // out
	var _arg6 C.GstMIKEYMapType  // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint8(version)
	_arg2 = C.GstMIKEYType(typ)
	if V {
		_arg3 = C.TRUE
	}
	_arg4 = C.GstMIKEYPRFFunc(prfFunc)
	_arg5 = C.guint32(CSBId)
	_arg6 = C.GstMIKEYMapType(mapType)

	_cret = C.gst_mikey_message_set_info(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(version)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(V)
	runtime.KeepAlive(prfFunc)
	runtime.KeepAlive(CSBId)
	runtime.KeepAlive(mapType)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - caps to be filled with SRTP parameters (srtp/srtcp cipher, authorization,
//     key data).
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (msg *MIKEYMessage) ToCaps(caps *gst.Caps) bool {
	var _arg0 *C.GstMIKEYMessage // out
	var _arg1 *C.GstCaps         // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_mikey_message_to_caps(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(caps)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MIKEYPayload (GstMIKEYPayload): hold the common fields for all payloads
//
// An instance of this type is always passed by reference.
type MIKEYPayload struct {
	*mikeyPayload
}

// mikeyPayload is the struct that's finalized.
type mikeyPayload struct {
	native *C.GstMIKEYPayload
}

func marshalMIKEYPayload(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &MIKEYPayload{&mikeyPayload{(*C.GstMIKEYPayload)(b)}}, nil
}

// NewMIKEYPayload constructs a struct MIKEYPayload.
func NewMIKEYPayload(typ MIKEYPayloadType) *MIKEYPayload {
	var _arg1 C.GstMIKEYPayloadType // out
	var _cret *C.GstMIKEYPayload    // in

	_arg1 = C.GstMIKEYPayloadType(typ)

	_cret = C.gst_mikey_payload_new(_arg1)
	runtime.KeepAlive(typ)

	var _mikeyPayload *MIKEYPayload // out

	if _cret != nil {
		_mikeyPayload = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_mikeyPayload)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.free(intern.C)
			},
		)
	}

	return _mikeyPayload
}

// Type: payload type.
func (m *MIKEYPayload) Type() MIKEYPayloadType {
	valptr := &m.native._type
	var _v MIKEYPayloadType // out
	_v = MIKEYPayloadType(*valptr)
	return _v
}

// Len: length of the payload.
func (m *MIKEYPayload) Len() uint {
	valptr := &m.native.len
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Len: length of the payload.
func (m *MIKEYPayload) SetLen(len uint) {
	valptr := &m.native.len
	*valptr = C.guint(len)
}

// KemacAddSub (gst_mikey_payload_kemac_add_sub): add a new sub payload to
// payload.
//
// The function takes the following parameters:
//
//   - newpay to add.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) KemacAddSub(newpay *MIKEYPayload) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg1 *C.GstMIKEYPayload // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(newpay)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(newpay)), nil)

	_cret = C.gst_mikey_payload_kemac_add_sub(_arg0, _arg1)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(newpay)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// KemacGetNSub (gst_mikey_payload_kemac_get_n_sub): get the number of sub
// payloads of payload. payload should be of type GST_MIKEY_PT_KEMAC.
//
// The function returns the following values:
//
//   - guint: number of sub payloads in payload.
func (payload *MIKEYPayload) KemacGetNSub() uint {
	var _arg0 *C.GstMIKEYPayload // out
	var _cret C.guint            // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))

	_cret = C.gst_mikey_payload_kemac_get_n_sub(_arg0)
	runtime.KeepAlive(payload)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// KemacGetSub (gst_mikey_payload_kemac_get_sub): get the sub payload of payload
// at idx. payload should be of type GST_MIKEY_PT_KEMAC.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - mikeyPayload (optional) at idx.
func (payload *MIKEYPayload) KemacGetSub(idx uint) *MIKEYPayload {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg1 C.guint            // out
	var _cret *C.GstMIKEYPayload // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mikey_payload_kemac_get_sub(_arg0, _arg1)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(idx)

	var _mikeyPayload *MIKEYPayload // out

	if _cret != nil {
		_mikeyPayload = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _mikeyPayload
}

// KemacRemoveSub (gst_mikey_payload_kemac_remove_sub): remove the sub payload
// at idx in payload.
//
// The function takes the following parameters:
//
//   - idx: index to remove.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) KemacRemoveSub(idx uint) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg1 C.guint            // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mikey_payload_kemac_remove_sub(_arg0, _arg1)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(idx)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// KemacSet (gst_mikey_payload_kemac_set): set the KEMAC parameters. payload
// should point to a GST_MIKEY_PT_KEMAC payload.
//
// The function takes the following parameters:
//
//   - encAlg: MIKEYEncAlg.
//   - macAlg: MIKEYMacAlg.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) KemacSet(encAlg MIKEYEncAlg, macAlg MIKEYMacAlg) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg1 C.GstMIKEYEncAlg   // out
	var _arg2 C.GstMIKEYMacAlg   // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.GstMIKEYEncAlg(encAlg)
	_arg2 = C.GstMIKEYMacAlg(macAlg)

	_cret = C.gst_mikey_payload_kemac_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(encAlg)
	runtime.KeepAlive(macAlg)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// KeyDataSetInterval (gst_mikey_payload_key_data_set_interval): set the key
// validity period in the GST_MIKEY_PT_KEY_DATA payload.
//
// The function takes the following parameters:
//
//   - vfData: valid From data.
//   - vtData: valid To data.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) KeyDataSetInterval(vfData []byte, vtData []byte) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg2 *C.guint8          // out
	var _arg1 C.guint8
	var _arg4 *C.guint8 // out
	var _arg3 C.guint8
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = (C.guint8)(len(vfData))
	if len(vfData) > 0 {
		_arg2 = (*C.guint8)(unsafe.Pointer(&vfData[0]))
	}
	_arg3 = (C.guint8)(len(vtData))
	if len(vtData) > 0 {
		_arg4 = (*C.guint8)(unsafe.Pointer(&vtData[0]))
	}

	_cret = C.gst_mikey_payload_key_data_set_interval(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(vfData)
	runtime.KeepAlive(vtData)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// KeyDataSetKey (gst_mikey_payload_key_data_set_key): set key_len bytes of
// key_data of type key_type as the key for the GST_MIKEY_PT_KEY_DATA payload.
//
// The function takes the following parameters:
//
//   - keyType: MIKEYKeyDataType.
//   - keyData: key of type key_type.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) KeyDataSetKey(keyType MIKEYKeyDataType, keyData []byte) bool {
	var _arg0 *C.GstMIKEYPayload    // out
	var _arg1 C.GstMIKEYKeyDataType // out
	var _arg3 *C.guint8             // out
	var _arg2 C.guint16
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.GstMIKEYKeyDataType(keyType)
	_arg2 = (C.guint16)(len(keyData))
	if len(keyData) > 0 {
		_arg3 = (*C.guint8)(unsafe.Pointer(&keyData[0]))
	}

	_cret = C.gst_mikey_payload_key_data_set_key(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(keyType)
	runtime.KeepAlive(keyData)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// KeyDataSetSalt (gst_mikey_payload_key_data_set_salt): set the salt key data.
// If salt_len is 0 and salt_data is NULL, the salt data will be removed.
//
// The function takes the following parameters:
//
//   - saltData (optional): salt.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) KeyDataSetSalt(saltData []byte) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg2 *C.guint8          // out
	var _arg1 C.guint16
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = (C.guint16)(len(saltData))
	if len(saltData) > 0 {
		_arg2 = (*C.guint8)(unsafe.Pointer(&saltData[0]))
	}

	_cret = C.gst_mikey_payload_key_data_set_salt(_arg0, _arg1, _arg2)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(saltData)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// KeyDataSetSpi (gst_mikey_payload_key_data_set_spi): set the SPI/MKI validity
// in the GST_MIKEY_PT_KEY_DATA payload.
//
// The function takes the following parameters:
//
//   - spiData: SPI/MKI data.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) KeyDataSetSpi(spiData []byte) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg2 *C.guint8          // out
	var _arg1 C.guint8
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = (C.guint8)(len(spiData))
	if len(spiData) > 0 {
		_arg2 = (*C.guint8)(unsafe.Pointer(&spiData[0]))
	}

	_cret = C.gst_mikey_payload_key_data_set_spi(_arg0, _arg1, _arg2)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(spiData)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PkeSet (gst_mikey_payload_pke_set): set the PKE values in payload. payload
// must be of type GST_MIKEY_PT_PKE.
//
// The function takes the following parameters:
//
//   - C: envelope key cache indicator.
//   - data: encrypted envelope key.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) PkeSet(C MIKEYCacheType, data []byte) bool {
	var _arg0 *C.GstMIKEYPayload  // out
	var _arg1 C.GstMIKEYCacheType // out
	var _arg3 *C.guint8           // out
	var _arg2 C.guint16
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.GstMIKEYCacheType(C)
	_arg2 = (C.guint16)(len(data))
	if len(data) > 0 {
		_arg3 = (*C.guint8)(unsafe.Pointer(&data[0]))
	}

	_cret = C.gst_mikey_payload_pke_set(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(C)
	runtime.KeepAlive(data)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RandSet (gst_mikey_payload_rand_set): set the random values in a
// GST_MIKEY_PT_RAND payload.
//
// The function takes the following parameters:
//
//   - rand: random values.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) RandSet(rand []byte) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg2 *C.guint8          // out
	var _arg1 C.guint8
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = (C.guint8)(len(rand))
	if len(rand) > 0 {
		_arg2 = (*C.guint8)(unsafe.Pointer(&rand[0]))
	}

	_cret = C.gst_mikey_payload_rand_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(rand)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SpAddParam (gst_mikey_payload_sp_add_param): add a new parameter to the
// GST_MIKEY_PT_SP payload with type, len and val.
//
// The function takes the following parameters:
//
//   - typ: type.
//   - val: len bytes of data.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) SpAddParam(typ byte, val []byte) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg1 C.guint8           // out
	var _arg3 *C.guint8          // out
	var _arg2 C.guint8
	var _cret C.gboolean // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.guint8(typ)
	_arg2 = (C.guint8)(len(val))
	if len(val) > 0 {
		_arg3 = (*C.guint8)(unsafe.Pointer(&val[0]))
	}

	_cret = C.gst_mikey_payload_sp_add_param(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(val)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SpGetNParams (gst_mikey_payload_sp_get_n_params): get the number of security
// policy parameters in a GST_MIKEY_PT_SP payload.
//
// The function returns the following values:
//
//   - guint: number of parameters in payload.
func (payload *MIKEYPayload) SpGetNParams() uint {
	var _arg0 *C.GstMIKEYPayload // out
	var _cret C.guint            // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))

	_cret = C.gst_mikey_payload_sp_get_n_params(_arg0)
	runtime.KeepAlive(payload)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// SpGetParam (gst_mikey_payload_sp_get_param): get the Security Policy
// parameter in a GST_MIKEY_PT_SP payload at idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - mikeyPayloadSPParam (optional) at idx in payload.
func (payload *MIKEYPayload) SpGetParam(idx uint) *MIKEYPayloadSPParam {
	var _arg0 *C.GstMIKEYPayload        // out
	var _arg1 C.guint                   // out
	var _cret *C.GstMIKEYPayloadSPParam // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mikey_payload_sp_get_param(_arg0, _arg1)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(idx)

	var _mikeyPayloadSPParam *MIKEYPayloadSPParam // out

	if _cret != nil {
		_mikeyPayloadSPParam = (*MIKEYPayloadSPParam)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _mikeyPayloadSPParam
}

// SpRemoveParam (gst_mikey_payload_sp_remove_param): remove the Security Policy
// parameters from a GST_MIKEY_PT_SP payload at idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) SpRemoveParam(idx uint) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg1 C.guint            // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.guint(idx)

	_cret = C.gst_mikey_payload_sp_remove_param(_arg0, _arg1)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(idx)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SpSet (gst_mikey_payload_sp_set): set the Security Policy parameters for
// payload.
//
// The function takes the following parameters:
//
//   - policy number.
//   - proto: MIKEYSecProto.
//
// The function returns the following values:
//
//   - ok: TRUE on success.
func (payload *MIKEYPayload) SpSet(policy uint, proto MIKEYSecProto) bool {
	var _arg0 *C.GstMIKEYPayload // out
	var _arg1 C.guint            // out
	var _arg2 C.GstMIKEYSecProto // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstMIKEYPayload)(gextras.StructNative(unsafe.Pointer(payload)))
	_arg1 = C.guint(policy)
	_arg2 = C.GstMIKEYSecProto(proto)

	_cret = C.gst_mikey_payload_sp_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(payload)
	runtime.KeepAlive(policy)
	runtime.KeepAlive(proto)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MIKEYPayloadKEMAC (GstMIKEYPayloadKEMAC): structure holding the KEMAC payload
//
// An instance of this type is always passed by reference.
type MIKEYPayloadKEMAC struct {
	*mikeyPayloadKEMAC
}

// mikeyPayloadKEMAC is the struct that's finalized.
type mikeyPayloadKEMAC struct {
	native *C.GstMIKEYPayloadKEMAC
}

// Pt: common MIKEYPayload.
func (m *MIKEYPayloadKEMAC) Pt() *MIKEYPayload {
	valptr := &m.native.pt
	var _v *MIKEYPayload // out
	_v = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// EncAlg: MIKEYEncAlg.
func (m *MIKEYPayloadKEMAC) EncAlg() MIKEYEncAlg {
	valptr := &m.native.enc_alg
	var _v MIKEYEncAlg // out
	_v = MIKEYEncAlg(*valptr)
	return _v
}

// MacAlg: MIKEYMacAlg.
func (m *MIKEYPayloadKEMAC) MacAlg() MIKEYMacAlg {
	valptr := &m.native.mac_alg
	var _v MIKEYMacAlg // out
	_v = MIKEYMacAlg(*valptr)
	return _v
}

// MIKEYPayloadKeyData (GstMIKEYPayloadKeyData): key data payload contains key
// material. It should be added as sub payload to the KEMAC.
//
// An instance of this type is always passed by reference.
type MIKEYPayloadKeyData struct {
	*mikeyPayloadKeyData
}

// mikeyPayloadKeyData is the struct that's finalized.
type mikeyPayloadKeyData struct {
	native *C.GstMIKEYPayloadKeyData
}

// Pt: payload header.
func (m *MIKEYPayloadKeyData) Pt() *MIKEYPayload {
	valptr := &m.native.pt
	var _v *MIKEYPayload // out
	_v = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// KeyType of key_data.
func (m *MIKEYPayloadKeyData) KeyType() MIKEYKeyDataType {
	valptr := &m.native.key_type
	var _v MIKEYKeyDataType // out
	_v = MIKEYKeyDataType(*valptr)
	return _v
}

// KeyLen: length of key_data.
func (m *MIKEYPayloadKeyData) KeyLen() uint16 {
	valptr := &m.native.key_len
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// KeyData: key data.
func (m *MIKEYPayloadKeyData) KeyData() *byte {
	valptr := &m.native.key_data
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// SaltLen: length of salt_data, can be 0.
func (m *MIKEYPayloadKeyData) SaltLen() uint16 {
	valptr := &m.native.salt_len
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// SaltData: salt data.
func (m *MIKEYPayloadKeyData) SaltData() *byte {
	valptr := &m.native.salt_data
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// KvType: key Validity type.
func (m *MIKEYPayloadKeyData) KvType() MIKEYKVType {
	valptr := &m.native.kv_type
	var _v MIKEYKVType // out
	_v = MIKEYKVType(*valptr)
	return _v
}

// KvLen: length of kv_data.
func (m *MIKEYPayloadKeyData) KvLen() [2]byte {
	valptr := &m.native.kv_len
	var _v [2]byte // out
	_v = *(*[2]byte)(unsafe.Pointer(&*valptr))
	return _v
}

// KvData: key validity data.
func (m *MIKEYPayloadKeyData) KvData() [2]*byte {
	valptr := &m.native.kv_data
	var _v [2]*byte // out
	_v = *(*[2]*byte)(unsafe.Pointer(&*valptr))
	return _v
}

// KeyLen: length of key_data.
func (m *MIKEYPayloadKeyData) SetKeyLen(keyLen uint16) {
	valptr := &m.native.key_len
	*valptr = C.guint16(keyLen)
}

// SaltLen: length of salt_data, can be 0.
func (m *MIKEYPayloadKeyData) SetSaltLen(saltLen uint16) {
	valptr := &m.native.salt_len
	*valptr = C.guint16(saltLen)
}

// MIKEYPayloadPKE (GstMIKEYPayloadPKE): envelope data payload contains the
// encrypted envelope key that is used in the public-key transport to protect
// the data in the Key data transport payload. The encryption algorithm used is
// implicit from the certificate/public key used.
//
// An instance of this type is always passed by reference.
type MIKEYPayloadPKE struct {
	*mikeyPayloadPKE
}

// mikeyPayloadPKE is the struct that's finalized.
type mikeyPayloadPKE struct {
	native *C.GstMIKEYPayloadPKE
}

// Pt: common MIKEYPayload.
func (m *MIKEYPayloadPKE) Pt() *MIKEYPayload {
	valptr := &m.native.pt
	var _v *MIKEYPayload // out
	_v = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// C: envelope key cache indicator.
func (m *MIKEYPayloadPKE) C() MIKEYCacheType {
	valptr := &m.native.C
	var _v MIKEYCacheType // out
	_v = MIKEYCacheType(*valptr)
	return _v
}

// DataLen: length of data.
func (m *MIKEYPayloadPKE) DataLen() uint16 {
	valptr := &m.native.data_len
	var _v uint16 // out
	_v = uint16(*valptr)
	return _v
}

// Data: encrypted envelope key.
func (m *MIKEYPayloadPKE) Data() *byte {
	valptr := &m.native.data
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// DataLen: length of data.
func (m *MIKEYPayloadPKE) SetDataLen(dataLen uint16) {
	valptr := &m.native.data_len
	*valptr = C.guint16(dataLen)
}

// MIKEYPayloadRAND (GstMIKEYPayloadRAND): RAND payload consists of a
// (pseudo-)random bit-string
//
// An instance of this type is always passed by reference.
type MIKEYPayloadRAND struct {
	*mikeyPayloadRAND
}

// mikeyPayloadRAND is the struct that's finalized.
type mikeyPayloadRAND struct {
	native *C.GstMIKEYPayloadRAND
}

// Pt: payload header.
func (m *MIKEYPayloadRAND) Pt() *MIKEYPayload {
	valptr := &m.native.pt
	var _v *MIKEYPayload // out
	_v = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Len: length of rand.
func (m *MIKEYPayloadRAND) Len() byte {
	valptr := &m.native.len
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Rand: random values.
func (m *MIKEYPayloadRAND) Rand() *byte {
	valptr := &m.native.rand
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// Len: length of rand.
func (m *MIKEYPayloadRAND) SetLen(len byte) {
	valptr := &m.native.len
	*valptr = C.guint8(len)
}

// MIKEYPayloadSP (GstMIKEYPayloadSP): security Policy payload defines a set of
// policies that apply to a specific security protocol
//
// An instance of this type is always passed by reference.
type MIKEYPayloadSP struct {
	*mikeyPayloadSP
}

// mikeyPayloadSP is the struct that's finalized.
type mikeyPayloadSP struct {
	native *C.GstMIKEYPayloadSP
}

// Pt: payload header.
func (m *MIKEYPayloadSP) Pt() *MIKEYPayload {
	valptr := &m.native.pt
	var _v *MIKEYPayload // out
	_v = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Policy: policy number.
func (m *MIKEYPayloadSP) Policy() uint {
	valptr := &m.native.policy
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Proto: security protocol.
func (m *MIKEYPayloadSP) Proto() MIKEYSecProto {
	valptr := &m.native.proto
	var _v MIKEYSecProto // out
	_v = MIKEYSecProto(*valptr)
	return _v
}

// Policy: policy number.
func (m *MIKEYPayloadSP) SetPolicy(policy uint) {
	valptr := &m.native.policy
	*valptr = C.guint(policy)
}

// MIKEYPayloadSPParam (GstMIKEYPayloadSPParam): type/Length/Value field for
// security parameters
//
// An instance of this type is always passed by reference.
type MIKEYPayloadSPParam struct {
	*mikeyPayloadSPParam
}

// mikeyPayloadSPParam is the struct that's finalized.
type mikeyPayloadSPParam struct {
	native *C.GstMIKEYPayloadSPParam
}

// Type specifies the type of the parameter.
func (m *MIKEYPayloadSPParam) Type() byte {
	valptr := &m.native._type
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Len specifies the length of val.
func (m *MIKEYPayloadSPParam) Len() byte {
	valptr := &m.native.len
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// Val specifies the value of the parameter.
func (m *MIKEYPayloadSPParam) Val() *byte {
	valptr := &m.native.val
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// Type specifies the type of the parameter.
func (m *MIKEYPayloadSPParam) SetType(typ byte) {
	valptr := &m.native._type
	*valptr = C.guint8(typ)
}

// Len specifies the length of val.
func (m *MIKEYPayloadSPParam) SetLen(len byte) {
	valptr := &m.native.len
	*valptr = C.guint8(len)
}

// MIKEYPayloadT (GstMIKEYPayloadT): timestamp payload carries the timestamp
// information
//
// An instance of this type is always passed by reference.
type MIKEYPayloadT struct {
	*mikeyPayloadT
}

// mikeyPayloadT is the struct that's finalized.
type mikeyPayloadT struct {
	native *C.GstMIKEYPayloadT
}

// Pt: payload header.
func (m *MIKEYPayloadT) Pt() *MIKEYPayload {
	valptr := &m.native.pt
	var _v *MIKEYPayload // out
	_v = (*MIKEYPayload)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Type: MIKEYTSType.
func (m *MIKEYPayloadT) Type() MIKEYTSType {
	valptr := &m.native._type
	var _v MIKEYTSType // out
	_v = MIKEYTSType(*valptr)
	return _v
}

// TsValue: timestamp value.
func (m *MIKEYPayloadT) TsValue() *byte {
	valptr := &m.native.ts_value
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// SDPAttribute (GstSDPAttribute) contents of the SDP "a=" field which contains
// a key/value pair.
//
// An instance of this type is always passed by reference.
type SDPAttribute struct {
	*sdpAttribute
}

// sdpAttribute is the struct that's finalized.
type sdpAttribute struct {
	native *C.GstSDPAttribute
}

// Key: attribute key.
func (s *SDPAttribute) Key() string {
	valptr := &s.native.key
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Value: attribute value or NULL when it was a property attribute.
func (s *SDPAttribute) Value() string {
	valptr := &s.native.value
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Clear (gst_sdp_attribute_clear) the attribute.
//
// The function returns the following values:
//
//   - sdpResult: GST_SDP_OK.
func (attr *SDPAttribute) Clear() SDPResult {
	var _arg0 *C.GstSDPAttribute // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPAttribute)(gextras.StructNative(unsafe.Pointer(attr)))

	_cret = C.gst_sdp_attribute_clear(_arg0)
	runtime.KeepAlive(attr)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// Set (gst_sdp_attribute_set) the attribute with key and value.
//
// The function takes the following parameters:
//
//   - key: key.
//   - value (optional): value.
//
// The function returns the following values:
//
//   - sdpResult: GST_SDP_OK.
func (attr *SDPAttribute) Set(key string, value string) SDPResult {
	var _arg0 *C.GstSDPAttribute // out
	var _arg1 *C.gchar           // out
	var _arg2 *C.gchar           // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPAttribute)(gextras.StructNative(unsafe.Pointer(attr)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	if value != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.gst_sdp_attribute_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(attr)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SDPBandwidth (GstSDPBandwidth) contents of the SDP "b=" field which specifies
// the proposed bandwidth to be used by the session or media.
//
// An instance of this type is always passed by reference.
type SDPBandwidth struct {
	*sdpBandwidth
}

// sdpBandwidth is the struct that's finalized.
type sdpBandwidth struct {
	native *C.GstSDPBandwidth
}

// Bwtype: bandwidth modifier type.
func (s *SDPBandwidth) Bwtype() string {
	valptr := &s.native.bwtype
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Bandwidth: bandwidth in kilobits per second.
func (s *SDPBandwidth) Bandwidth() uint {
	valptr := &s.native.bandwidth
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Bandwidth: bandwidth in kilobits per second.
func (s *SDPBandwidth) SetBandwidth(bandwidth uint) {
	valptr := &s.native.bandwidth
	*valptr = C.guint(bandwidth)
}

// Clear (gst_sdp_bandwidth_clear): reset the bandwidth information in bw.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (bw *SDPBandwidth) Clear() SDPResult {
	var _arg0 *C.GstSDPBandwidth // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPBandwidth)(gextras.StructNative(unsafe.Pointer(bw)))

	_cret = C.gst_sdp_bandwidth_clear(_arg0)
	runtime.KeepAlive(bw)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// Set (gst_sdp_bandwidth_set) bandwidth information in bw.
//
// The function takes the following parameters:
//
//   - bwtype: bandwidth modifier type.
//   - bandwidth in kilobits per second.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (bw *SDPBandwidth) Set(bwtype string, bandwidth uint) SDPResult {
	var _arg0 *C.GstSDPBandwidth // out
	var _arg1 *C.gchar           // out
	var _arg2 C.guint            // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPBandwidth)(gextras.StructNative(unsafe.Pointer(bw)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(bwtype)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(bandwidth)

	_cret = C.gst_sdp_bandwidth_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(bw)
	runtime.KeepAlive(bwtype)
	runtime.KeepAlive(bandwidth)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SDPConnection (GstSDPConnection) contents of the SDP "c=" field which
// contains connection data.
//
// An instance of this type is always passed by reference.
type SDPConnection struct {
	*sdpConnection
}

// sdpConnection is the struct that's finalized.
type sdpConnection struct {
	native *C.GstSDPConnection
}

// Nettype: type of network. "IN" is defined to have the meaning "Internet".
func (s *SDPConnection) Nettype() string {
	valptr := &s.native.nettype
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Addrtype: type of address.
func (s *SDPConnection) Addrtype() string {
	valptr := &s.native.addrtype
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Address: address.
func (s *SDPConnection) Address() string {
	valptr := &s.native.address
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// TTL: time to live of the address.
func (s *SDPConnection) TTL() uint {
	valptr := &s.native.ttl
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// AddrNumber: number of layers.
func (s *SDPConnection) AddrNumber() uint {
	valptr := &s.native.addr_number
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// TTL: time to live of the address.
func (s *SDPConnection) SetTTL(ttl uint) {
	valptr := &s.native.ttl
	*valptr = C.guint(ttl)
}

// AddrNumber: number of layers.
func (s *SDPConnection) SetAddrNumber(addrNumber uint) {
	valptr := &s.native.addr_number
	*valptr = C.guint(addrNumber)
}

// Clear (gst_sdp_connection_clear) the connection.
//
// The function returns the following values:
//
//   - sdpResult: GST_SDP_OK.
func (conn *SDPConnection) Clear() SDPResult {
	var _arg0 *C.GstSDPConnection // out
	var _cret C.GstSDPResult      // in

	_arg0 = (*C.GstSDPConnection)(gextras.StructNative(unsafe.Pointer(conn)))

	_cret = C.gst_sdp_connection_clear(_arg0)
	runtime.KeepAlive(conn)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// Set (gst_sdp_connection_set) the connection with the given parameters.
//
// The function takes the following parameters:
//
//   - nettype: type of network. "IN" is defined to have the meaning "Internet".
//   - addrtype: type of address.
//   - address: address.
//   - ttl: time to live of the address.
//   - addrNumber: number of layers.
//
// The function returns the following values:
//
//   - sdpResult: GST_SDP_OK.
func (conn *SDPConnection) Set(nettype string, addrtype string, address string, ttl uint, addrNumber uint) SDPResult {
	var _arg0 *C.GstSDPConnection // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _arg3 *C.gchar            // out
	var _arg4 C.guint             // out
	var _arg5 C.guint             // out
	var _cret C.GstSDPResult      // in

	_arg0 = (*C.GstSDPConnection)(gextras.StructNative(unsafe.Pointer(conn)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(nettype)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(addrtype)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(address)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.guint(ttl)
	_arg5 = C.guint(addrNumber)

	_cret = C.gst_sdp_connection_set(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(conn)
	runtime.KeepAlive(nettype)
	runtime.KeepAlive(addrtype)
	runtime.KeepAlive(address)
	runtime.KeepAlive(ttl)
	runtime.KeepAlive(addrNumber)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SDPKey (GstSDPKey) contents of the SDP "k=" field which is used to convey
// encryption keys.
//
// An instance of this type is always passed by reference.
type SDPKey struct {
	*sdpKey
}

// sdpKey is the struct that's finalized.
type sdpKey struct {
	native *C.GstSDPKey
}

// Type: encryption type.
func (s *SDPKey) Type() string {
	valptr := &s.native._type
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Data: encryption data.
func (s *SDPKey) Data() string {
	valptr := &s.native.data
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// SDPMedia (GstSDPMedia) contents of the SDP "m=" field with all related
// fields.
//
// An instance of this type is always passed by reference.
type SDPMedia struct {
	*sdpMedia
}

// sdpMedia is the struct that's finalized.
type sdpMedia struct {
	native *C.GstSDPMedia
}

// AddAttribute (gst_sdp_media_add_attribute): add the attribute with key and
// value to media.
//
// The function takes the following parameters:
//
//   - key: key.
//   - value (optional): value.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) AddAttribute(key string, value string) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	if value != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.gst_sdp_media_add_attribute(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddBandwidth (gst_sdp_media_add_bandwidth): add the bandwidth information
// with bwtype and bandwidth to media.
//
// The function takes the following parameters:
//
//   - bwtype: bandwidth modifier type.
//   - bandwidth in kilobits per second.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) AddBandwidth(bwtype string, bandwidth uint) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _arg2 C.guint        // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(bwtype)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(bandwidth)

	_cret = C.gst_sdp_media_add_bandwidth(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(bwtype)
	runtime.KeepAlive(bandwidth)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddConnection (gst_sdp_media_add_connection): add the given connection
// parameters to media.
//
// The function takes the following parameters:
//
//   - nettype: type of network. "IN" is defined to have the meaning "Internet".
//   - addrtype: type of address.
//   - address: address.
//   - ttl: time to live of the address.
//   - addrNumber: number of layers.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (media *SDPMedia) AddConnection(nettype string, addrtype string, address string, ttl uint, addrNumber uint) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _arg3 *C.gchar       // out
	var _arg4 C.guint        // out
	var _arg5 C.guint        // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(nettype)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(addrtype)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(address)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.guint(ttl)
	_arg5 = C.guint(addrNumber)

	_cret = C.gst_sdp_media_add_connection(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(media)
	runtime.KeepAlive(nettype)
	runtime.KeepAlive(addrtype)
	runtime.KeepAlive(address)
	runtime.KeepAlive(ttl)
	runtime.KeepAlive(addrNumber)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddFormat (gst_sdp_media_add_format): add the format information to media.
//
// The function takes the following parameters:
//
//   - format: format.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) AddFormat(format string) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(format)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_media_add_format(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(format)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AsText (gst_sdp_media_as_text): convert the contents of media to a text
// string.
//
// The function returns the following values:
//
//   - utf8: dynamically allocated string representing the media.
func (media *SDPMedia) AsText() string {
	var _arg0 *C.GstSDPMedia // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_as_text(_arg0)
	runtime.KeepAlive(media)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// AttributesLen (gst_sdp_media_attributes_len): get the number of attribute
// fields in media.
//
// The function returns the following values:
//
//   - guint: number of attributes in media.
func (media *SDPMedia) AttributesLen() uint {
	var _arg0 *C.GstSDPMedia // out
	var _cret C.guint        // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_attributes_len(_arg0)
	runtime.KeepAlive(media)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// AttributesToCaps (gst_sdp_media_attributes_to_caps): mapping of attributes of
// SDPMedia to Caps.
//
// The function takes the following parameters:
//
//   - caps: Caps.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (media *SDPMedia) AttributesToCaps(caps *gst.Caps) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.GstCaps     // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_sdp_media_attributes_to_caps(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(caps)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// BandwidthsLen (gst_sdp_media_bandwidths_len): get the number of bandwidth
// fields in media.
//
// The function returns the following values:
//
//   - guint: number of bandwidths in media.
func (media *SDPMedia) BandwidthsLen() uint {
	var _arg0 *C.GstSDPMedia // out
	var _cret C.guint        // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_bandwidths_len(_arg0)
	runtime.KeepAlive(media)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ConnectionsLen (gst_sdp_media_connections_len): get the number of connection
// fields in media.
//
// The function returns the following values:
//
//   - guint: number of connections in media.
func (media *SDPMedia) ConnectionsLen() uint {
	var _arg0 *C.GstSDPMedia // out
	var _cret C.guint        // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_connections_len(_arg0)
	runtime.KeepAlive(media)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Copy (gst_sdp_media_copy): allocate a new copy of media and store the
// result in copy. The value in copy should be release with gst_sdp_media_free
// function.
//
// The function returns the following values:
//
//   - copy: pointer to new SDPMedia.
//   - sdpResult: SDPResult.
func (media *SDPMedia) Copy() (*SDPMedia, SDPResult) {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.GstSDPMedia // in
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_copy(_arg0, &_arg1)
	runtime.KeepAlive(media)

	var _copy *SDPMedia      // out
	var _sdpResult SDPResult // out

	_copy = (*SDPMedia)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_copy)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_sdp_media_free((*C.GstSDPMedia)(intern.C))
		},
	)
	_sdpResult = SDPResult(_cret)

	return _copy, _sdpResult
}

// FormatsLen (gst_sdp_media_formats_len): get the number of formats in media.
//
// The function returns the following values:
//
//   - guint: number of formats in media.
func (media *SDPMedia) FormatsLen() uint {
	var _arg0 *C.GstSDPMedia // out
	var _cret C.guint        // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_formats_len(_arg0)
	runtime.KeepAlive(media)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Attribute (gst_sdp_media_get_attribute): get the attribute at position idx in
// media.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpAttribute at position idx.
func (media *SDPMedia) Attribute(idx uint) *SDPAttribute {
	var _arg0 *C.GstSDPMedia     // out
	var _arg1 C.guint            // out
	var _cret *C.GstSDPAttribute // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_media_get_attribute(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)

	var _sdpAttribute *SDPAttribute // out

	_sdpAttribute = (*SDPAttribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpAttribute
}

// AttributeVal (gst_sdp_media_get_attribute_val): get the first attribute value
// for key in media.
//
// The function takes the following parameters:
//
//   - key: key.
//
// The function returns the following values:
//
//   - utf8 (optional): first attribute value for key.
func (media *SDPMedia) AttributeVal(key string) string {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_media_get_attribute_val(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(key)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// AttributeValN (gst_sdp_media_get_attribute_val_n): get the nth attribute
// value for key in media.
//
// The function takes the following parameters:
//
//   - key: key.
//   - nth: index.
//
// The function returns the following values:
//
//   - utf8 (optional): nth attribute value.
func (media *SDPMedia) AttributeValN(key string, nth uint) string {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _arg2 C.guint        // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(nth)

	_cret = C.gst_sdp_media_get_attribute_val_n(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(key)
	runtime.KeepAlive(nth)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Bandwidth (gst_sdp_media_get_bandwidth): get the bandwidth at position idx in
// media.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpBandwidth at position idx.
func (media *SDPMedia) Bandwidth(idx uint) *SDPBandwidth {
	var _arg0 *C.GstSDPMedia     // out
	var _arg1 C.guint            // out
	var _cret *C.GstSDPBandwidth // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_media_get_bandwidth(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)

	var _sdpBandwidth *SDPBandwidth // out

	_sdpBandwidth = (*SDPBandwidth)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpBandwidth
}

// CapsFromMedia (gst_sdp_media_get_caps_from_media): mapping of caps from SDP
// fields:
//
// a=rtpmap:(payload) (encoding_name)/(clock_rate)[/(encoding_params)]
//
// a=framesize:(payload) (width)-(height)
//
// a=fmtp:(payload) (param)[=(value)];...
//
// Note that the extmap, ssrc and rid attributes are set only by
// gst_sdp_media_attributes_to_caps().
//
// The function takes the following parameters:
//
//   - pt: payload type.
//
// The function returns the following values:
//
//   - caps (optional) or NULL if an error happened.
func (media *SDPMedia) CapsFromMedia(pt int) *gst.Caps {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.gint         // out
	var _cret *C.GstCaps     // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.gint(pt)

	_cret = C.gst_sdp_media_get_caps_from_media(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(pt)

	var _caps *gst.Caps // out

	if _cret != nil {
		_caps = (*gst.Caps)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_caps)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gst_mini_object_unref((*C.GstMiniObject)(intern.C))
			})
	}

	return _caps
}

// Connection (gst_sdp_media_get_connection): get the connection at position idx
// in media.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpConnection at position idx.
func (media *SDPMedia) Connection(idx uint) *SDPConnection {
	var _arg0 *C.GstSDPMedia      // out
	var _arg1 C.guint             // out
	var _cret *C.GstSDPConnection // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_media_get_connection(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)

	var _sdpConnection *SDPConnection // out

	_sdpConnection = (*SDPConnection)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpConnection
}

// Format (gst_sdp_media_get_format): get the format information at position idx
// in media.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - utf8: format at position idx.
func (media *SDPMedia) Format(idx uint) string {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.guint        // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_media_get_format(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Information (gst_sdp_media_get_information): get the information of media.
//
// The function returns the following values:
//
//   - utf8: information of media.
func (media *SDPMedia) Information() string {
	var _arg0 *C.GstSDPMedia // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_get_information(_arg0)
	runtime.KeepAlive(media)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Key (gst_sdp_media_get_key): get the encryption information from media.
//
// The function returns the following values:
//
//   - sdpKey: SDPKey.
func (media *SDPMedia) Key() *SDPKey {
	var _arg0 *C.GstSDPMedia // out
	var _cret *C.GstSDPKey   // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_get_key(_arg0)
	runtime.KeepAlive(media)

	var _sdpKey *SDPKey // out

	_sdpKey = (*SDPKey)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpKey
}

// Media (gst_sdp_media_get_media): get the media description of media.
//
// The function returns the following values:
//
//   - utf8: media description.
func (media *SDPMedia) Media() string {
	var _arg0 *C.GstSDPMedia // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_get_media(_arg0)
	runtime.KeepAlive(media)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// NumPorts (gst_sdp_media_get_num_ports): get the number of ports for media.
//
// The function returns the following values:
//
//   - guint: number of ports for media.
func (media *SDPMedia) NumPorts() uint {
	var _arg0 *C.GstSDPMedia // out
	var _cret C.guint        // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_get_num_ports(_arg0)
	runtime.KeepAlive(media)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Port (gst_sdp_media_get_port): get the port number for media.
//
// The function returns the following values:
//
//   - guint: port number of media.
func (media *SDPMedia) Port() uint {
	var _arg0 *C.GstSDPMedia // out
	var _cret C.guint        // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_get_port(_arg0)
	runtime.KeepAlive(media)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Proto (gst_sdp_media_get_proto): get the transport protocol of media.
//
// The function returns the following values:
//
//   - utf8: transport protocol of media.
func (media *SDPMedia) Proto() string {
	var _arg0 *C.GstSDPMedia // out
	var _cret *C.gchar       // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_get_proto(_arg0)
	runtime.KeepAlive(media)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// InsertAttribute (gst_sdp_media_insert_attribute): insert the attribute to
// media at idx. When idx is -1, the attribute is appended.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - attr: SDPAttribute.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) InsertAttribute(idx int, attr *SDPAttribute) SDPResult {
	var _arg0 *C.GstSDPMedia     // out
	var _arg1 C.gint             // out
	var _arg2 *C.GstSDPAttribute // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstSDPAttribute)(gextras.StructNative(unsafe.Pointer(attr)))

	_cret = C.gst_sdp_media_insert_attribute(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(attr)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// InsertBandwidth (gst_sdp_media_insert_bandwidth): insert the bandwidth
// information to media at idx. When idx is -1, the bandwidth is appended.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - bw: SDPBandwidth.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) InsertBandwidth(idx int, bw *SDPBandwidth) SDPResult {
	var _arg0 *C.GstSDPMedia     // out
	var _arg1 C.gint             // out
	var _arg2 *C.GstSDPBandwidth // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstSDPBandwidth)(gextras.StructNative(unsafe.Pointer(bw)))

	_cret = C.gst_sdp_media_insert_bandwidth(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(bw)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// InsertConnection (gst_sdp_media_insert_connection): insert the connection
// information to media at idx. When idx is -1, the connection is appended.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - conn: SDPConnection.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) InsertConnection(idx int, conn *SDPConnection) SDPResult {
	var _arg0 *C.GstSDPMedia      // out
	var _arg1 C.gint              // out
	var _arg2 *C.GstSDPConnection // out
	var _cret C.GstSDPResult      // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstSDPConnection)(gextras.StructNative(unsafe.Pointer(conn)))

	_cret = C.gst_sdp_media_insert_connection(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(conn)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// InsertFormat (gst_sdp_media_insert_format): insert the format information to
// media at idx. When idx is -1, the format is appended.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - format: format.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) InsertFormat(idx int, format string) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.gint         // out
	var _arg2 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(format)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_media_insert_format(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(format)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ParseKeymgmt (gst_sdp_media_parse_keymgmt) creates a new MIKEYMessage after
// parsing the key-mgmt attribute from a SDPMedia.
//
// The function returns the following values:
//
//   - mikey: pointer to new MIKEYMessage.
//   - sdpResult: SDPResult.
func (media *SDPMedia) ParseKeymgmt() (*MIKEYMessage, SDPResult) {
	var _arg0 *C.GstSDPMedia     // out
	var _arg1 *C.GstMIKEYMessage // in
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_parse_keymgmt(_arg0, &_arg1)
	runtime.KeepAlive(media)

	var _mikey *MIKEYMessage // out
	var _sdpResult SDPResult // out

	_mikey = (*MIKEYMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_mikey)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	_sdpResult = SDPResult(_cret)

	return _mikey, _sdpResult
}

// RemoveAttribute (gst_sdp_media_remove_attribute): remove the attribute in
// media at idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) RemoveAttribute(idx uint) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.guint        // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_media_remove_attribute(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemoveBandwidth (gst_sdp_media_remove_bandwidth): remove the bandwidth
// information in media at idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) RemoveBandwidth(idx uint) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.guint        // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_media_remove_bandwidth(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemoveConnection (gst_sdp_media_remove_connection): remove the connection
// information in media at idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) RemoveConnection(idx uint) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.guint        // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_media_remove_connection(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemoveFormat (gst_sdp_media_remove_format): remove the format information in
// media at idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) RemoveFormat(idx uint) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.guint        // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_media_remove_format(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceAttribute (gst_sdp_media_replace_attribute): replace the attribute in
// media at idx with attr.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - attr: SDPAttribute.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) ReplaceAttribute(idx uint, attr *SDPAttribute) SDPResult {
	var _arg0 *C.GstSDPMedia     // out
	var _arg1 C.guint            // out
	var _arg2 *C.GstSDPAttribute // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstSDPAttribute)(gextras.StructNative(unsafe.Pointer(attr)))

	_cret = C.gst_sdp_media_replace_attribute(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(attr)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceBandwidth (gst_sdp_media_replace_bandwidth): replace the bandwidth
// information in media at idx with bw.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - bw: SDPBandwidth.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) ReplaceBandwidth(idx uint, bw *SDPBandwidth) SDPResult {
	var _arg0 *C.GstSDPMedia     // out
	var _arg1 C.guint            // out
	var _arg2 *C.GstSDPBandwidth // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstSDPBandwidth)(gextras.StructNative(unsafe.Pointer(bw)))

	_cret = C.gst_sdp_media_replace_bandwidth(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(bw)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceConnection (gst_sdp_media_replace_connection): replace the connection
// information in media at idx with conn.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - conn: SDPConnection.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) ReplaceConnection(idx uint, conn *SDPConnection) SDPResult {
	var _arg0 *C.GstSDPMedia      // out
	var _arg1 C.guint             // out
	var _arg2 *C.GstSDPConnection // out
	var _cret C.GstSDPResult      // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstSDPConnection)(gextras.StructNative(unsafe.Pointer(conn)))

	_cret = C.gst_sdp_media_replace_connection(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(conn)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceFormat (gst_sdp_media_replace_format): replace the format information
// in media at idx with format.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - format: format.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) ReplaceFormat(idx uint, format string) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.guint        // out
	var _arg2 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(format)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_media_replace_format(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(format)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetInformation (gst_sdp_media_set_information): set the media information of
// media to information.
//
// The function takes the following parameters:
//
//   - information: media information.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) SetInformation(information string) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(information)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_media_set_information(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(information)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetKey (gst_sdp_media_set_key) adds the encryption information to media.
//
// The function takes the following parameters:
//
//   - typ: encryption type.
//   - data: encryption data.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (media *SDPMedia) SetKey(typ string, data string) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(typ)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_media_set_key(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(data)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetMedia (gst_sdp_media_set_media): set the media description of media to
// med.
//
// The function takes the following parameters:
//
//   - med: media description.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) SetMedia(med string) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(med)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_media_set_media(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(med)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetPortInfo (gst_sdp_media_set_port_info): set the port information in media.
//
// The function takes the following parameters:
//
//   - port number.
//   - numPorts: number of ports.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) SetPortInfo(port uint, numPorts uint) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 C.guint        // out
	var _arg2 C.guint        // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = C.guint(port)
	_arg2 = C.guint(numPorts)

	_cret = C.gst_sdp_media_set_port_info(_arg0, _arg1, _arg2)
	runtime.KeepAlive(media)
	runtime.KeepAlive(port)
	runtime.KeepAlive(numPorts)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetProto (gst_sdp_media_set_proto): set the media transport protocol of media
// to proto.
//
// The function takes the following parameters:
//
//   - proto: media transport protocol.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (media *SDPMedia) SetProto(proto string) SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _arg1 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(proto)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_media_set_proto(_arg0, _arg1)
	runtime.KeepAlive(media)
	runtime.KeepAlive(proto)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// Uninit (gst_sdp_media_uninit): free all resources allocated in media.
// media should not be used anymore after this function. This function
// should be used when media was allocated on the stack and initialized with
// gst_sdp_media_init().
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (media *SDPMedia) Uninit() SDPResult {
	var _arg0 *C.GstSDPMedia // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_media_uninit(_arg0)
	runtime.KeepAlive(media)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SDPMediaInit (gst_sdp_media_init): initialize media so that its
// contents are as if it was freshly allocated with gst_sdp_media_new().
// This function is mostly used to initialize a media allocated on the stack.
// gst_sdp_media_uninit() undoes this operation.
//
// When this function is invoked on newly allocated data (with malloc or on the
// stack), its contents should be set to 0 before calling this function.
//
// The function returns the following values:
//
//   - media: SDPMedia.
//   - sdpResult: SDPResult.
func SDPMediaInit() (*SDPMedia, SDPResult) {
	var _arg1 C.GstSDPMedia  // in
	var _cret C.GstSDPResult // in

	_cret = C.gst_sdp_media_init(&_arg1)

	var _media *SDPMedia     // out
	var _sdpResult SDPResult // out

	_media = (*SDPMedia)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	_sdpResult = SDPResult(_cret)

	return _media, _sdpResult
}

// NewSDPMedia (gst_sdp_media_new): allocate a new GstSDPMedia and store the
// result in media.
//
// The function returns the following values:
//
//   - media: pointer to new SDPMedia.
//   - sdpResult: SDPResult.
func NewSDPMedia() (*SDPMedia, SDPResult) {
	var _arg1 *C.GstSDPMedia // in
	var _cret C.GstSDPResult // in

	_cret = C.gst_sdp_media_new(&_arg1)

	var _media *SDPMedia     // out
	var _sdpResult SDPResult // out

	_media = (*SDPMedia)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_media)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_sdp_media_free((*C.GstSDPMedia)(intern.C))
		},
	)
	_sdpResult = SDPResult(_cret)

	return _media, _sdpResult
}

// SDPMediaSetMediaFromCaps (gst_sdp_media_set_media_from_caps): mapping of caps
// to SDP fields:
//
// a=rtpmap:(payload) (encoding_name) or (clock_rate)[or (encoding_params)]
//
// a=framesize:(payload) (width)-(height)
//
// a=fmtp:(payload) (param)[=(value)];...
//
// a=rtcp-fb:(payload) (param1) [param2]...
//
// a=extmap:(id)[/direction] (extensionname) (extensionattributes).
//
// The function takes the following parameters:
//
//   - caps: Caps.
//
// The function returns the following values:
//
//   - media: SDPMedia.
//   - sdpResult: SDPResult.
func SDPMediaSetMediaFromCaps(caps *gst.Caps) (*SDPMedia, SDPResult) {
	var _arg1 *C.GstCaps     // out
	var _arg2 C.GstSDPMedia  // in
	var _cret C.GstSDPResult // in

	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_sdp_media_set_media_from_caps(_arg1, &_arg2)
	runtime.KeepAlive(caps)

	var _media *SDPMedia     // out
	var _sdpResult SDPResult // out

	_media = (*SDPMedia)(gextras.NewStructNative(unsafe.Pointer((&_arg2))))
	_sdpResult = SDPResult(_cret)

	return _media, _sdpResult
}

// SDPMessage (GstSDPMessage) helper functions makes it easy to parse and create
// SDP messages.
//
// An instance of this type is always passed by reference.
type SDPMessage struct {
	*sdpMessage
}

// sdpMessage is the struct that's finalized.
type sdpMessage struct {
	native *C.GstSDPMessage
}

func marshalSDPMessage(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SDPMessage{&sdpMessage{(*C.GstSDPMessage)(b)}}, nil
}

// AddAttribute (gst_sdp_message_add_attribute): add the attribute with key and
// value to msg.
//
// The function takes the following parameters:
//
//   - key: key.
//   - value (optional): value.
//
// The function returns the following values:
//
//   - sdpResult: GST_SDP_OK.
func (msg *SDPMessage) AddAttribute(key string, value string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	if value != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.gst_sdp_message_add_attribute(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddBandwidth (gst_sdp_message_add_bandwidth): add the specified bandwidth
// information to msg.
//
// The function takes the following parameters:
//
//   - bwtype: bandwidth modifier type.
//   - bandwidth in kilobits per second.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) AddBandwidth(bwtype string, bandwidth uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _arg2 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(bwtype)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(bandwidth)

	_cret = C.gst_sdp_message_add_bandwidth(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(bwtype)
	runtime.KeepAlive(bandwidth)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddEmail (gst_sdp_message_add_email): add email to the list of emails in msg.
//
// The function takes the following parameters:
//
//   - email: email.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) AddEmail(email string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(email)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_message_add_email(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(email)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddMedia (gst_sdp_message_add_media) adds media to the array of medias in
// msg. This function takes ownership of the contents of media so that media
// will have to be reinitialized with gst_sdp_media_init() before it can be used
// again.
//
// The function takes the following parameters:
//
//   - media to add.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) AddMedia(media *SDPMedia) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.GstSDPMedia   // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.GstSDPMedia)(gextras.StructNative(unsafe.Pointer(media)))

	_cret = C.gst_sdp_message_add_media(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(media)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddPhone (gst_sdp_message_add_phone): add phone to the list of phones in msg.
//
// The function takes the following parameters:
//
//   - phone: phone.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) AddPhone(phone string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(phone)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_message_add_phone(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(phone)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddTime (gst_sdp_message_add_time): add time information start and stop to
// msg.
//
// The function takes the following parameters:
//
//   - start time.
//   - stop time.
//   - repeat times.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) AddTime(start string, stop string, repeat []string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _arg3 **C.gchar        // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(start)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(stop)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		_arg3 = (**C.gchar)(C.calloc(C.size_t((len(repeat) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg3))
		{
			out := unsafe.Slice(_arg3, len(repeat)+1)
			var zero *C.gchar
			out[len(repeat)] = zero
			for i := range repeat {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(repeat[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	_cret = C.gst_sdp_message_add_time(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(start)
	runtime.KeepAlive(stop)
	runtime.KeepAlive(repeat)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AddZone (gst_sdp_message_add_zone): add time zone information to msg.
//
// The function takes the following parameters:
//
//   - adjTime: NTP time that a time zone adjustment happens.
//   - typedTime: offset from the time when the session was first scheduled.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) AddZone(adjTime string, typedTime string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(adjTime)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(typedTime)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_message_add_zone(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(adjTime)
	runtime.KeepAlive(typedTime)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// AsText (gst_sdp_message_as_text): convert the contents of msg to a text
// string.
//
// The function returns the following values:
//
//   - utf8: dynamically allocated string representing the SDP description.
func (msg *SDPMessage) AsText() string {
	var _arg0 *C.GstSDPMessage // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_as_text(_arg0)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// AttributesLen (gst_sdp_message_attributes_len): get the number of attributes
// in msg.
//
// The function returns the following values:
//
//   - guint: number of attributes in msg.
func (msg *SDPMessage) AttributesLen() uint {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.guint          // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_attributes_len(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// AttributesToCaps (gst_sdp_message_attributes_to_caps): mapping of attributes
// of SDPMessage to Caps.
//
// The function takes the following parameters:
//
//   - caps: Caps.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) AttributesToCaps(caps *gst.Caps) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.GstCaps       // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_sdp_message_attributes_to_caps(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(caps)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// BandwidthsLen (gst_sdp_message_bandwidths_len): get the number of bandwidth
// information in msg.
//
// The function returns the following values:
//
//   - guint: number of bandwidth information in msg.
func (msg *SDPMessage) BandwidthsLen() uint {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.guint          // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_bandwidths_len(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Copy (gst_sdp_message_copy): allocate a new copy of msg and store the result
// in copy. The value in copy should be release with gst_sdp_message_free
// function.
//
// The function returns the following values:
//
//   - copy: pointer to new SDPMessage.
//   - sdpResult: SDPResult.
func (msg *SDPMessage) Copy() (*SDPMessage, SDPResult) {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.GstSDPMessage // in
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_copy(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _copy *SDPMessage    // out
	var _sdpResult SDPResult // out

	_copy = (*SDPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_copy)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_sdp_message_free((*C.GstSDPMessage)(intern.C))
		},
	)
	_sdpResult = SDPResult(_cret)

	return _copy, _sdpResult
}

// Dump (gst_sdp_message_dump) the parsed contents of msg to stdout.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) Dump() SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_dump(_arg0)
	runtime.KeepAlive(msg)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// EmailsLen (gst_sdp_message_emails_len): get the number of emails in msg.
//
// The function returns the following values:
//
//   - guint: number of emails in msg.
func (msg *SDPMessage) EmailsLen() uint {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.guint          // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_emails_len(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Attribute (gst_sdp_message_get_attribute): get the attribute at position idx
// in msg.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpAttribute at position idx.
func (msg *SDPMessage) Attribute(idx uint) *SDPAttribute {
	var _arg0 *C.GstSDPMessage   // out
	var _arg1 C.guint            // out
	var _cret *C.GstSDPAttribute // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_get_attribute(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpAttribute *SDPAttribute // out

	_sdpAttribute = (*SDPAttribute)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpAttribute
}

// AttributeVal (gst_sdp_message_get_attribute_val): get the first attribute
// with key key in msg.
//
// The function takes the following parameters:
//
//   - key: key.
//
// The function returns the following values:
//
//   - utf8 (optional): attribute value of the first attribute with key.
func (msg *SDPMessage) AttributeVal(key string) string {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_message_get_attribute_val(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(key)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// AttributeValN (gst_sdp_message_get_attribute_val_n): get the nth attribute
// with key key in msg.
//
// The function takes the following parameters:
//
//   - key: key.
//   - nth: index.
//
// The function returns the following values:
//
//   - utf8 (optional): attribute value of the nth attribute with key.
func (msg *SDPMessage) AttributeValN(key string, nth uint) string {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _arg2 C.guint          // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(nth)

	_cret = C.gst_sdp_message_get_attribute_val_n(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(key)
	runtime.KeepAlive(nth)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Bandwidth (gst_sdp_message_get_bandwidth): get the bandwidth at index idx
// from msg.
//
// The function takes the following parameters:
//
//   - idx: bandwidth index.
//
// The function returns the following values:
//
//   - sdpBandwidth: SDPBandwidth.
func (msg *SDPMessage) Bandwidth(idx uint) *SDPBandwidth {
	var _arg0 *C.GstSDPMessage   // out
	var _arg1 C.guint            // out
	var _cret *C.GstSDPBandwidth // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_get_bandwidth(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpBandwidth *SDPBandwidth // out

	_sdpBandwidth = (*SDPBandwidth)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpBandwidth
}

// Connection (gst_sdp_message_get_connection): get the connection of msg.
//
// The function returns the following values:
//
//   - sdpConnection The result remains valid as long as msg is valid.
func (msg *SDPMessage) Connection() *SDPConnection {
	var _arg0 *C.GstSDPMessage    // out
	var _cret *C.GstSDPConnection // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_get_connection(_arg0)
	runtime.KeepAlive(msg)

	var _sdpConnection *SDPConnection // out

	_sdpConnection = (*SDPConnection)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpConnection
}

// Email (gst_sdp_message_get_email): get the email with number idx from msg.
//
// The function takes the following parameters:
//
//   - idx: email index.
//
// The function returns the following values:
//
//   - utf8: email at position idx.
func (msg *SDPMessage) Email(idx uint) string {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_get_email(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Information (gst_sdp_message_get_information): get the information in msg.
//
// The function returns the following values:
//
//   - utf8: SDPResult.
func (msg *SDPMessage) Information() string {
	var _arg0 *C.GstSDPMessage // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_get_information(_arg0)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Key (gst_sdp_message_get_key): get the encryption information from msg.
//
// The function returns the following values:
//
//   - sdpKey: SDPKey.
func (msg *SDPMessage) Key() *SDPKey {
	var _arg0 *C.GstSDPMessage // out
	var _cret *C.GstSDPKey     // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_get_key(_arg0)
	runtime.KeepAlive(msg)

	var _sdpKey *SDPKey // out

	_sdpKey = (*SDPKey)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpKey
}

// Media (gst_sdp_message_get_media): get the media description at index idx in
// msg.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpMedia: SDPMedia.
func (msg *SDPMessage) Media(idx uint) *SDPMedia {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret *C.GstSDPMedia   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_get_media(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpMedia *SDPMedia // out

	_sdpMedia = (*SDPMedia)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpMedia
}

// Origin (gst_sdp_message_get_origin): get the origin of msg.
//
// The function returns the following values:
//
//   - sdpOrigin The result remains valid as long as msg is valid.
func (msg *SDPMessage) Origin() *SDPOrigin {
	var _arg0 *C.GstSDPMessage // out
	var _cret *C.GstSDPOrigin  // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_get_origin(_arg0)
	runtime.KeepAlive(msg)

	var _sdpOrigin *SDPOrigin // out

	_sdpOrigin = (*SDPOrigin)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpOrigin
}

// Phone (gst_sdp_message_get_phone): get the phone with number idx from msg.
//
// The function takes the following parameters:
//
//   - idx: phone index.
//
// The function returns the following values:
//
//   - utf8: phone at position idx.
func (msg *SDPMessage) Phone(idx uint) string {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_get_phone(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SessionName (gst_sdp_message_get_session_name): get the session name in msg.
//
// The function returns the following values:
//
//   - utf8: SDPResult.
func (msg *SDPMessage) SessionName() string {
	var _arg0 *C.GstSDPMessage // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_get_session_name(_arg0)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Time (gst_sdp_message_get_time): get time information with index idx from
// msg.
//
// The function takes the following parameters:
//
//   - idx: time index.
//
// The function returns the following values:
//
//   - sdpTime: SDPTime.
func (msg *SDPMessage) Time(idx uint) *SDPTime {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret *C.GstSDPTime    // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_get_time(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpTime *SDPTime // out

	_sdpTime = (*SDPTime)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpTime
}

// URI (gst_sdp_message_get_uri): get the URI in msg.
//
// The function returns the following values:
//
//   - utf8: SDPResult.
func (msg *SDPMessage) URI() string {
	var _arg0 *C.GstSDPMessage // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_get_uri(_arg0)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Version (gst_sdp_message_get_version): get the version in msg.
//
// The function returns the following values:
//
//   - utf8: SDPResult.
func (msg *SDPMessage) Version() string {
	var _arg0 *C.GstSDPMessage // out
	var _cret *C.gchar         // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_get_version(_arg0)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Zone (gst_sdp_message_get_zone): get time zone information with index idx
// from msg.
//
// The function takes the following parameters:
//
//   - idx: zone index.
//
// The function returns the following values:
//
//   - sdpZone: SDPZone.
func (msg *SDPMessage) Zone(idx uint) *SDPZone {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret *C.GstSDPZone    // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_get_zone(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpZone *SDPZone // out

	_sdpZone = (*SDPZone)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _sdpZone
}

// InsertAttribute (gst_sdp_message_insert_attribute): insert attribute into
// the array of attributes in msg at index idx. When -1 is given as idx,
// the attribute is inserted at the end.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - attr: SDPAttribute.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) InsertAttribute(idx int, attr *SDPAttribute) SDPResult {
	var _arg0 *C.GstSDPMessage   // out
	var _arg1 C.gint             // out
	var _arg2 *C.GstSDPAttribute // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstSDPAttribute)(gextras.StructNative(unsafe.Pointer(attr)))

	_cret = C.gst_sdp_message_insert_attribute(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(attr)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// InsertBandwidth (gst_sdp_message_insert_bandwidth): insert bandwidth
// parameters into the array of bandwidths in msg at index idx. When -1 is given
// as idx, the bandwidth is inserted at the end.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - bw: bandwidth.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) InsertBandwidth(idx int, bw *SDPBandwidth) SDPResult {
	var _arg0 *C.GstSDPMessage   // out
	var _arg1 C.gint             // out
	var _arg2 *C.GstSDPBandwidth // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstSDPBandwidth)(gextras.StructNative(unsafe.Pointer(bw)))

	_cret = C.gst_sdp_message_insert_bandwidth(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(bw)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// InsertEmail (gst_sdp_message_insert_email): insert email into the array of
// emails in msg at index idx. When -1 is given as idx, the email is inserted at
// the end.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - email: email.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) InsertEmail(idx int, email string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(email)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_message_insert_email(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(email)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// InsertPhone (gst_sdp_message_insert_phone): insert phone into the array of
// phone numbers in msg at index idx. When -1 is given as idx, the phone is
// inserted at the end.
//
// The function takes the following parameters:
//
//   - idx: phone index.
//   - phone: phone.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) InsertPhone(idx int, phone string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.gint           // out
	var _arg2 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(phone)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_message_insert_phone(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(phone)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// InsertTime (gst_sdp_message_insert_time): insert time parameters into the
// array of times in msg at index idx. When -1 is given as idx, the times are
// inserted at the end.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - t: SDPTime.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) InsertTime(idx int, t *SDPTime) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.gint           // out
	var _arg2 *C.GstSDPTime    // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstSDPTime)(gextras.StructNative(unsafe.Pointer(t)))

	_cret = C.gst_sdp_message_insert_time(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(t)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// InsertZone (gst_sdp_message_insert_zone): insert zone parameters into the
// array of zones in msg at index idx. When -1 is given as idx, the zone is
// inserted at the end.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - zone: SDPZone.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) InsertZone(idx int, zone *SDPZone) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.gint           // out
	var _arg2 *C.GstSDPZone    // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.gint(idx)
	_arg2 = (*C.GstSDPZone)(gextras.StructNative(unsafe.Pointer(zone)))

	_cret = C.gst_sdp_message_insert_zone(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(zone)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// MediasLen (gst_sdp_message_medias_len): get the number of media descriptions
// in msg.
//
// The function returns the following values:
//
//   - guint: number of media descriptions in msg.
func (msg *SDPMessage) MediasLen() uint {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.guint          // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_medias_len(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ParseKeymgmt (gst_sdp_message_parse_keymgmt) creates a new MIKEYMessage after
// parsing the key-mgmt attribute from a SDPMessage.
//
// The function returns the following values:
//
//   - mikey: pointer to new MIKEYMessage.
//   - sdpResult: SDPResult.
func (msg *SDPMessage) ParseKeymgmt() (*MIKEYMessage, SDPResult) {
	var _arg0 *C.GstSDPMessage   // out
	var _arg1 *C.GstMIKEYMessage // in
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_parse_keymgmt(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _mikey *MIKEYMessage // out
	var _sdpResult SDPResult // out

	_mikey = (*MIKEYMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_mikey)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	_sdpResult = SDPResult(_cret)

	return _mikey, _sdpResult
}

// PhonesLen (gst_sdp_message_phones_len): get the number of phones in msg.
//
// The function returns the following values:
//
//   - guint: number of phones in msg.
func (msg *SDPMessage) PhonesLen() uint {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.guint          // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_phones_len(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// RemoveAttribute (gst_sdp_message_remove_attribute): remove the attribute in
// msg at index idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) RemoveAttribute(idx uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_remove_attribute(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemoveBandwidth (gst_sdp_message_remove_bandwidth): remove the bandwidth
// information in msg at index idx.
//
// The function takes the following parameters:
//
//   - idx: bandwidth index.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) RemoveBandwidth(idx uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_remove_bandwidth(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemoveEmail (gst_sdp_message_remove_email): remove the email in msg at index
// idx.
//
// The function takes the following parameters:
//
//   - idx: email index.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) RemoveEmail(idx uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_remove_email(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemoveMedia (gst_sdp_message_remove_media): remove the media at idx from the
// array of medias in msg if found.
//
// The function takes the following parameters:
//
//   - idx: media index.
//
// The function returns the following values:
//
//   - sdpResult when the specified media is found at idx and removed,
//     T_SDP_EINVAL otherwise.
func (msg *SDPMessage) RemoveMedia(idx uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_remove_media(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemovePhone (gst_sdp_message_remove_phone): remove the phone number in msg at
// index idx.
//
// The function takes the following parameters:
//
//   - idx: phone index.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) RemovePhone(idx uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_remove_phone(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemoveTime (gst_sdp_message_remove_time): remove the time information in msg
// at index idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) RemoveTime(idx uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_remove_time(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// RemoveZone (gst_sdp_message_remove_zone): remove the zone information in msg
// at index idx.
//
// The function takes the following parameters:
//
//   - idx: index.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) RemoveZone(idx uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)

	_cret = C.gst_sdp_message_remove_zone(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceAttribute (gst_sdp_message_replace_attribute): replace the attribute
// in msg at index idx with attr.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - attr: SDPAttribute.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) ReplaceAttribute(idx uint, attr *SDPAttribute) SDPResult {
	var _arg0 *C.GstSDPMessage   // out
	var _arg1 C.guint            // out
	var _arg2 *C.GstSDPAttribute // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstSDPAttribute)(gextras.StructNative(unsafe.Pointer(attr)))

	_cret = C.gst_sdp_message_replace_attribute(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(attr)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceBandwidth (gst_sdp_message_replace_bandwidth): replace the bandwidth
// information in msg at index idx with bw.
//
// The function takes the following parameters:
//
//   - idx: bandwidth index.
//   - bw: bandwidth.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) ReplaceBandwidth(idx uint, bw *SDPBandwidth) SDPResult {
	var _arg0 *C.GstSDPMessage   // out
	var _arg1 C.guint            // out
	var _arg2 *C.GstSDPBandwidth // out
	var _cret C.GstSDPResult     // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstSDPBandwidth)(gextras.StructNative(unsafe.Pointer(bw)))

	_cret = C.gst_sdp_message_replace_bandwidth(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(bw)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceEmail (gst_sdp_message_replace_email): replace the email in msg at
// index idx with email.
//
// The function takes the following parameters:
//
//   - idx: email index.
//   - email: email.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) ReplaceEmail(idx uint, email string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _arg2 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(email)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_message_replace_email(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(email)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplacePhone (gst_sdp_message_replace_phone): replace the phone number in msg
// at index idx with phone.
//
// The function takes the following parameters:
//
//   - idx: phone index.
//   - phone: phone.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) ReplacePhone(idx uint, phone string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _arg2 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(phone)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_message_replace_phone(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(phone)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceTime (gst_sdp_message_replace_time): replace the time information in
// msg at index idx with t.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - t: SDPTime.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) ReplaceTime(idx uint, t *SDPTime) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _arg2 *C.GstSDPTime    // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstSDPTime)(gextras.StructNative(unsafe.Pointer(t)))

	_cret = C.gst_sdp_message_replace_time(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(t)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ReplaceZone (gst_sdp_message_replace_zone): replace the zone information in
// msg at index idx with zone.
//
// The function takes the following parameters:
//
//   - idx: index.
//   - zone: SDPZone.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) ReplaceZone(idx uint, zone *SDPZone) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 C.guint          // out
	var _arg2 *C.GstSDPZone    // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint(idx)
	_arg2 = (*C.GstSDPZone)(gextras.StructNative(unsafe.Pointer(zone)))

	_cret = C.gst_sdp_message_replace_zone(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(idx)
	runtime.KeepAlive(zone)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetConnection (gst_sdp_message_set_connection): configure the SDP connection
// in msg with the given parameters.
//
// The function takes the following parameters:
//
//   - nettype: type of network. "IN" is defined to have the meaning "Internet".
//   - addrtype: type of address.
//   - address: address.
//   - ttl: time to live of the address.
//   - addrNumber: number of layers.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) SetConnection(nettype string, addrtype string, address string, ttl uint, addrNumber uint) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _arg3 *C.gchar         // out
	var _arg4 C.guint          // out
	var _arg5 C.guint          // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(nettype)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(addrtype)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(address)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = C.guint(ttl)
	_arg5 = C.guint(addrNumber)

	_cret = C.gst_sdp_message_set_connection(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(nettype)
	runtime.KeepAlive(addrtype)
	runtime.KeepAlive(address)
	runtime.KeepAlive(ttl)
	runtime.KeepAlive(addrNumber)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetInformation (gst_sdp_message_set_information): set the information in msg.
//
// The function takes the following parameters:
//
//   - information: information.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) SetInformation(information string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(information)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_message_set_information(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(information)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetKey (gst_sdp_message_set_key) adds the encryption information to msg.
//
// The function takes the following parameters:
//
//   - typ: encryption type.
//   - data: encryption data.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) SetKey(typ string, data string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(typ)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_message_set_key(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(data)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetOrigin (gst_sdp_message_set_origin): configure the SDP origin in msg with
// the given parameters.
//
// The function takes the following parameters:
//
//   - username: user name.
//   - sessId: session id.
//   - sessVersion: session version.
//   - nettype: network type.
//   - addrtype address type.
//   - addr: address.
//
// The function returns the following values:
//
//   - sdpResult: T_SDP_OK.
func (msg *SDPMessage) SetOrigin(username string, sessId string, sessVersion string, nettype string, addrtype string, addr string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _arg2 *C.gchar         // out
	var _arg3 *C.gchar         // out
	var _arg4 *C.gchar         // out
	var _arg5 *C.gchar         // out
	var _arg6 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(username)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(sessId)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(sessVersion)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(nettype)))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.gchar)(unsafe.Pointer(C.CString(addrtype)))
	defer C.free(unsafe.Pointer(_arg5))
	_arg6 = (*C.gchar)(unsafe.Pointer(C.CString(addr)))
	defer C.free(unsafe.Pointer(_arg6))

	_cret = C.gst_sdp_message_set_origin(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(username)
	runtime.KeepAlive(sessId)
	runtime.KeepAlive(sessVersion)
	runtime.KeepAlive(nettype)
	runtime.KeepAlive(addrtype)
	runtime.KeepAlive(addr)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetSessionName (gst_sdp_message_set_session_name): set the session name in
// msg.
//
// The function takes the following parameters:
//
//   - sessionName: session name.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) SetSessionName(sessionName string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(sessionName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_message_set_session_name(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(sessionName)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetURI (gst_sdp_message_set_uri): set the URI in msg.
//
// The function takes the following parameters:
//
//   - uri: URI.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) SetURI(uri string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_message_set_uri(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(uri)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SetVersion (gst_sdp_message_set_version): set the version in msg.
//
// The function takes the following parameters:
//
//   - version: version.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) SetVersion(version string) SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _arg1 *C.gchar         // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(version)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_message_set_version(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(version)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// TimesLen (gst_sdp_message_times_len): get the number of time information
// entries in msg.
//
// The function returns the following values:
//
//   - guint: number of time information entries in msg.
func (msg *SDPMessage) TimesLen() uint {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.guint          // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_times_len(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Uninit (gst_sdp_message_uninit): free all resources allocated in msg.
// msg should not be used anymore after this function. This function
// should be used when msg was allocated on the stack and initialized with
// gst_sdp_message_init().
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (msg *SDPMessage) Uninit() SDPResult {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.GstSDPResult   // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_uninit(_arg0)
	runtime.KeepAlive(msg)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// ZonesLen (gst_sdp_message_zones_len): get the number of time zone information
// entries in msg.
//
// The function returns the following values:
//
//   - guint: number of time zone information entries in msg.
func (msg *SDPMessage) ZonesLen() uint {
	var _arg0 *C.GstSDPMessage // out
	var _cret C.guint          // in

	_arg0 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_zones_len(_arg0)
	runtime.KeepAlive(msg)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// SDPMessageAsURI (gst_sdp_message_as_uri) creates a uri from msg with the
// given scheme. The uri has the format:
//
//	\scheme:///[#type=value *[&type=value]]
//
//	Where each value is url encoded.
//
// The function takes the following parameters:
//
//   - scheme: uri scheme.
//   - msg: SDPMessage.
//
// The function returns the following values:
//
//   - utf8: uri for msg.
func SDPMessageAsURI(scheme string, msg *SDPMessage) string {
	var _arg1 *C.gchar         // out
	var _arg2 *C.GstSDPMessage // out
	var _cret *C.gchar         // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(scheme)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_as_uri(_arg1, _arg2)
	runtime.KeepAlive(scheme)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SDPMessageInit (gst_sdp_message_init): initialize msg so that its
// contents are as if it was freshly allocated with gst_sdp_message_new().
// This function is mostly used to initialize a message allocated on the stack.
// gst_sdp_message_uninit() undoes this operation.
//
// When this function is invoked on newly allocated data (with malloc or on the
// stack), its contents should be set to 0 before calling this function.
//
// The function returns the following values:
//
//   - msg: SDPMessage.
//   - sdpResult: SDPResult.
func SDPMessageInit() (*SDPMessage, SDPResult) {
	var _arg1 C.GstSDPMessage // in
	var _cret C.GstSDPResult  // in

	_cret = C.gst_sdp_message_init(&_arg1)

	var _msg *SDPMessage     // out
	var _sdpResult SDPResult // out

	_msg = (*SDPMessage)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))
	_sdpResult = SDPResult(_cret)

	return _msg, _sdpResult
}

// NewSDPMessage (gst_sdp_message_new): allocate a new GstSDPMessage and store
// the result in msg.
//
// The function returns the following values:
//
//   - msg: pointer to new SDPMessage.
//   - sdpResult: SDPResult.
func NewSDPMessage() (*SDPMessage, SDPResult) {
	var _arg1 *C.GstSDPMessage // in
	var _cret C.GstSDPResult   // in

	_cret = C.gst_sdp_message_new(&_arg1)

	var _msg *SDPMessage     // out
	var _sdpResult SDPResult // out

	_msg = (*SDPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_sdp_message_free((*C.GstSDPMessage)(intern.C))
		},
	)
	_sdpResult = SDPResult(_cret)

	return _msg, _sdpResult
}

// NewSDPMessageFromText (gst_sdp_message_new_from_text): parse text and create
// a new SDPMessage from these.
//
// The function takes the following parameters:
//
//   - text: dynamically allocated string representing the SDP description.
//
// The function returns the following values:
//
//   - msg: pointer to new SDPMessage.
//   - sdpResult: SDPResult.
func NewSDPMessageFromText(text string) (*SDPMessage, SDPResult) {
	var _arg1 *C.gchar         // out
	var _arg2 *C.GstSDPMessage // in
	var _cret C.GstSDPResult   // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_sdp_message_new_from_text(_arg1, &_arg2)
	runtime.KeepAlive(text)

	var _msg *SDPMessage     // out
	var _sdpResult SDPResult // out

	_msg = (*SDPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_sdp_message_free((*C.GstSDPMessage)(intern.C))
		},
	)
	_sdpResult = SDPResult(_cret)

	return _msg, _sdpResult
}

// SDPMessageParseBuffer (gst_sdp_message_parse_buffer): parse the contents of
// size bytes pointed to by data and store the result in msg.
//
// The function takes the following parameters:
//
//   - data: start of the buffer.
//   - msg: result SDPMessage.
//
// The function returns the following values:
//
//   - sdpResult on success.
func SDPMessageParseBuffer(data []byte, msg *SDPMessage) SDPResult {
	var _arg1 *C.guint8 // out
	var _arg2 C.guint
	var _arg3 *C.GstSDPMessage // out
	var _cret C.GstSDPResult   // in

	_arg2 = (C.guint)(len(data))
	if len(data) > 0 {
		_arg1 = (*C.guint8)(unsafe.Pointer(&data[0]))
	}
	_arg3 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_parse_buffer(_arg1, _arg2, _arg3)
	runtime.KeepAlive(data)
	runtime.KeepAlive(msg)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SDPMessageParseURI (gst_sdp_message_parse_uri): parse the null-terminated uri
// and store the result in msg.
//
// The uri should be of the form:
//
//	scheme://[address[:ttl=ttl][:noa=noa]]/[sessionname]
//	             [#type=value *[&type=value]]
//
//	where value is url encoded. This looslely resembles
//	http://tools.ietf.org/html/draft-fujikawa-sdp-url-01.
//
// The function takes the following parameters:
//
//   - uri: start of the uri.
//   - msg: result SDPMessage.
//
// The function returns the following values:
//
//   - sdpResult on success.
func SDPMessageParseURI(uri string, msg *SDPMessage) SDPResult {
	var _arg1 *C.gchar         // out
	var _arg2 *C.GstSDPMessage // out
	var _cret C.GstSDPResult   // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.GstSDPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_sdp_message_parse_uri(_arg1, _arg2)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(msg)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SDPOrigin (GstSDPOrigin) contents of the SDP "o=" field which gives the
// originator of the session (their username and the address of the user's host)
// plus a session id and session version number.
//
// An instance of this type is always passed by reference.
type SDPOrigin struct {
	*sdpOrigin
}

// sdpOrigin is the struct that's finalized.
type sdpOrigin struct {
	native *C.GstSDPOrigin
}

// Username user's login on the originating host, or it is "-" if the
// originating host does not support the concept of user ids.
func (s *SDPOrigin) Username() string {
	valptr := &s.native.username
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// SessID is a numeric string such that the tuple of username, sess_id, nettype,
// addrtype and addr form a globally unique identifier for the session.
func (s *SDPOrigin) SessID() string {
	valptr := &s.native.sess_id
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// SessVersion: version number for this announcement.
func (s *SDPOrigin) SessVersion() string {
	valptr := &s.native.sess_version
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Nettype: type of network. "IN" is defined to have the meaning "Internet".
func (s *SDPOrigin) Nettype() string {
	valptr := &s.native.nettype
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Addrtype: type of addr.
func (s *SDPOrigin) Addrtype() string {
	valptr := &s.native.addrtype
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Addr: globally unique address of the machine from which the session was
// created.
func (s *SDPOrigin) Addr() string {
	valptr := &s.native.addr
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// SDPTime (GstSDPTime) contents of the SDP "t=" field which specify the start
// and stop times for a conference session.
//
// An instance of this type is always passed by reference.
type SDPTime struct {
	*sdpTime
}

// sdpTime is the struct that's finalized.
type sdpTime struct {
	native *C.GstSDPTime
}

// Start: start time for the conference. The value is the decimal representation
// of Network Time Protocol (NTP) time values in seconds.
func (s *SDPTime) Start() string {
	valptr := &s.native.start
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Stop: stop time for the conference. The value is the decimal representation
// of Network Time Protocol (NTP) time values in seconds.
func (s *SDPTime) Stop() string {
	valptr := &s.native.stop
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Clear (gst_sdp_time_clear): reset the time information in t.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (t *SDPTime) Clear() SDPResult {
	var _arg0 *C.GstSDPTime  // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPTime)(gextras.StructNative(unsafe.Pointer(t)))

	_cret = C.gst_sdp_time_clear(_arg0)
	runtime.KeepAlive(t)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// Set (gst_sdp_time_set) time information start, stop and repeat in t.
//
// The function takes the following parameters:
//
//   - start time.
//   - stop time.
//   - repeat times.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (t *SDPTime) Set(start string, stop string, repeat []string) SDPResult {
	var _arg0 *C.GstSDPTime  // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _arg3 **C.gchar      // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPTime)(gextras.StructNative(unsafe.Pointer(t)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(start)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(stop)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		_arg3 = (**C.gchar)(C.calloc(C.size_t((len(repeat) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg3))
		{
			out := unsafe.Slice(_arg3, len(repeat)+1)
			var zero *C.gchar
			out[len(repeat)] = zero
			for i := range repeat {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(repeat[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	_cret = C.gst_sdp_time_set(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(t)
	runtime.KeepAlive(start)
	runtime.KeepAlive(stop)
	runtime.KeepAlive(repeat)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// SDPZone (GstSDPZone) contents of the SDP "z=" field which allows the sender
// to specify a list of time zone adjustments and offsets from the base time.
//
// An instance of this type is always passed by reference.
type SDPZone struct {
	*sdpZone
}

// sdpZone is the struct that's finalized.
type sdpZone struct {
	native *C.GstSDPZone
}

// Time: NTP time that a time zone adjustment happens.
func (s *SDPZone) Time() string {
	valptr := &s.native.time
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// TypedTime: offset from the time when the session was first scheduled.
func (s *SDPZone) TypedTime() string {
	valptr := &s.native.typed_time
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Clear (gst_sdp_zone_clear): reset the zone information in zone.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (zone *SDPZone) Clear() SDPResult {
	var _arg0 *C.GstSDPZone  // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPZone)(gextras.StructNative(unsafe.Pointer(zone)))

	_cret = C.gst_sdp_zone_clear(_arg0)
	runtime.KeepAlive(zone)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}

// Set (gst_sdp_zone_set) zone information in zone.
//
// The function takes the following parameters:
//
//   - adjTime: NTP time that a time zone adjustment happens.
//   - typedTime: offset from the time when the session was first scheduled.
//
// The function returns the following values:
//
//   - sdpResult: SDPResult.
func (zone *SDPZone) Set(adjTime string, typedTime string) SDPResult {
	var _arg0 *C.GstSDPZone  // out
	var _arg1 *C.gchar       // out
	var _arg2 *C.gchar       // out
	var _cret C.GstSDPResult // in

	_arg0 = (*C.GstSDPZone)(gextras.StructNative(unsafe.Pointer(zone)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(adjTime)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(typedTime)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_sdp_zone_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(zone)
	runtime.KeepAlive(adjTime)
	runtime.KeepAlive(typedTime)

	var _sdpResult SDPResult // out

	_sdpResult = SDPResult(_cret)

	return _sdpResult
}
