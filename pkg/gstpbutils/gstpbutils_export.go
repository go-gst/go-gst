// Code generated by girgen. DO NOT EDIT.

package gstpbutils

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/go-gst/go-gst/pkg/gst"
	"github.com/go-gst/go-gst/pkg/gstvideo"
)

// #include <stdlib.h>
// #include <gst/pbutils/pbutils.h>
import "C"

//export _gotk4_gstpbutils1_InstallPluginsResultFunc
func _gotk4_gstpbutils1_InstallPluginsResultFunc(arg1 C.GstInstallPluginsReturn, arg2 C.gpointer) {
	var fn InstallPluginsResultFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(InstallPluginsResultFunc)
	}

	var _result InstallPluginsReturn // out

	_result = InstallPluginsReturn(arg1)

	fn(_result)
}

//export _gotk4_gstpbutils1_AudioVisualizerClass_decide_allocation
func _gotk4_gstpbutils1_AudioVisualizerClass_decide_allocation(arg0 *C.GstAudioVisualizer, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioVisualizerOverrides](instance0)
	if overrides.DecideAllocation == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioVisualizerOverrides.DecideAllocation, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	C.gst_mini_object_ref((*C.GstMiniObject)(unsafe.Pointer(arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_query)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mini_object_unref((*C.GstMiniObject)(intern.C))
		})

	ok := overrides.DecideAllocation(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstpbutils1_AudioVisualizerClass_render
func _gotk4_gstpbutils1_AudioVisualizerClass_render(arg0 *C.GstAudioVisualizer, arg1 *C.GstBuffer, arg2 *C.GstVideoFrame) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioVisualizerOverrides](instance0)
	if overrides.Render == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioVisualizerOverrides.Render, got none")
	}

	var _audio *gst.Buffer          // out
	var _video *gstvideo.VideoFrame // out

	_audio = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	C.gst_mini_object_ref((*C.GstMiniObject)(unsafe.Pointer(arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_audio)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_mini_object_unref((*C.GstMiniObject)(intern.C))
		})
	_video = (*gstvideo.VideoFrame)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	ok := overrides.Render(_audio, _video)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstpbutils1_AudioVisualizerClass_setup
func _gotk4_gstpbutils1_AudioVisualizerClass_setup(arg0 *C.GstAudioVisualizer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioVisualizerOverrides](instance0)
	if overrides.Setup == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioVisualizerOverrides.Setup, got none")
	}

	ok := overrides.Setup()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstpbutils1_DiscovererClass_discovered
func _gotk4_gstpbutils1_DiscovererClass_discovered(arg0 *C.GstDiscoverer, arg1 *C.GstDiscovererInfo, arg2 *C.GError) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[DiscovererOverrides](instance0)
	if overrides.Discovered == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected DiscovererOverrides.Discovered, got none")
	}

	var _info *DiscovererInfo // out
	var _err error            // out

	_info = wrapDiscovererInfo(coreglib.Take(unsafe.Pointer(arg1)))
	_err = gerror.Take(unsafe.Pointer(arg2))

	overrides.Discovered(_info, _err)
}

//export _gotk4_gstpbutils1_DiscovererClass_finished
func _gotk4_gstpbutils1_DiscovererClass_finished(arg0 *C.GstDiscoverer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[DiscovererOverrides](instance0)
	if overrides.Finished == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected DiscovererOverrides.Finished, got none")
	}

	overrides.Finished()
}

//export _gotk4_gstpbutils1_DiscovererClass_load_serialize_info
func _gotk4_gstpbutils1_DiscovererClass_load_serialize_info(arg0 *C.GstDiscoverer, arg1 *C.gchar) (cret *C.GstDiscovererInfo) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[DiscovererOverrides](instance0)
	if overrides.LoadSerializeInfo == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected DiscovererOverrides.LoadSerializeInfo, got none")
	}

	var _uri string // out

	_uri = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	discovererInfo := overrides.LoadSerializeInfo(_uri)

	var _ *DiscovererInfo

	cret = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.BaseObject(discovererInfo).Native()))
	C.g_object_ref(C.gpointer(coreglib.BaseObject(discovererInfo).Native()))

	return cret
}

//export _gotk4_gstpbutils1_DiscovererClass_source_setup
func _gotk4_gstpbutils1_DiscovererClass_source_setup(arg0 *C.GstDiscoverer, arg1 *C.GstElement) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[DiscovererOverrides](instance0)
	if overrides.SourceSetup == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected DiscovererOverrides.SourceSetup, got none")
	}

	var _source gst.Elementer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gst.Elementer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gst.Elementer)
			return ok
		})
		rv, ok := casted.(gst.Elementer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Elementer")
		}
		_source = rv
	}

	overrides.SourceSetup(_source)
}

//export _gotk4_gstpbutils1_DiscovererClass_starting
func _gotk4_gstpbutils1_DiscovererClass_starting(arg0 *C.GstDiscoverer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[DiscovererOverrides](instance0)
	if overrides.Starting == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected DiscovererOverrides.Starting, got none")
	}

	overrides.Starting()
}

//export _gotk4_gstpbutils1_Discoverer_ConnectDiscovered
func _gotk4_gstpbutils1_Discoverer_ConnectDiscovered(arg0 C.gpointer, arg1 *C.GstDiscovererInfo, arg2 *C.GError, arg3 C.guintptr) {
	var f func(info *DiscovererInfo, err error)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(info *DiscovererInfo, err error))
	}

	var _info *DiscovererInfo // out
	var _err error            // out

	_info = wrapDiscovererInfo(coreglib.Take(unsafe.Pointer(arg1)))
	if arg2 != nil {
		_err = gerror.Take(unsafe.Pointer(arg2))
	}

	f(_info, _err)
}

//export _gotk4_gstpbutils1_Discoverer_ConnectFinished
func _gotk4_gstpbutils1_Discoverer_ConnectFinished(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gstpbutils1_Discoverer_ConnectLoadSerializedInfo
func _gotk4_gstpbutils1_Discoverer_ConnectLoadSerializedInfo(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guintptr) (cret *C.GstDiscovererInfo) {
	var f func(uri string) (discovererInfo *DiscovererInfo)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(uri string) (discovererInfo *DiscovererInfo))
	}

	var _uri string // out

	_uri = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	discovererInfo := f(_uri)

	var _ *DiscovererInfo

	if discovererInfo != nil {
		cret = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.BaseObject(discovererInfo).Native()))
		C.g_object_ref(C.gpointer(coreglib.BaseObject(discovererInfo).Native()))
	}

	return cret
}

//export _gotk4_gstpbutils1_Discoverer_ConnectSourceSetup
func _gotk4_gstpbutils1_Discoverer_ConnectSourceSetup(arg0 C.gpointer, arg1 *C.GstElement, arg2 C.guintptr) {
	var f func(source gst.Elementer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(source gst.Elementer))
	}

	var _source gst.Elementer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gst.Elementer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gst.Elementer)
			return ok
		})
		rv, ok := casted.(gst.Elementer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Elementer")
		}
		_source = rv
	}

	f(_source)
}

//export _gotk4_gstpbutils1_Discoverer_ConnectStarting
func _gotk4_gstpbutils1_Discoverer_ConnectStarting(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}
