// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/go-gst/go-gst/pkg/gst"
	"github.com/go-gst/go-gst/pkg/gstbase"
)

// #include <stdlib.h>
// #include <gst/audio/audio.h>
import "C"

//export _gotk4_gstaudio1_AudioBaseSinkCustomSlavingCallback
func _gotk4_gstaudio1_AudioBaseSinkCustomSlavingCallback(arg1 *C.GstAudioBaseSink, arg2 C.GstClockTime, arg3 C.GstClockTime, arg4 *C.GstClockTimeDiff, arg5 C.GstAudioBaseSinkDiscontReason, arg6 C.gpointer) {
	var fn AudioBaseSinkCustomSlavingCallback
	{
		v := gbox.Get(uintptr(arg6))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(AudioBaseSinkCustomSlavingCallback)
	}

	var _sink *AudioBaseSink                      // out
	var _etime gst.ClockTime                      // out
	var _itime gst.ClockTime                      // out
	var _requestedSkew *gst.ClockTimeDiff         // out
	var _discontReason AudioBaseSinkDiscontReason // out

	_sink = wrapAudioBaseSink(coreglib.Take(unsafe.Pointer(arg1)))
	_etime = gst.ClockTime(arg2)
	_itime = gst.ClockTime(arg3)
	_requestedSkew = (*gst.ClockTimeDiff)(unsafe.Pointer(arg4))
	_discontReason = AudioBaseSinkDiscontReason(arg5)

	fn(_sink, _etime, _itime, _requestedSkew, _discontReason)
}

//export _gotk4_gstaudio1_AudioClockGetTimeFunc
func _gotk4_gstaudio1_AudioClockGetTimeFunc(arg1 *C.GstClock, arg2 C.gpointer) (cret C.GstClockTime) {
	var fn AudioClockGetTimeFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(AudioClockGetTimeFunc)
	}

	var _clock gst.Clocker // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gst.Clocker is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gst.Clocker)
			return ok
		})
		rv, ok := casted.(gst.Clocker)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Clocker")
		}
		_clock = rv
	}

	clockTime := fn(_clock)

	var _ gst.ClockTime

	cret = C.GstClockTime(clockTime)

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferCallback
func _gotk4_gstaudio1_AudioRingBufferCallback(arg1 *C.GstAudioRingBuffer, arg2 *C.guint8, arg3 C.guint, arg4 C.gpointer) {
	var fn AudioRingBufferCallback
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(AudioRingBufferCallback)
	}

	var _rbuf AudioRingBufferer // out
	var _data []byte            // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gstaudio.AudioRingBufferer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AudioRingBufferer)
			return ok
		})
		rv, ok := casted.(AudioRingBufferer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gstaudio.AudioRingBufferer")
		}
		_rbuf = rv
	}
	_data = make([]byte, arg3)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(arg2)), arg3))

	fn(_rbuf, _data)
}

//export _gotk4_gstaudio1_AudioAggregatorClass_aggregate_one_buffer
func _gotk4_gstaudio1_AudioAggregatorClass_aggregate_one_buffer(arg0 *C.GstAudioAggregator, arg1 *C.GstAudioAggregatorPad, arg2 *C.GstBuffer, arg3 C.guint, arg4 *C.GstBuffer, arg5 C.guint, arg6 C.guint) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioAggregatorOverrides](instance0)
	if overrides.AggregateOneBuffer == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioAggregatorOverrides.AggregateOneBuffer, got none")
	}

	var _pad *AudioAggregatorPad // out
	var _inbuf *gst.Buffer       // out
	var _inOffset uint           // out
	var _outbuf *gst.Buffer      // out
	var _outOffset uint          // out
	var _numFrames uint          // out

	_pad = wrapAudioAggregatorPad(coreglib.Take(unsafe.Pointer(arg1)))
	_inbuf = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_inOffset = uint(arg3)
	_outbuf = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg4)))
	_outOffset = uint(arg5)
	_numFrames = uint(arg6)

	ok := overrides.AggregateOneBuffer(_pad, _inbuf, _inOffset, _outbuf, _outOffset, _numFrames)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioAggregatorClass_create_output_buffer
func _gotk4_gstaudio1_AudioAggregatorClass_create_output_buffer(arg0 *C.GstAudioAggregator, arg1 C.guint) (cret *C.GstBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioAggregatorOverrides](instance0)
	if overrides.CreateOutputBuffer == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioAggregatorOverrides.CreateOutputBuffer, got none")
	}

	var _numFrames uint // out

	_numFrames = uint(arg1)

	buffer := overrides.CreateOutputBuffer(_numFrames)

	var _ *gst.Buffer

	cret = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(buffer)), nil)

	return cret
}

//export _gotk4_gstaudio1_AudioAggregatorPadClass_convert_buffer
func _gotk4_gstaudio1_AudioAggregatorPadClass_convert_buffer(arg0 *C.GstAudioAggregatorPad, arg1 *C.GstAudioInfo, arg2 *C.GstAudioInfo, arg3 *C.GstBuffer) (cret *C.GstBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioAggregatorPadOverrides](instance0)
	if overrides.ConvertBuffer == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioAggregatorPadOverrides.ConvertBuffer, got none")
	}

	var _inInfo *AudioInfo  // out
	var _outInfo *AudioInfo // out
	var _buffer *gst.Buffer // out

	_inInfo = (*AudioInfo)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_outInfo = (*AudioInfo)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	ret := overrides.ConvertBuffer(_inInfo, _outInfo, _buffer)

	var _ *gst.Buffer

	cret = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(ret)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(ret)), nil)

	return cret
}

//export _gotk4_gstaudio1_AudioAggregatorPadClass_update_conversion_info
func _gotk4_gstaudio1_AudioAggregatorPadClass_update_conversion_info(arg0 *C.GstAudioAggregatorPad) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioAggregatorPadOverrides](instance0)
	if overrides.UpdateConversionInfo == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioAggregatorPadOverrides.UpdateConversionInfo, got none")
	}

	overrides.UpdateConversionInfo()
}

//export _gotk4_gstaudio1_AudioBaseSinkClass_create_ringbuffer
func _gotk4_gstaudio1_AudioBaseSinkClass_create_ringbuffer(arg0 *C.GstAudioBaseSink) (cret *C.GstAudioRingBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioBaseSinkOverrides](instance0)
	if overrides.CreateRingbuffer == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioBaseSinkOverrides.CreateRingbuffer, got none")
	}

	audioRingBuffer := overrides.CreateRingbuffer()

	var _ AudioRingBufferer

	if audioRingBuffer != nil {
		cret = (*C.GstAudioRingBuffer)(unsafe.Pointer(coreglib.InternObject(audioRingBuffer).Native()))
	}

	return cret
}

//export _gotk4_gstaudio1_AudioBaseSinkClass_payload
func _gotk4_gstaudio1_AudioBaseSinkClass_payload(arg0 *C.GstAudioBaseSink, arg1 *C.GstBuffer) (cret *C.GstBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioBaseSinkOverrides](instance0)
	if overrides.Payload == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioBaseSinkOverrides.Payload, got none")
	}

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ret := overrides.Payload(_buffer)

	var _ *gst.Buffer

	cret = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(ret)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(ret)), nil)

	return cret
}

//export _gotk4_gstaudio1_AudioBaseSrcClass_create_ringbuffer
func _gotk4_gstaudio1_AudioBaseSrcClass_create_ringbuffer(arg0 *C.GstAudioBaseSrc) (cret *C.GstAudioRingBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioBaseSrcOverrides](instance0)
	if overrides.CreateRingbuffer == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioBaseSrcOverrides.CreateRingbuffer, got none")
	}

	audioRingBuffer := overrides.CreateRingbuffer()

	var _ AudioRingBufferer

	if audioRingBuffer != nil {
		cret = (*C.GstAudioRingBuffer)(unsafe.Pointer(coreglib.InternObject(audioRingBuffer).Native()))
	}

	return cret
}

//export _gotk4_gstaudio1_AudioCdSrcClass_close
func _gotk4_gstaudio1_AudioCdSrcClass_close(arg0 *C.GstAudioCdSrc) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioCdSrcOverrides](instance0)
	if overrides.Close == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioCdSrcOverrides.Close, got none")
	}

	overrides.Close()
}

//export _gotk4_gstaudio1_AudioCdSrcClass_open
func _gotk4_gstaudio1_AudioCdSrcClass_open(arg0 *C.GstAudioCdSrc, arg1 *C.gchar) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioCdSrcOverrides](instance0)
	if overrides.Open == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioCdSrcOverrides.Open, got none")
	}

	var _device string // out

	_device = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	ok := overrides.Open(_device)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioCdSrcClass_read_sector
func _gotk4_gstaudio1_AudioCdSrcClass_read_sector(arg0 *C.GstAudioCdSrc, arg1 C.gint) (cret *C.GstBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioCdSrcOverrides](instance0)
	if overrides.ReadSector == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioCdSrcOverrides.ReadSector, got none")
	}

	var _sector int // out

	_sector = int(arg1)

	buffer := overrides.ReadSector(_sector)

	var _ *gst.Buffer

	cret = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(buffer)), nil)

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_close
func _gotk4_gstaudio1_AudioDecoderClass_close(arg0 *C.GstAudioDecoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.Close == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.Close, got none")
	}

	ok := overrides.Close()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_decide_allocation
func _gotk4_gstaudio1_AudioDecoderClass_decide_allocation(arg0 *C.GstAudioDecoder, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.DecideAllocation == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.DecideAllocation, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.DecideAllocation(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_flush
func _gotk4_gstaudio1_AudioDecoderClass_flush(arg0 *C.GstAudioDecoder, arg1 C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.Flush == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.Flush, got none")
	}

	var _hard bool // out

	if arg1 != 0 {
		_hard = true
	}

	overrides.Flush(_hard)
}

//export _gotk4_gstaudio1_AudioDecoderClass_getcaps
func _gotk4_gstaudio1_AudioDecoderClass_getcaps(arg0 *C.GstAudioDecoder, arg1 *C.GstCaps) (cret *C.GstCaps) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.caps == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.caps, got none")
	}

	var _filter *gst.Caps // out

	_filter = (*gst.Caps)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	caps := overrides.caps(_filter)

	var _ *gst.Caps

	cret = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(caps)), nil)

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_handle_frame
func _gotk4_gstaudio1_AudioDecoderClass_handle_frame(arg0 *C.GstAudioDecoder, arg1 *C.GstBuffer) (cret C.GstFlowReturn) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.HandleFrame == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.HandleFrame, got none")
	}

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	flowReturn := overrides.HandleFrame(_buffer)

	var _ gst.FlowReturn

	cret = C.GstFlowReturn(flowReturn)

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_negotiate
func _gotk4_gstaudio1_AudioDecoderClass_negotiate(arg0 *C.GstAudioDecoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.Negotiate == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.Negotiate, got none")
	}

	ok := overrides.Negotiate()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_open
func _gotk4_gstaudio1_AudioDecoderClass_open(arg0 *C.GstAudioDecoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.Open == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.Open, got none")
	}

	ok := overrides.Open()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_parse
func _gotk4_gstaudio1_AudioDecoderClass_parse(arg0 *C.GstAudioDecoder, arg1 *C.GstAdapter, arg2 *C.gint, arg3 *C.gint) (cret C.GstFlowReturn) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.Parse == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.Parse, got none")
	}

	var _adapter *gstbase.Adapter // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_adapter = &gstbase.Adapter{
			Object: obj,
		}
	}

	offset, length, flowReturn := overrides.Parse(_adapter)

	var _ int
	var _ int
	var _ gst.FlowReturn

	*arg2 = C.gint(offset)
	*arg3 = C.gint(length)
	cret = C.GstFlowReturn(flowReturn)

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_propose_allocation
func _gotk4_gstaudio1_AudioDecoderClass_propose_allocation(arg0 *C.GstAudioDecoder, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.ProposeAllocation == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.ProposeAllocation, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.ProposeAllocation(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_set_format
func _gotk4_gstaudio1_AudioDecoderClass_set_format(arg0 *C.GstAudioDecoder, arg1 *C.GstCaps) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.SetFormat == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.SetFormat, got none")
	}

	var _caps *gst.Caps // out

	_caps = (*gst.Caps)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SetFormat(_caps)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_sink_event
func _gotk4_gstaudio1_AudioDecoderClass_sink_event(arg0 *C.GstAudioDecoder, arg1 *C.GstEvent) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.SinkEvent == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.SinkEvent, got none")
	}

	var _event *gst.Event // out

	_event = (*gst.Event)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SinkEvent(_event)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_sink_query
func _gotk4_gstaudio1_AudioDecoderClass_sink_query(arg0 *C.GstAudioDecoder, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.SinkQuery == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.SinkQuery, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SinkQuery(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_src_event
func _gotk4_gstaudio1_AudioDecoderClass_src_event(arg0 *C.GstAudioDecoder, arg1 *C.GstEvent) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.SrcEvent == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.SrcEvent, got none")
	}

	var _event *gst.Event // out

	_event = (*gst.Event)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SrcEvent(_event)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_src_query
func _gotk4_gstaudio1_AudioDecoderClass_src_query(arg0 *C.GstAudioDecoder, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.SrcQuery == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.SrcQuery, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SrcQuery(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_start
func _gotk4_gstaudio1_AudioDecoderClass_start(arg0 *C.GstAudioDecoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.Start == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.Start, got none")
	}

	ok := overrides.Start()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_stop
func _gotk4_gstaudio1_AudioDecoderClass_stop(arg0 *C.GstAudioDecoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.Stop == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.Stop, got none")
	}

	ok := overrides.Stop()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioDecoderClass_transform_meta
func _gotk4_gstaudio1_AudioDecoderClass_transform_meta(arg0 *C.GstAudioDecoder, arg1 *C.GstBuffer, arg2 *C.GstMeta, arg3 *C.GstBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioDecoderOverrides](instance0)
	if overrides.TransformMeta == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioDecoderOverrides.TransformMeta, got none")
	}

	var _outbuf *gst.Buffer // out
	var _meta *gst.Meta     // out
	var _inbuf *gst.Buffer  // out

	_outbuf = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_meta = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_inbuf = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	ok := overrides.TransformMeta(_outbuf, _meta, _inbuf)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_close
func _gotk4_gstaudio1_AudioEncoderClass_close(arg0 *C.GstAudioEncoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.Close == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.Close, got none")
	}

	ok := overrides.Close()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_decide_allocation
func _gotk4_gstaudio1_AudioEncoderClass_decide_allocation(arg0 *C.GstAudioEncoder, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.DecideAllocation == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.DecideAllocation, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.DecideAllocation(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_flush
func _gotk4_gstaudio1_AudioEncoderClass_flush(arg0 *C.GstAudioEncoder) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.Flush == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.Flush, got none")
	}

	overrides.Flush()
}

//export _gotk4_gstaudio1_AudioEncoderClass_getcaps
func _gotk4_gstaudio1_AudioEncoderClass_getcaps(arg0 *C.GstAudioEncoder, arg1 *C.GstCaps) (cret *C.GstCaps) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.caps == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.caps, got none")
	}

	var _filter *gst.Caps // out

	_filter = (*gst.Caps)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	caps := overrides.caps(_filter)

	var _ *gst.Caps

	cret = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(caps)), nil)

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_handle_frame
func _gotk4_gstaudio1_AudioEncoderClass_handle_frame(arg0 *C.GstAudioEncoder, arg1 *C.GstBuffer) (cret C.GstFlowReturn) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.HandleFrame == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.HandleFrame, got none")
	}

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	flowReturn := overrides.HandleFrame(_buffer)

	var _ gst.FlowReturn

	cret = C.GstFlowReturn(flowReturn)

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_negotiate
func _gotk4_gstaudio1_AudioEncoderClass_negotiate(arg0 *C.GstAudioEncoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.Negotiate == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.Negotiate, got none")
	}

	ok := overrides.Negotiate()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_open
func _gotk4_gstaudio1_AudioEncoderClass_open(arg0 *C.GstAudioEncoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.Open == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.Open, got none")
	}

	ok := overrides.Open()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_propose_allocation
func _gotk4_gstaudio1_AudioEncoderClass_propose_allocation(arg0 *C.GstAudioEncoder, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.ProposeAllocation == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.ProposeAllocation, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.ProposeAllocation(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_set_format
func _gotk4_gstaudio1_AudioEncoderClass_set_format(arg0 *C.GstAudioEncoder, arg1 *C.GstAudioInfo) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.SetFormat == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.SetFormat, got none")
	}

	var _info *AudioInfo // out

	_info = (*AudioInfo)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SetFormat(_info)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_sink_event
func _gotk4_gstaudio1_AudioEncoderClass_sink_event(arg0 *C.GstAudioEncoder, arg1 *C.GstEvent) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.SinkEvent == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.SinkEvent, got none")
	}

	var _event *gst.Event // out

	_event = (*gst.Event)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SinkEvent(_event)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_sink_query
func _gotk4_gstaudio1_AudioEncoderClass_sink_query(arg0 *C.GstAudioEncoder, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.SinkQuery == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.SinkQuery, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SinkQuery(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_src_event
func _gotk4_gstaudio1_AudioEncoderClass_src_event(arg0 *C.GstAudioEncoder, arg1 *C.GstEvent) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.SrcEvent == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.SrcEvent, got none")
	}

	var _event *gst.Event // out

	_event = (*gst.Event)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SrcEvent(_event)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_src_query
func _gotk4_gstaudio1_AudioEncoderClass_src_query(arg0 *C.GstAudioEncoder, arg1 *C.GstQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.SrcQuery == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.SrcQuery, got none")
	}

	var _query *gst.Query // out

	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.SrcQuery(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_start
func _gotk4_gstaudio1_AudioEncoderClass_start(arg0 *C.GstAudioEncoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.Start == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.Start, got none")
	}

	ok := overrides.Start()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_stop
func _gotk4_gstaudio1_AudioEncoderClass_stop(arg0 *C.GstAudioEncoder) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.Stop == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.Stop, got none")
	}

	ok := overrides.Stop()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioEncoderClass_transform_meta
func _gotk4_gstaudio1_AudioEncoderClass_transform_meta(arg0 *C.GstAudioEncoder, arg1 *C.GstBuffer, arg2 *C.GstMeta, arg3 *C.GstBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioEncoderOverrides](instance0)
	if overrides.TransformMeta == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioEncoderOverrides.TransformMeta, got none")
	}

	var _outbuf *gst.Buffer // out
	var _meta *gst.Meta     // out
	var _inbuf *gst.Buffer  // out

	_outbuf = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_meta = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_inbuf = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	ok := overrides.TransformMeta(_outbuf, _meta, _inbuf)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioFilterClass_setup
func _gotk4_gstaudio1_AudioFilterClass_setup(arg0 *C.GstAudioFilter, arg1 *C.GstAudioInfo) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioFilterOverrides](instance0)
	if overrides.Setup == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioFilterOverrides.Setup, got none")
	}

	var _info *AudioInfo // out

	_info = (*AudioInfo)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.Setup(_info)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_acquire
func _gotk4_gstaudio1_AudioRingBufferClass_acquire(arg0 *C.GstAudioRingBuffer, arg1 *C.GstAudioRingBufferSpec) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.Acquire == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.Acquire, got none")
	}

	var _spec *AudioRingBufferSpec // out

	_spec = (*AudioRingBufferSpec)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.Acquire(_spec)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_activate
func _gotk4_gstaudio1_AudioRingBufferClass_activate(arg0 *C.GstAudioRingBuffer, arg1 C.gboolean) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.Activate == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.Activate, got none")
	}

	var _active bool // out

	if arg1 != 0 {
		_active = true
	}

	ok := overrides.Activate(_active)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_clear_all
func _gotk4_gstaudio1_AudioRingBufferClass_clear_all(arg0 *C.GstAudioRingBuffer) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.ClearAll == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.ClearAll, got none")
	}

	overrides.ClearAll()
}

//export _gotk4_gstaudio1_AudioRingBufferClass_close_device
func _gotk4_gstaudio1_AudioRingBufferClass_close_device(arg0 *C.GstAudioRingBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.CloseDevice == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.CloseDevice, got none")
	}

	ok := overrides.CloseDevice()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_delay
func _gotk4_gstaudio1_AudioRingBufferClass_delay(arg0 *C.GstAudioRingBuffer) (cret C.guint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.Delay == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.Delay, got none")
	}

	guint := overrides.Delay()

	var _ uint

	cret = C.guint(guint)

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_open_device
func _gotk4_gstaudio1_AudioRingBufferClass_open_device(arg0 *C.GstAudioRingBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.OpenDevice == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.OpenDevice, got none")
	}

	ok := overrides.OpenDevice()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_pause
func _gotk4_gstaudio1_AudioRingBufferClass_pause(arg0 *C.GstAudioRingBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.Pause == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.Pause, got none")
	}

	ok := overrides.Pause()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_release
func _gotk4_gstaudio1_AudioRingBufferClass_release(arg0 *C.GstAudioRingBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.Release == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.Release, got none")
	}

	ok := overrides.Release()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_resume
func _gotk4_gstaudio1_AudioRingBufferClass_resume(arg0 *C.GstAudioRingBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.Resume == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.Resume, got none")
	}

	ok := overrides.Resume()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_start
func _gotk4_gstaudio1_AudioRingBufferClass_start(arg0 *C.GstAudioRingBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.Start == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.Start, got none")
	}

	ok := overrides.Start()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioRingBufferClass_stop
func _gotk4_gstaudio1_AudioRingBufferClass_stop(arg0 *C.GstAudioRingBuffer) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioRingBufferOverrides](instance0)
	if overrides.Stop == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioRingBufferOverrides.Stop, got none")
	}

	ok := overrides.Stop()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioSinkClass_close
func _gotk4_gstaudio1_AudioSinkClass_close(arg0 *C.GstAudioSink) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Close == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Close, got none")
	}

	ok := overrides.Close()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioSinkClass_delay
func _gotk4_gstaudio1_AudioSinkClass_delay(arg0 *C.GstAudioSink) (cret C.guint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Delay == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Delay, got none")
	}

	guint := overrides.Delay()

	var _ uint

	cret = C.guint(guint)

	return cret
}

//export _gotk4_gstaudio1_AudioSinkClass_open
func _gotk4_gstaudio1_AudioSinkClass_open(arg0 *C.GstAudioSink) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Open == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Open, got none")
	}

	ok := overrides.Open()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioSinkClass_pause
func _gotk4_gstaudio1_AudioSinkClass_pause(arg0 *C.GstAudioSink) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Pause == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Pause, got none")
	}

	overrides.Pause()
}

//export _gotk4_gstaudio1_AudioSinkClass_prepare
func _gotk4_gstaudio1_AudioSinkClass_prepare(arg0 *C.GstAudioSink, arg1 *C.GstAudioRingBufferSpec) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Prepare == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Prepare, got none")
	}

	var _spec *AudioRingBufferSpec // out

	_spec = (*AudioRingBufferSpec)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.Prepare(_spec)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioSinkClass_reset
func _gotk4_gstaudio1_AudioSinkClass_reset(arg0 *C.GstAudioSink) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Reset == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Reset, got none")
	}

	overrides.Reset()
}

//export _gotk4_gstaudio1_AudioSinkClass_resume
func _gotk4_gstaudio1_AudioSinkClass_resume(arg0 *C.GstAudioSink) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Resume == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Resume, got none")
	}

	overrides.Resume()
}

//export _gotk4_gstaudio1_AudioSinkClass_stop
func _gotk4_gstaudio1_AudioSinkClass_stop(arg0 *C.GstAudioSink) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Stop == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Stop, got none")
	}

	overrides.Stop()
}

//export _gotk4_gstaudio1_AudioSinkClass_unprepare
func _gotk4_gstaudio1_AudioSinkClass_unprepare(arg0 *C.GstAudioSink) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Unprepare == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Unprepare, got none")
	}

	ok := overrides.Unprepare()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioSinkClass_write
func _gotk4_gstaudio1_AudioSinkClass_write(arg0 *C.GstAudioSink, arg1 C.gpointer, arg2 C.guint) (cret C.gint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSinkOverrides](instance0)
	if overrides.Write == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSinkOverrides.Write, got none")
	}

	var _data []byte // out

	_data = make([]byte, arg2)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(arg1)), arg2))

	gint := overrides.Write(_data)

	var _ int

	cret = C.gint(gint)

	return cret
}

//export _gotk4_gstaudio1_AudioSrcClass_close
func _gotk4_gstaudio1_AudioSrcClass_close(arg0 *C.GstAudioSrc) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSrcOverrides](instance0)
	if overrides.Close == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSrcOverrides.Close, got none")
	}

	ok := overrides.Close()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioSrcClass_delay
func _gotk4_gstaudio1_AudioSrcClass_delay(arg0 *C.GstAudioSrc) (cret C.guint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSrcOverrides](instance0)
	if overrides.Delay == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSrcOverrides.Delay, got none")
	}

	guint := overrides.Delay()

	var _ uint

	cret = C.guint(guint)

	return cret
}

//export _gotk4_gstaudio1_AudioSrcClass_open
func _gotk4_gstaudio1_AudioSrcClass_open(arg0 *C.GstAudioSrc) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSrcOverrides](instance0)
	if overrides.Open == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSrcOverrides.Open, got none")
	}

	ok := overrides.Open()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioSrcClass_prepare
func _gotk4_gstaudio1_AudioSrcClass_prepare(arg0 *C.GstAudioSrc, arg1 *C.GstAudioRingBufferSpec) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSrcOverrides](instance0)
	if overrides.Prepare == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSrcOverrides.Prepare, got none")
	}

	var _spec *AudioRingBufferSpec // out

	_spec = (*AudioRingBufferSpec)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	ok := overrides.Prepare(_spec)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstaudio1_AudioSrcClass_read
func _gotk4_gstaudio1_AudioSrcClass_read(arg0 *C.GstAudioSrc, arg1 C.gpointer, arg2 C.guint, arg3 *C.GstClockTime) (cret C.guint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSrcOverrides](instance0)
	if overrides.Read == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSrcOverrides.Read, got none")
	}

	var _data []byte // out

	_data = make([]byte, arg2)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(arg1)), arg2))

	timestamp, guint := overrides.Read(_data)

	var _ gst.ClockTime
	var _ uint

	*arg3 = C.GstClockTime(timestamp)
	cret = C.guint(guint)

	return cret
}

//export _gotk4_gstaudio1_AudioSrcClass_reset
func _gotk4_gstaudio1_AudioSrcClass_reset(arg0 *C.GstAudioSrc) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSrcOverrides](instance0)
	if overrides.Reset == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSrcOverrides.Reset, got none")
	}

	overrides.Reset()
}

//export _gotk4_gstaudio1_AudioSrcClass_unprepare
func _gotk4_gstaudio1_AudioSrcClass_unprepare(arg0 *C.GstAudioSrc) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[AudioSrcOverrides](instance0)
	if overrides.Unprepare == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected AudioSrcOverrides.Unprepare, got none")
	}

	ok := overrides.Unprepare()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
